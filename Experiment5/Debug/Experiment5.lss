
Experiment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  008001be  008001be  00001648  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003156  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013be  00000000  00000000  00004a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000148a  00000000  00000000  00005dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  0000724c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e9  00000000  00000000  00007714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a91  00000000  00000000  000080fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	a5 06       	cpc	r10, r21
      ce:	ad 06       	cpc	r10, r29
      d0:	9d 06       	cpc	r9, r29
      d2:	95 06       	cpc	r9, r21
      d4:	8d 06       	cpc	r8, r29
      d6:	85 06       	cpc	r8, r21
      d8:	7d 06       	cpc	r7, r29
      da:	75 06       	cpc	r7, r21
      dc:	6d 06       	cpc	r6, r29
      de:	65 06       	cpc	r6, r21
      e0:	5d 06       	cpc	r5, r29
      e2:	55 06       	cpc	r5, r21

000000e4 <Prnt_bytes_prnt>:
      e4:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      f4:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
     104:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
     114:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	11 e0       	ldi	r17, 0x01	; 1
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e6 ef       	ldi	r30, 0xF6	; 246
     138:	f4 e1       	ldi	r31, 0x14	; 20
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	ae 3b       	cpi	r26, 0xBE	; 190
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	ae eb       	ldi	r26, 0xBE	; 190
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ae 30       	cpi	r26, 0x0E	; 14
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
     15a:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
     162:	fc 01       	movw	r30, r24
     164:	21 81       	ldd	r18, Z+1	; 0x01
     166:	62 2b       	or	r22, r18
     168:	61 83       	std	Z+1, r22	; 0x01
     16a:	08 95       	ret

0000016c <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
     16c:	fc 01       	movw	r30, r24
     16e:	22 81       	ldd	r18, Z+2	; 0x02
     170:	62 2b       	or	r22, r18
     172:	62 83       	std	Z+2, r22	; 0x02
     174:	08 95       	ret

00000176 <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
     176:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
     178:	92 81       	ldd	r25, Z+2	; 0x02
     17a:	60 95       	com	r22
     17c:	69 23       	and	r22, r25
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	08 95       	ret

00000182 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(volatile UART_t * UART_addr)
{
     182:	8f 92       	push	r8
     184:	9f 92       	push	r9
     186:	af 92       	push	r10
     188:	bf 92       	push	r11
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	2b 97       	sbiw	r28, 0x0b	; 11
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 c0       	rjmp	.+16     	; 0x1bc <long_serial_input+0x3a>
      {
        input_values[index]=0;
     1ac:	e1 e0       	ldi	r30, 0x01	; 1
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ec 0f       	add	r30, r28
     1b2:	fd 1f       	adc	r31, r29
     1b4:	e8 0f       	add	r30, r24
     1b6:	f1 1d       	adc	r31, r1
     1b8:	10 82       	st	Z, r1
uint32_t long_serial_input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	8b 30       	cpi	r24, 0x0B	; 11
     1be:	b0 f3       	brcs	.-20     	; 0x1ac <long_serial_input+0x2a>
     1c0:	88 24       	eor	r8, r8
     1c2:	8a 94       	dec	r8
     1c4:	98 2c       	mov	r9, r8
     1c6:	54 01       	movw	r10, r8
     1c8:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_receive(UART_addr);
     1ca:	c7 01       	movw	r24, r14
     1cc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receive>
     1d0:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
     1d2:	80 ed       	ldi	r24, 0xD0	; 208
     1d4:	81 0f       	add	r24, r17
     1d6:	8a 30       	cpi	r24, 0x0A	; 10
     1d8:	68 f4       	brcc	.+26     	; 0x1f4 <long_serial_input+0x72>
         {
           UART_transmit(UART_addr,input);    // echo valid inputs only
     1da:	61 2f       	mov	r22, r17
     1dc:	c7 01       	movw	r24, r14
     1de:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
		   input_values[index]=input;
     1e2:	e1 e0       	ldi	r30, 0x01	; 1
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	ec 0f       	add	r30, r28
     1e8:	fd 1f       	adc	r31, r29
     1ea:	e0 0f       	add	r30, r16
     1ec:	f1 1d       	adc	r31, r1
     1ee:	10 83       	st	Z, r17
           index++;
     1f0:	0f 5f       	subi	r16, 0xFF	; 255
     1f2:	2d c0       	rjmp	.+90     	; 0x24e <long_serial_input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
     1f4:	18 30       	cpi	r17, 0x08	; 8
     1f6:	11 f0       	breq	.+4      	; 0x1fc <long_serial_input+0x7a>
     1f8:	1f 37       	cpi	r17, 0x7F	; 127
     1fa:	a9 f4       	brne	.+42     	; 0x226 <long_serial_input+0xa4>
         {
           index--;
     1fc:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
     1fe:	e1 e0       	ldi	r30, 0x01	; 1
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ec 0f       	add	r30, r28
     204:	fd 1f       	adc	r31, r29
     206:	e0 0f       	add	r30, r16
     208:	f1 1d       	adc	r31, r1
     20a:	10 82       	st	Z, r1
		   UART_transmit(UART_addr,BS);
     20c:	68 e0       	ldi	r22, 0x08	; 8
     20e:	c7 01       	movw	r24, r14
     210:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
           UART_transmit(UART_addr,space);
     214:	60 e2       	ldi	r22, 0x20	; 32
     216:	c7 01       	movw	r24, r14
     218:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
           UART_transmit(UART_addr,BS);
     21c:	68 e0       	ldi	r22, 0x08	; 8
     21e:	c7 01       	movw	r24, r14
     220:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
     224:	14 c0       	rjmp	.+40     	; 0x24e <long_serial_input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
     226:	1d 30       	cpi	r17, 0x0D	; 13
     228:	21 f0       	breq	.+8      	; 0x232 <long_serial_input+0xb0>
     22a:	1a 30       	cpi	r17, 0x0A	; 10
     22c:	11 f0       	breq	.+4      	; 0x232 <long_serial_input+0xb0>
     22e:	1e 32       	cpi	r17, 0x2E	; 46
     230:	71 f4       	brne	.+28     	; 0x24e <long_serial_input+0xcc>
         {
            output_value=atol(input_values);
     232:	ce 01       	movw	r24, r28
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	0e 94 53 07 	call	0xea6	; 0xea6 <atol>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     23e:	6d e0       	ldi	r22, 0x0D	; 13
     240:	c7 01       	movw	r24, r14
     242:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
			UART_transmit(UART_addr,LF);
     246:	6a e0       	ldi	r22, 0x0A	; 10
     248:	c7 01       	movw	r24, r14
     24a:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
         }
         if(index==10)
     24e:	0a 30       	cpi	r16, 0x0A	; 10
     250:	71 f4       	brne	.+28     	; 0x26e <long_serial_input+0xec>
         {
            output_value=atol(input_values);
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 53 07 	call	0xea6	; 0xea6 <atol>
     25a:	4b 01       	movw	r8, r22
     25c:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     25e:	6d e0       	ldi	r22, 0x0D	; 13
     260:	c7 01       	movw	r24, r14
     262:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
			UART_transmit(UART_addr,LF);
     266:	6a e0       	ldi	r22, 0x0A	; 10
     268:	c7 01       	movw	r24, r14
     26a:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
         }
      }while(output_value==0xffffffff);
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	88 16       	cp	r8, r24
     272:	98 06       	cpc	r9, r24
     274:	a8 06       	cpc	r10, r24
     276:	b8 06       	cpc	r11, r24
     278:	09 f4       	brne	.+2      	; 0x27c <long_serial_input+0xfa>
     27a:	a7 cf       	rjmp	.-178    	; 0x1ca <long_serial_input+0x48>

return output_value;
}
     27c:	c5 01       	movw	r24, r10
     27e:	b4 01       	movw	r22, r8
     280:	2b 96       	adiw	r28, 0x0b	; 11
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	bf 90       	pop	r11
     29a:	af 90       	pop	r10
     29c:	9f 90       	pop	r9
     29e:	8f 90       	pop	r8
     2a0:	08 95       	ret

000002a2 <main>:
#include "UART_Print.h"
#include "Long_Serial_In.h"
#include "sd_read.h"

int main(void)
{
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	cd 50       	subi	r28, 0x0D	; 13
     2b6:	d2 40       	sbci	r29, 0x02	; 2
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
	/**********************************
	*
	* Experiment 2 Initializations
	*
	***********************************/
	UART_init(UART0, BAUD_RATE);
     2c2:	60 e8       	ldi	r22, 0x80	; 128
     2c4:	75 e2       	ldi	r23, 0x25	; 37
     2c6:	80 ec       	ldi	r24, 0xC0	; 192
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_init>
	UART_init(UART1, BAUD_RATE);
     2ce:	60 e8       	ldi	r22, 0x80	; 128
     2d0:	75 e2       	ldi	r23, 0x25	; 37
     2d2:	88 ec       	ldi	r24, 0xC8	; 200
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_init>
	UART_init(UART2, BAUD_RATE);
     2da:	60 e8       	ldi	r22, 0x80	; 128
     2dc:	75 e2       	ldi	r23, 0x25	; 37
     2de:	80 ed       	ldi	r24, 0xD0	; 208
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_init>
	* Experiment 3 Initializations
	*
	***********************************/
	
	// 400KHz used for the first init, which is the max hz for now.
	SPI_master_init(SPI0, 400000U); // port 0 is used for SD card, OLED, MP3
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e1       	ldi	r21, 0x1A	; 26
     2ea:	66 e0       	ldi	r22, 0x06	; 6
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	8c e4       	ldi	r24, 0x4C	; 76
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 9c 05 	call	0xb38	; 0xb38 <SPI_master_init>
	uint32_t mem_block_num;
	uint8_t mem_block[512];
	enum ErrorTypes typederror = 0;
	
	// debug strings
	char start[] = "Start\n";
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	e7 e3       	ldi	r30, 0x37	; 55
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	de 01       	movw	r26, r28
     2fe:	af 5f       	subi	r26, 0xFF	; 255
     300:	bd 4f       	sbci	r27, 0xFD	; 253
     302:	01 90       	ld	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	8a 95       	dec	r24
     308:	e1 f7       	brne	.-8      	; 0x302 <main+0x60>
	char stop[] = "Stop\n";
     30a:	86 e0       	ldi	r24, 0x06	; 6
     30c:	ee e3       	ldi	r30, 0x3E	; 62
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	de 01       	movw	r26, r28
     312:	a8 5f       	subi	r26, 0xF8	; 248
     314:	bd 4f       	sbci	r27, 0xFD	; 253
     316:	01 90       	ld	r0, Z+
     318:	0d 92       	st	X+, r0
     31a:	8a 95       	dec	r24
     31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x74>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
     31e:	60 e1       	ldi	r22, 0x10	; 16
     320:	83 e2       	ldi	r24, 0x23	; 35
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
     328:	46 e0       	ldi	r20, 0x06	; 6
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7d 4f       	sbci	r23, 0xFD	; 253
     330:	88 ec       	ldi	r24, 0xC8	; 200
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
	
	do
	{
		typederror = SD_init(SPI0);
     338:	8c e4       	ldi	r24, 0x4C	; 76
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <SD_init>
     340:	18 2f       	mov	r17, r24
		if (typederror != 0)
     342:	88 23       	and	r24, r24
     344:	29 f0       	breq	.+10     	; 0x350 <main+0xae>
		{
			display_error(UART1, typederror);
     346:	68 2f       	mov	r22, r24
     348:	88 ec       	ldi	r24, 0xC8	; 200
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 48 06 	call	0xc90	; 0xc90 <display_error>
		}
	}while(typederror != 0);
     350:	11 11       	cpse	r17, r1
     352:	f2 cf       	rjmp	.-28     	; 0x338 <main+0x96>
	
	//SPI can be reinitialized at a faster freq, now that the SD has been initialized.
	SPI_master_init(SPI0, 8000000U);
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	52 e1       	ldi	r21, 0x12	; 18
     358:	6a e7       	ldi	r22, 0x7A	; 122
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	8c e4       	ldi	r24, 0x4C	; 76
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 9c 05 	call	0xb38	; 0xb38 <SPI_master_init>
	
	UART_transmit_string(UART1, "SD initialized\n", 15);
     364:	4f e0       	ldi	r20, 0x0F	; 15
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	71 e0       	ldi	r23, 0x01	; 1
     36a:	88 ec       	ldi	r24, 0xC8	; 200
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>

	// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
	while (1)
	{
		UART_transmit_string(UART1, "Input Block Number:\n", 21);
     372:	45 e1       	ldi	r20, 0x15	; 21
     374:	60 e1       	ldi	r22, 0x10	; 16
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	88 ec       	ldi	r24, 0xC8	; 200
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
		mem_block_num = long_serial_input(UART1);
     380:	88 ec       	ldi	r24, 0xC8	; 200
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 c1 00 	call	0x182	; 0x182 <long_serial_input>
     388:	6b 01       	movw	r12, r22
     38a:	7c 01       	movw	r14, r24
		UART_transmit_string(UART1, "Reading Block...\n", 18);
     38c:	42 e1       	ldi	r20, 0x12	; 18
     38e:	65 e2       	ldi	r22, 0x25	; 37
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	88 ec       	ldi	r24, 0xC8	; 200
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
		//set SD low/active
		SD_CS_active(PB, (1<<4));
     39a:	60 e1       	ldi	r22, 0x10	; 16
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	83 e2       	ldi	r24, 0x23	; 35
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
		// read block with CMD17
		typederror = read_sector(mem_block_num, 512, mem_block);
     3a6:	9e 01       	movw	r18, r28
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	52 e0       	ldi	r21, 0x02	; 2
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <read_sector>
		//send_command(SPI0, CMD17, mem_block_num);
		//typederror = read_block(SPI0, 512, mem_block);
		if(typederror != 0)
     3b8:	81 11       	cpse	r24, r1
     3ba:	07 c0       	rjmp	.+14     	; 0x3ca <main+0x128>
		{
			display_error(UART1, typederror);
			break;
		}
		//print block
		print_memory(mem_block, 512);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	72 e0       	ldi	r23, 0x02	; 2
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	0e 94 85 02 	call	0x50a	; 0x50a <print_memory>
		
	}
     3c8:	d4 cf       	rjmp	.-88     	; 0x372 <main+0xd0>
		typederror = read_sector(mem_block_num, 512, mem_block);
		//send_command(SPI0, CMD17, mem_block_num);
		//typederror = read_block(SPI0, 512, mem_block);
		if(typederror != 0)
		{
			display_error(UART1, typederror);
     3ca:	68 2f       	mov	r22, r24
     3cc:	88 ec       	ldi	r24, 0xC8	; 200
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 48 06 	call	0xc90	; 0xc90 <display_error>
		//print block
		print_memory(mem_block, 512);
		
	}
	
	UART_transmit_string(UART1, stop, 5);
     3d4:	45 e0       	ldi	r20, 0x05	; 5
     3d6:	be 01       	movw	r22, r28
     3d8:	68 5f       	subi	r22, 0xF8	; 248
     3da:	7d 4f       	sbci	r23, 0xFD	; 253
     3dc:	88 ec       	ldi	r24, 0xC8	; 200
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
	UART_transmit(UART1, '\n');
     3e4:	6a e0       	ldi	r22, 0x0A	; 10
     3e6:	88 ec       	ldi	r24, 0xC8	; 200
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
	return 0;
}
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	c3 5f       	subi	r28, 0xF3	; 243
     3f4:	dd 4f       	sbci	r29, 0xFD	; 253
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	08 95       	ret

00000410 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t * array_in, uint16_t offset)
{
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	8c 01       	movw	r16, r24
     420:	6b 01       	movw	r12, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     422:	0e 94 d5 06 	call	0xdaa	; 0xdaa <export_print_buffer>
     426:	f8 2e       	mov	r15, r24
     428:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
     42a:	0c 0d       	add	r16, r12
     42c:	1d 1d       	adc	r17, r13
   sprintf(prnt_bffr, "%p ",input);
     42e:	1f 93       	push	r17
     430:	0f 93       	push	r16
     432:	84 e4       	ldi	r24, 0x44	; 68
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	df 93       	push	r29
     43c:	ff 92       	push	r15
     43e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	6f 2d       	mov	r22, r15
     446:	7d 2f       	mov	r23, r29
     448:	88 ec       	ldi	r24, 0xC8	; 200
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
     450:	df 92       	push	r13
     452:	cf 92       	push	r12
     454:	88 e4       	ldi	r24, 0x48	; 72
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	df 93       	push	r29
     45e:	ff 92       	push	r15
     460:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	6f 2d       	mov	r22, r15
     468:	7d 2f       	mov	r23, r29
     46a:	88 ec       	ldi	r24, 0xC8	; 200
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
   for (index=0;index<16;index++)
     472:	8d b7       	in	r24, 0x3d	; 61
     474:	9e b7       	in	r25, 0x3e	; 62
     476:	0c 96       	adiw	r24, 0x0c	; 12
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	9e bf       	out	0x3e, r25	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	8d bf       	out	0x3d, r24	; 61
     482:	c0 e0       	ldi	r28, 0x00	; 0
     484:	1c c0       	rjmp	.+56     	; 0x4be <print_16bytes+0xae>
   {
      dat=*(input+index);
     486:	f8 01       	movw	r30, r16
     488:	ec 0f       	add	r30, r28
     48a:	f1 1d       	adc	r31, r1
     48c:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     48e:	1f 92       	push	r1
     490:	8f 93       	push	r24
     492:	22 e5       	ldi	r18, 0x52	; 82
     494:	31 e0       	ldi	r19, 0x01	; 1
     496:	3f 93       	push	r19
     498:	2f 93       	push	r18
     49a:	df 93       	push	r29
     49c:	ff 92       	push	r15
     49e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sprintf>
	  UART_transmit_string(print_port,prnt_bffr,0);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	6f 2d       	mov	r22, r15
     4a6:	7d 2f       	mov	r23, r29
     4a8:	88 ec       	ldi	r24, 0xC8	; 200
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_transmit_string(print_port,prnt_bffr,0);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_transmit_string(print_port,prnt_bffr,0);
   for (index=0;index<16;index++)
     4b0:	cf 5f       	subi	r28, 0xFF	; 255
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	c0 31       	cpi	r28, 0x10	; 16
     4c0:	10 f3       	brcs	.-60     	; 0x486 <print_16bytes+0x76>
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	0e c0       	rjmp	.+28     	; 0x4e2 <print_16bytes+0xd2>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
     4c6:	f8 01       	movw	r30, r16
     4c8:	ec 0f       	add	r30, r28
     4ca:	f1 1d       	adc	r31, r1
     4cc:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
     4ce:	80 ee       	ldi	r24, 0xE0	; 224
     4d0:	86 0f       	add	r24, r22
     4d2:	80 36       	cpi	r24, 0x60	; 96
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <print_16bytes+0xc8>
     4d6:	6e e2       	ldi	r22, 0x2E	; 46
      UART_transmit(print_port,dat);
     4d8:	88 ec       	ldi	r24, 0xC8	; 200
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
     4e0:	cf 5f       	subi	r28, 0xFF	; 255
     4e2:	c0 31       	cpi	r28, 0x10	; 16
     4e4:	80 f3       	brcs	.-32     	; 0x4c6 <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_transmit(print_port,dat);
   }
   UART_transmit(print_port,CR);
     4e6:	6d e0       	ldi	r22, 0x0D	; 13
     4e8:	88 ec       	ldi	r24, 0xC8	; 200
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
   UART_transmit(print_port,LF);
     4f0:	6a e0       	ldi	r22, 0x0A	; 10
     4f2:	88 ec       	ldi	r24, 0xC8	; 200
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	08 95       	ret

0000050a <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t * array_in, uint16_t number_of_bytes)
{
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	7c 01       	movw	r14, r24
     518:	8b 01       	movw	r16, r22
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     51a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <export_print_buffer>
     51e:	ec 01       	movw	r28, r24
   
   input = 0;
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	bc 01       	movw	r22, r24
     524:	84 ee       	ldi	r24, 0xE4	; 228
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <copy_string_to_buffer>
   UART_transmit_string(print_port,prnt_bffr,0);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	be 01       	movw	r22, r28
     530:	88 ec       	ldi	r24, 0xC8	; 200
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
   
   input = 0;
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	d0 e0       	ldi	r29, 0x00	; 0
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
   UART_transmit_string(print_port,prnt_bffr,0);
   do
   {
      print_16bytes(array_in,input);
     53c:	be 01       	movw	r22, r28
     53e:	c7 01       	movw	r24, r14
     540:	0e 94 08 02 	call	0x410	; 0x410 <print_16bytes>
      input+=16;
     544:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
     546:	c0 17       	cp	r28, r16
     548:	d1 07       	cpc	r29, r17
     54a:	c0 f3       	brcs	.-16     	; 0x53c <print_memory+0x32>
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	08 95       	ret

0000055a <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
     55a:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_Output_Clear>
     55e:	08 95       	ret

00000560 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
     560:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_Output_Set>
     564:	08 95       	ret

00000566 <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
     566:	8f 92       	push	r8
     568:	9f 92       	push	r9
     56a:	af 92       	push	r10
     56c:	bf 92       	push	r11
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
     580:	60 34       	cpi	r22, 0x40	; 64
     582:	e0 f5       	brcc	.+120    	; 0x5fc <send_command+0x96>
     584:	49 01       	movw	r8, r18
     586:	5a 01       	movw	r10, r20
     588:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
     58a:	16 2f       	mov	r17, r22
     58c:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	61 2f       	mov	r22, r17
     596:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
     59a:	81 11       	cpse	r24, r1
     59c:	30 c0       	rjmp	.+96     	; 0x5fe <send_command+0x98>
     59e:	04 e0       	ldi	r16, 0x04	; 4
     5a0:	1c c0       	rjmp	.+56     	; 0x5da <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
     5a2:	40 2f       	mov	r20, r16
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	41 50       	subi	r20, 0x01	; 1
     5a8:	51 09       	sbc	r21, r1
     5aa:	44 0f       	add	r20, r20
     5ac:	55 1f       	adc	r21, r21
     5ae:	44 0f       	add	r20, r20
     5b0:	55 1f       	adc	r21, r21
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	c5 01       	movw	r24, r10
     5b8:	b4 01       	movw	r22, r8
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <send_command+0x5e>
     5bc:	96 95       	lsr	r25
     5be:	87 95       	ror	r24
     5c0:	77 95       	ror	r23
     5c2:	67 95       	ror	r22
     5c4:	4a 95       	dec	r20
     5c6:	d2 f7       	brpl	.-12     	; 0x5bc <send_command+0x56>
     5c8:	ae 01       	movw	r20, r28
     5ca:	4f 5f       	subi	r20, 0xFF	; 255
     5cc:	5f 4f       	sbci	r21, 0xFF	; 255
     5ce:	c7 01       	movw	r24, r14
     5d0:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
     5d4:	81 11       	cpse	r24, r1
     5d6:	13 c0       	rjmp	.+38     	; 0x5fe <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
     5d8:	01 50       	subi	r16, 0x01	; 1
     5da:	01 11       	cpse	r16, r1
     5dc:	e2 cf       	rjmp	.-60     	; 0x5a2 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
     5de:	10 34       	cpi	r17, 0x40	; 64
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
     5e6:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
     5e8:	18 34       	cpi	r17, 0x48	; 72
     5ea:	09 f4       	brne	.+2      	; 0x5ee <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
     5ec:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
     5ee:	ae 01       	movw	r20, r28
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	c7 01       	movw	r24, r14
     5f6:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
     5fc:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	08 95       	ret

00000616 <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	7c 01       	movw	r14, r24
     62e:	06 2f       	mov	r16, r22
     630:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     632:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     634:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     636:	ae 01       	movw	r20, r28
     638:	4f 5f       	subi	r20, 0xFF	; 255
     63a:	5f 4f       	sbci	r21, 0xFF	; 255
     63c:	6f ef       	ldi	r22, 0xFF	; 255
     63e:	c7 01       	movw	r24, r14
     640:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
		timeout++;
     644:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	8f 3f       	cpi	r24, 0xFF	; 255
     64a:	11 f4       	brne	.+4      	; 0x650 <receive_response+0x3a>
     64c:	11 11       	cpse	r17, r1
     64e:	f3 cf       	rjmp	.-26     	; 0x636 <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
     650:	11 23       	and	r17, r17
     652:	29 f1       	breq	.+74     	; 0x69e <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
     654:	98 2f       	mov	r25, r24
     656:	9e 7f       	andi	r25, 0xFE	; 254
     658:	21 f0       	breq	.+8      	; 0x662 <receive_response+0x4c>
	{
		*array = data; //return value to see error
     65a:	f6 01       	movw	r30, r12
     65c:	80 83       	st	Z, r24
		return ERROR_SD;
     65e:	8d ef       	ldi	r24, 0xFD	; 253
     660:	1f c0       	rjmp	.+62     	; 0x6a0 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
     662:	f6 01       	movw	r30, r12
     664:	80 83       	st	Z, r24
		if(number_of_bytes>1)
     666:	02 30       	cpi	r16, 0x02	; 2
     668:	78 f4       	brcc	.+30     	; 0x688 <receive_response+0x72>
     66a:	11 c0       	rjmp	.+34     	; 0x68e <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     66c:	ae 01       	movw	r20, r28
     66e:	4f 5f       	subi	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	6f ef       	ldi	r22, 0xFF	; 255
     674:	c7 01       	movw	r24, r14
     676:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
				array[i] = data;
     67a:	f6 01       	movw	r30, r12
     67c:	e1 0f       	add	r30, r17
     67e:	f1 1d       	adc	r31, r1
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
     684:	1f 5f       	subi	r17, 0xFF	; 255
     686:	01 c0       	rjmp	.+2      	; 0x68a <receive_response+0x74>
     688:	11 e0       	ldi	r17, 0x01	; 1
     68a:	01 17       	cp	r16, r17
     68c:	78 f7       	brcc	.-34     	; 0x66c <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     68e:	ae 01       	movw	r20, r28
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	6f ef       	ldi	r22, 0xFF	; 255
     696:	c7 01       	movw	r24, r14
     698:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
	// 4. return error value
	return errorStatus;
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	08 95       	ret

000006b4 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
     6b4:	8f 92       	push	r8
     6b6:	9f 92       	push	r9
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	29 97       	sbiw	r28, 0x09	; 9
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
     6da:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[8] = {0,0,0,0,0,0,0,0};
     6dc:	fe 01       	movw	r30, r28
     6de:	32 96       	adiw	r30, 0x02	; 2
     6e0:	88 e0       	ldi	r24, 0x08	; 8
     6e2:	df 01       	movw	r26, r30
     6e4:	1d 92       	st	X+, r1
     6e6:	8a 95       	dec	r24
     6e8:	e9 f7       	brne	.-6      	; 0x6e4 <SD_init+0x30>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint32_t CMD16_arg = 0x00000200;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
     6ea:	60 e1       	ldi	r22, 0x10	; 16
     6ec:	83 e2       	ldi	r24, 0x23	; 35
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	08 c0       	rjmp	.+16     	; 0x708 <SD_init+0x54>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	6f ef       	ldi	r22, 0xFF	; 255
     700:	c7 01       	movw	r24, r14
     702:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     706:	1f 5f       	subi	r17, 0xFF	; 255
     708:	18 30       	cpi	r17, 0x08	; 8
     70a:	b0 f3       	brcs	.-20     	; 0x6f8 <SD_init+0x44>
     *
     *  CMD0
     *
     *************/
	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
     70c:	60 e1       	ldi	r22, 0x10	; 16
     70e:	83 e2       	ldi	r24, 0x23	; 35
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>

	 errorStatus = send_command(SPI_addr, CMD0, arg);
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	c7 01       	movw	r24, r14
     720:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
	 if (errorStatus == 0)
     724:	81 11       	cpse	r24, r1
     726:	0c c0       	rjmp	.+24     	; 0x740 <SD_init+0x8c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     728:	ae 01       	movw	r20, r28
     72a:	4e 5f       	subi	r20, 0xFE	; 254
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	c7 01       	movw	r24, r14
     732:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
     736:	60 e1       	ldi	r22, 0x10	; 16
     738:	83 e2       	ldi	r24, 0x23	; 35
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	09 f0       	breq	.+2      	; 0x748 <SD_init+0x94>
     746:	dc c0       	rjmp	.+440    	; 0x900 <__stack+0x1>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
     748:	60 e1       	ldi	r22, 0x10	; 16
     74a:	83 e2       	ldi	r24, 0x23	; 35
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
     752:	2a ea       	ldi	r18, 0xAA	; 170
     754:	31 e0       	ldi	r19, 0x01	; 1
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	68 e0       	ldi	r22, 0x08	; 8
     75c:	c7 01       	movw	r24, r14
     75e:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
     762:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
     764:	81 11       	cpse	r24, r1
     766:	0d c0       	rjmp	.+26     	; 0x782 <SD_init+0xce>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     768:	ae 01       	movw	r20, r28
     76a:	4e 5f       	subi	r20, 0xFE	; 254
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	65 e0       	ldi	r22, 0x05	; 5
     770:	c7 01       	movw	r24, r14
     772:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
     776:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
     778:	60 e1       	ldi	r22, 0x10	; 16
     77a:	83 e2       	ldi	r24, 0x23	; 35
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	59 f4       	brne	.+22     	; 0x79e <SD_init+0xea>
     788:	11 11       	cpse	r17, r1
     78a:	09 c0       	rjmp	.+18     	; 0x79e <SD_init+0xea>
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
     78c:	8d 81       	ldd	r24, Y+5	; 0x05
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	09 f0       	breq	.+2      	; 0x794 <SD_init+0xe0>
     792:	b8 c0       	rjmp	.+368    	; 0x904 <__stack+0x5>
     794:	8e 81       	ldd	r24, Y+6	; 0x06
     796:	8a 3a       	cpi	r24, 0xAA	; 170
     798:	49 f0       	breq	.+18     	; 0x7ac <SD_init+0xf8>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     79a:	8c ef       	ldi	r24, 0xFC	; 252
     79c:	d4 c0       	rjmp	.+424    	; 0x946 <__stack+0x47>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
     79e:	85 30       	cpi	r24, 0x05	; 5
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <SD_init+0xf0>
     7a2:	b2 c0       	rjmp	.+356    	; 0x908 <__stack+0x9>
	 {
		ACMD41_arg = 0x00000000; //v1.x
     7a4:	81 2c       	mov	r8, r1
     7a6:	91 2c       	mov	r9, r1
     7a8:	54 01       	movw	r10, r8
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <SD_init+0x102>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
     7ac:	81 2c       	mov	r8, r1
     7ae:	91 2c       	mov	r9, r1
     7b0:	54 01       	movw	r10, r8
     7b2:	68 94       	set
     7b4:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     7b6:	60 e1       	ldi	r22, 0x10	; 16
     7b8:	83 e2       	ldi	r24, 0x23	; 35
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	a9 01       	movw	r20, r18
     7c6:	6a e3       	ldi	r22, 0x3A	; 58
     7c8:	c7 01       	movw	r24, r14
     7ca:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
	
	//check error
	if (errorStatus != 0x00)
     7ce:	81 11       	cpse	r24, r1
     7d0:	9d c0       	rjmp	.+314    	; 0x90c <__stack+0xd>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 plus 32bit OCR. bit 30 of OCR should be a 1 for high-capacity. SPI clock freq can be increased if that passes.
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     7d2:	ae 01       	movw	r20, r28
     7d4:	4e 5f       	subi	r20, 0xFE	; 254
     7d6:	5f 4f       	sbci	r21, 0xFF	; 255
     7d8:	65 e0       	ldi	r22, 0x05	; 5
     7da:	c7 01       	movw	r24, r14
     7dc:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
     7e0:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     7e2:	60 e1       	ldi	r22, 0x10	; 16
     7e4:	83 e2       	ldi	r24, 0x23	; 35
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     7ec:	11 11       	cpse	r17, r1
     7ee:	90 c0       	rjmp	.+288    	; 0x910 <__stack+0x11>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <SD_init+0x144>
     7f6:	8e c0       	rjmp	.+284    	; 0x914 <__stack+0x15>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
     7f8:	8c 81       	ldd	r24, Y+4	; 0x04
     7fa:	8c 7f       	andi	r24, 0xFC	; 252
     7fc:	8c 3f       	cpi	r24, 0xFC	; 252
     7fe:	09 f0       	breq	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	8b c0       	rjmp	.+278    	; 0x918 <__stack+0x19>
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	33 c0       	rjmp	.+102    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
     808:	60 e1       	ldi	r22, 0x10	; 16
     80a:	83 e2       	ldi	r24, 0x23	; 35
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	a9 01       	movw	r20, r18
     818:	67 e3       	ldi	r22, 0x37	; 55
     81a:	c7 01       	movw	r24, r14
     81c:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
		if(errorStatus != 0x00)
     820:	81 11       	cpse	r24, r1
     822:	7c c0       	rjmp	.+248    	; 0x91c <__stack+0x1d>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     824:	ae 01       	movw	r20, r28
     826:	4e 5f       	subi	r20, 0xFE	; 254
     828:	5f 4f       	sbci	r21, 0xFF	; 255
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	c7 01       	movw	r24, r14
     82e:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
		
		if(receive_array[0] != 0x01)
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	09 f0       	breq	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     838:	73 c0       	rjmp	.+230    	; 0x920 <__stack+0x21>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
     83a:	a5 01       	movw	r20, r10
     83c:	94 01       	movw	r18, r8
     83e:	69 e2       	ldi	r22, 0x29	; 41
     840:	c7 01       	movw	r24, r14
     842:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
		if(errorStatus != 0x00)
     846:	81 11       	cpse	r24, r1
     848:	6d c0       	rjmp	.+218    	; 0x924 <__stack+0x25>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
     84a:	ae 01       	movw	r20, r28
     84c:	4e 5f       	subi	r20, 0xFE	; 254
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	c7 01       	movw	r24, r14
     854:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
		if(errorStatus != 0x00)
     858:	81 11       	cpse	r24, r1
     85a:	66 c0       	rjmp	.+204    	; 0x928 <__stack+0x29>
		{
			return ERROR_CMD41;
		}
		timeout++;
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (timeout == 0)
     860:	09 f4       	brne	.+2      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     862:	64 c0       	rjmp	.+200    	; 0x92c <__stack+0x2d>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
     864:	60 e1       	ldi	r22, 0x10	; 16
     866:	83 e2       	ldi	r24, 0x23	; 35
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	*
	* 	ACMD41  -- try a new sampling rate, not 10
	*
	**************************/
	
	while(receive_array[0] != 0x00)
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	81 11       	cpse	r24, r1
     872:	ca cf       	rjmp	.-108    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     874:	60 e1       	ldi	r22, 0x10	; 16
     876:	83 e2       	ldi	r24, 0x23	; 35
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	a9 01       	movw	r20, r18
     884:	6a e3       	ldi	r22, 0x3A	; 58
     886:	c7 01       	movw	r24, r14
     888:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
	
	//check error
	if (errorStatus != 0x00)
     88c:	81 11       	cpse	r24, r1
     88e:	50 c0       	rjmp	.+160    	; 0x930 <__stack+0x31>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 + 32bit OCR
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     890:	ae 01       	movw	r20, r28
     892:	4e 5f       	subi	r20, 0xFE	; 254
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	65 e0       	ldi	r22, 0x05	; 5
     898:	c7 01       	movw	r24, r14
     89a:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
     89e:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	83 e2       	ldi	r24, 0x23	; 35
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     8aa:	11 11       	cpse	r17, r1
     8ac:	43 c0       	rjmp	.+134    	; 0x934 <__stack+0x35>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	88 23       	and	r24, r24
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     8b4:	41 c0       	rjmp	.+130    	; 0x938 <__stack+0x39>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
     8b6:	80 7c       	andi	r24, 0xC0	; 192
     8b8:	80 3c       	cpi	r24, 0xC0	; 192
     8ba:	09 f0       	breq	.+2      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8bc:	3f c0       	rjmp	.+126    	; 0x93c <__stack+0x3d>
	*
	* 	CMD16 
	*
	**************************/
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
     8be:	60 e1       	ldi	r22, 0x10	; 16
     8c0:	83 e2       	ldi	r24, 0x23	; 35
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	32 e0       	ldi	r19, 0x02	; 2
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 e1       	ldi	r22, 0x10	; 16
     8d2:	c7 01       	movw	r24, r14
     8d4:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
	if (errorStatus != 0)
     8d8:	81 11       	cpse	r24, r1
     8da:	32 c0       	rjmp	.+100    	; 0x940 <__stack+0x41>
	{
		return ERROR_CMD16;
	}
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     8dc:	ae 01       	movw	r20, r28
     8de:	4e 5f       	subi	r20, 0xFE	; 254
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	c7 01       	movw	r24, r14
     8e6:	0e 94 0b 03 	call	0x616	; 0x616 <receive_response>
     8ea:	18 2f       	mov	r17, r24
	
	if(receive_array[0] != 0x00)
     8ec:	8a 81       	ldd	r24, Y+2	; 0x02
     8ee:	81 11       	cpse	r24, r1
     8f0:	29 c0       	rjmp	.+82     	; 0x944 <__stack+0x45>
	{
		return ERROR_CMD16;
	}
	SD_CS_inactive(PB, (1<<4));
     8f2:	60 e1       	ldi	r22, 0x10	; 16
     8f4:	83 e2       	ldi	r24, 0x23	; 35
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	return errorStatus;
     8fc:	81 2f       	mov	r24, r17
     8fe:	23 c0       	rjmp	.+70     	; 0x946 <__stack+0x47>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
     900:	8b ef       	ldi	r24, 0xFB	; 251
     902:	21 c0       	rjmp	.+66     	; 0x946 <__stack+0x47>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     904:	8c ef       	ldi	r24, 0xFC	; 252
     906:	1f c0       	rjmp	.+62     	; 0x946 <__stack+0x47>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
     908:	8a ef       	ldi	r24, 0xFA	; 250
     90a:	1d c0       	rjmp	.+58     	; 0x946 <__stack+0x47>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     90c:	89 ef       	ldi	r24, 0xF9	; 249
     90e:	1b c0       	rjmp	.+54     	; 0x946 <__stack+0x47>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     910:	89 ef       	ldi	r24, 0xF9	; 249
     912:	19 c0       	rjmp	.+50     	; 0x946 <__stack+0x47>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
     914:	89 ef       	ldi	r24, 0xF9	; 249
     916:	17 c0       	rjmp	.+46     	; 0x946 <__stack+0x47>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
     918:	89 ef       	ldi	r24, 0xF9	; 249
     91a:	15 c0       	rjmp	.+42     	; 0x946 <__stack+0x47>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
     91c:	88 ef       	ldi	r24, 0xF8	; 248
     91e:	13 c0       	rjmp	.+38     	; 0x946 <__stack+0x47>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
     920:	88 ef       	ldi	r24, 0xF8	; 248
     922:	11 c0       	rjmp	.+34     	; 0x946 <__stack+0x47>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     924:	87 ef       	ldi	r24, 0xF7	; 247
     926:	0f c0       	rjmp	.+30     	; 0x946 <__stack+0x47>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     928:	87 ef       	ldi	r24, 0xF7	; 247
     92a:	0d c0       	rjmp	.+26     	; 0x946 <__stack+0x47>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
     92c:	86 ef       	ldi	r24, 0xF6	; 246
     92e:	0b c0       	rjmp	.+22     	; 0x946 <__stack+0x47>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     930:	89 ef       	ldi	r24, 0xF9	; 249
     932:	09 c0       	rjmp	.+18     	; 0x946 <__stack+0x47>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     934:	89 ef       	ldi	r24, 0xF9	; 249
     936:	07 c0       	rjmp	.+14     	; 0x946 <__stack+0x47>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
     938:	89 ef       	ldi	r24, 0xF9	; 249
     93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0x47>
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
	{
		return ERROR_CMD58;
     93c:	89 ef       	ldi	r24, 0xF9	; 249
     93e:	03 c0       	rjmp	.+6      	; 0x946 <__stack+0x47>
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
	if (errorStatus != 0)
	{
		return ERROR_CMD16;
     940:	85 ef       	ldi	r24, 0xF5	; 245
     942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0x47>
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
	
	if(receive_array[0] != 0x00)
	{
		return ERROR_CMD16;
     944:	85 ef       	ldi	r24, 0xF5	; 245
	}
	SD_CS_inactive(PB, (1<<4));
	return errorStatus;
 }
     946:	29 96       	adiw	r28, 0x09	; 9
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	8f 90       	pop	r8
     966:	08 95       	ret

00000968 <read_block>:
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
     968:	8f 92       	push	r8
     96a:	9f 92       	push	r9
     96c:	af 92       	push	r10
     96e:	bf 92       	push	r11
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	1f 92       	push	r1
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	7c 01       	movw	r14, r24
     988:	5b 01       	movw	r10, r22
     98a:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     98c:	19 82       	std	Y+1, r1	; 0x01
 }
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     98e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data=0;
	// step a
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     990:	ae 01       	movw	r20, r28
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	6f ef       	ldi	r22, 0xFF	; 255
     998:	c7 01       	movw	r24, r14
     99a:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
		timeout++;
     99e:	1f 5f       	subi	r17, 0xFF	; 255
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));
     9a0:	99 81       	ldd	r25, Y+1	; 0x01
     9a2:	99 23       	and	r25, r25
     9a4:	24 f4       	brge	.+8      	; 0x9ae <read_block+0x46>
     9a6:	81 11       	cpse	r24, r1
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <read_block+0x46>
     9aa:	11 11       	cpse	r17, r1
     9ac:	f1 cf       	rjmp	.-30     	; 0x990 <read_block+0x28>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
     9ae:	81 11       	cpse	r24, r1
     9b0:	43 c0       	rjmp	.+134    	; 0xa38 <read_block+0xd0>
	{
		return ERROR_CMD0;
	}
	if(data != 0)
     9b2:	91 11       	cpse	r25, r1
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <read_block+0xd4>
			return ERROR_CMD8;
	}

	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     9b6:	ae 01       	movw	r20, r28
     9b8:	4f 5f       	subi	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	6f ef       	ldi	r22, 0xFF	; 255
     9be:	c7 01       	movw	r24, r14
     9c0:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
     9c4:	08 2f       	mov	r16, r24
		timeout++;
     9c6:	1f 5f       	subi	r17, 0xFF	; 255
	} while((data == 0xFF) && (errorStatus == 0) && (timeout != 0));
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	8f 3f       	cpi	r24, 0xFF	; 255
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <read_block+0x6e>
     9ce:	01 11       	cpse	r16, r1
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <read_block+0x6e>
     9d2:	11 11       	cpse	r17, r1
     9d4:	f0 cf       	rjmp	.-32     	; 0x9b6 <read_block+0x4e>
	//while ( (data == 0xFF) && (timeout != 0) );


	// check for 0xFE (success) or 0b0000XXXX (error)
	if (data == 0xFE)
     9d6:	8e 3f       	cpi	r24, 0xFE	; 254
     9d8:	99 f5       	brne	.+102    	; 0xa40 <read_block+0xd8>
	{
		// take first byte of data
		SPI_receive(SPI_addr, &data);
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	c7 01       	movw	r24, r14
     9e2:	0e 94 09 06 	call	0xc12	; 0xc12 <SPI_receive>
		array[0] = data;
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	f6 01       	movw	r30, r12
     9ea:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     9ec:	88 24       	eor	r8, r8
     9ee:	83 94       	inc	r8
     9f0:	91 2c       	mov	r9, r1
     9f2:	10 c0       	rjmp	.+32     	; 0xa14 <read_block+0xac>
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     9f4:	ae 01       	movw	r20, r28
     9f6:	4f 5f       	subi	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	6f ef       	ldi	r22, 0xFF	; 255
     9fc:	c7 01       	movw	r24, r14
     9fe:	0e 94 29 06 	call	0xc52	; 0xc52 <SPI_transfer>
     a02:	08 2f       	mov	r16, r24
		array[i] = data;
     a04:	f6 01       	movw	r30, r12
     a06:	e8 0d       	add	r30, r8
     a08:	f9 1d       	adc	r31, r9
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     a0e:	ff ef       	ldi	r31, 0xFF	; 255
     a10:	8f 1a       	sub	r8, r31
     a12:	9f 0a       	sbc	r9, r31
     a14:	8a 14       	cp	r8, r10
     a16:	9b 04       	cpc	r9, r11
     a18:	68 f3       	brcs	.-38     	; 0x9f4 <read_block+0x8c>
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <read_block+0xc8>

	// step d

	for(uint8_t i = 0; i < 3; i++)
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     a1e:	ae 01       	movw	r20, r28
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	6f ef       	ldi	r22, 0xFF	; 255
     a26:	c7 01       	movw	r24, r14
     a28:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <SPI_transmit>
     a2c:	08 2f       	mov	r16, r24
		array[i] = data;
	}

	// step d

	for(uint8_t i = 0; i < 3; i++)
     a2e:	1f 5f       	subi	r17, 0xFF	; 255
     a30:	13 30       	cpi	r17, 0x03	; 3
     a32:	a8 f3       	brcs	.-22     	; 0xa1e <read_block+0xb6>
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     a34:	80 2f       	mov	r24, r16
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <read_block+0xda>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
	{
		return ERROR_CMD0;
     a38:	8b ef       	ldi	r24, 0xFB	; 251
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <read_block+0xda>
	}
	if(data != 0)
	{
			return ERROR_CMD8;
     a3c:	8a ef       	ldi	r24, 0xFA	; 250
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <read_block+0xda>
		array[0] = data;
	}
	else
	{
		//error
		return ERROR_TIMEOUT;
     a40:	8f ef       	ldi	r24, 0xFF	; 255
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	08 95       	ret

00000a5e <read_sector>:
 */ 

#include "SD.h"

uint8_t read_sector( uint32_t sector_number, uint16_t sector_size, uint8_t* data_array)
{
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
     a72:	ea 01       	movw	r28, r20
     a74:	89 01       	movw	r16, r18
	// Initialize SPI before using this function!
	
	// set CS active (low)
	SD_CS_active(PB, (1<<4));
     a76:	60 e1       	ldi	r22, 0x10	; 16
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	83 e2       	ldi	r24, 0x23	; 35
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 ad 02 	call	0x55a	; 0x55a <SD_CS_active>
	
	// send CMD 17 and sector number
	send_command(SPI0, CMD17, sector_number);
     a82:	a7 01       	movw	r20, r14
     a84:	96 01       	movw	r18, r12
     a86:	61 e1       	ldi	r22, 0x11	; 17
     a88:	8c e4       	ldi	r24, 0x4C	; 76
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 b3 02 	call	0x566	; 0x566 <send_command>
	
	// write data into array
	if(read_block(SPI0, sector_size, data_array) != 0)
     a90:	a8 01       	movw	r20, r16
     a92:	be 01       	movw	r22, r28
     a94:	8c e4       	ldi	r24, 0x4C	; 76
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 b4 04 	call	0x968	; 0x968 <read_block>
     a9c:	c8 2f       	mov	r28, r24
     a9e:	81 11       	cpse	r24, r1
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <read_sector+0x52>
	{
		return 1; //error
	}
	
	// set CS inactive (high)
	SD_CS_inactive(PB, (1<<4));
     aa2:	60 e1       	ldi	r22, 0x10	; 16
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	83 e2       	ldi	r24, 0x23	; 35
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 b0 02 	call	0x560	; 0x560 <SD_CS_inactive>
	
	return 0; //success
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <read_sector+0x54>
	send_command(SPI0, CMD17, sector_number);
	
	// write data into array
	if(read_block(SPI0, sector_size, data_array) != 0)
	{
		return 1; //error
     ab0:	c1 e0       	ldi	r28, 0x01	; 1
	
	// set CS inactive (high)
	SD_CS_inactive(PB, (1<<4));
	
	return 0; //success
}
     ab2:	8c 2f       	mov	r24, r28
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <round_up_pwr2>:
#include "gpio_output.h"
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	a8 f0       	brcs	.+42     	; 0xaf4 <round_up_pwr2+0x2e>
        return 1;
    }
    if (n > 128) {
     aca:	81 38       	cpi	r24, 0x81	; 129
     acc:	a8 f4       	brcc	.+42     	; 0xaf8 <round_up_pwr2+0x32>
        return 128;
    }
    n--; // the -- ensures that you don't round up when it's already a power of 2.
     ace:	81 50       	subi	r24, 0x01	; 1
    n |= n >> 1; // ORs with 1 shift right
     ad0:	98 2f       	mov	r25, r24
     ad2:	96 95       	lsr	r25
     ad4:	89 2b       	or	r24, r25
    n |= n >> 2; // ORs with 2-bit shift right
     ad6:	98 2f       	mov	r25, r24
     ad8:	96 95       	lsr	r25
     ada:	96 95       	lsr	r25
     adc:	89 2b       	or	r24, r25
    n |= n >> 4; // ORs with 4-bit shift right
     ade:	98 2f       	mov	r25, r24
     ae0:	92 95       	swap	r25
     ae2:	9f 70       	andi	r25, 0x0F	; 15
     ae4:	89 2b       	or	r24, r25
    n |= n >> 7; // ORs with 7-bit shit right
     ae6:	98 2f       	mov	r25, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	99 27       	eor	r25, r25
     aec:	99 1f       	adc	r25, r25
     aee:	89 2b       	or	r24, r25
    return n + 1; // inc to power of 2 
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	08 95       	ret
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
        return 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret
    }
    if (n > 128) {
        return 128;
     af8:	80 e8       	ldi	r24, 0x80	; 128
    n |= n >> 1; // ORs with 1 shift right
    n |= n >> 2; // ORs with 2-bit shift right
    n |= n >> 4; // ORs with 4-bit shift right
    n |= n >> 7; // ORs with 7-bit shit right
    return n + 1; // inc to power of 2 
}
     afa:	08 95       	ret

00000afc <get_spi_prescaler_mask>:

uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
     afc:	0e 94 63 05 	call	0xac6	; 0xac6 <round_up_pwr2>
    
    switch (rounded_value) {
     b00:	80 31       	cpi	r24, 0x10	; 16
     b02:	c1 f0       	breq	.+48     	; 0xb34 <get_spi_prescaler_mask+0x38>
     b04:	28 f4       	brcc	.+10     	; 0xb10 <get_spi_prescaler_mask+0x14>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	79 f0       	breq	.+30     	; 0xb28 <get_spi_prescaler_mask+0x2c>
     b0a:	88 30       	cpi	r24, 0x08	; 8
     b0c:	79 f0       	breq	.+30     	; 0xb2c <get_spi_prescaler_mask+0x30>
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <get_spi_prescaler_mask+0x20>
     b10:	80 34       	cpi	r24, 0x40	; 64
     b12:	31 f0       	breq	.+12     	; 0xb20 <get_spi_prescaler_mask+0x24>
     b14:	80 38       	cpi	r24, 0x80	; 128
     b16:	31 f0       	breq	.+12     	; 0xb24 <get_spi_prescaler_mask+0x28>
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	51 f0       	breq	.+20     	; 0xb30 <get_spi_prescaler_mask+0x34>
        case 4:   return 0b000;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	08 95       	ret
        case 16:  return 0b001;
        case 64:  return 0b010;
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	08 95       	ret
        case 128: return 0b011;
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	08 95       	ret
        case 2:   return 0b100;
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	08 95       	ret
        case 8:   return 0b101;
     b2c:	85 e0       	ldi	r24, 0x05	; 5
     b2e:	08 95       	ret
        case 32:  return 0b110;
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	08 95       	ret
uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    
    switch (rounded_value) {
        case 4:   return 0b000;
        case 16:  return 0b001;
     b34:	81 e0       	ldi	r24, 0x01	; 1
        case 2:   return 0b100;
        case 8:   return 0b101;
        case 32:  return 0b110;
        default:  return 0b000; // Default case
    }
}
     b36:	08 95       	ret

00000b38 <SPI_master_init>:

void SPI_master_init(volatile SPI_t * SPI_addr, uint32_t clock_rate)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
     b3e:	9a 01       	movw	r18, r20
     b40:	ab 01       	movw	r20, r22
    // CPOL CPHA - Clear CPOL and CPHA (0)
	// These are preference-based but must be unanimous with other code
    SPI_addr->control_reg &= (~(3<<2));
     b42:	88 81       	ld	r24, Y
     b44:	83 7f       	andi	r24, 0xF3	; 243
     b46:	88 83       	st	Y, r24
    // SPE - Enable SPI (1)
    SPI_addr->control_reg |= (1<<6);
     b48:	88 81       	ld	r24, Y
     b4a:	80 64       	ori	r24, 0x40	; 64
     b4c:	88 83       	st	Y, r24
    // MSTR - Set to master mode (1)
    SPI_addr->control_reg |= (1<<4);
     b4e:	88 81       	ld	r24, Y
     b50:	80 61       	ori	r24, 0x10	; 16
     b52:	88 83       	st	Y, r24
    // DORD - Clear to make MSB first (0)
    SPI_addr->control_reg &= (~(1<<5));
     b54:	88 81       	ld	r24, Y
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	88 83       	st	Y, r24
    
    // Set clock rate based on the given `clock_rate`. You can use a series of if-else conditions to check which prescaler value to use.
    uint8_t divider = (F_CPU / OSC_DIV ) / (clock_rate);
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	74 e2       	ldi	r23, 0x24	; 36
     b5e:	84 ef       	ldi	r24, 0xF4	; 244
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 2b 07 	call	0xe56	; 0xe56 <__udivmodsi4>
     b66:	82 2f       	mov	r24, r18
    uint8_t mask = get_spi_prescaler_mask(divider);
     b68:	0e 94 7e 05 	call	0xafc	; 0xafc <get_spi_prescaler_mask>
    SPI_addr->control_reg |= (mask%4); // takes bottom 2 bits or mask & 0x3
     b6c:	98 81       	ld	r25, Y
     b6e:	28 2f       	mov	r18, r24
     b70:	23 70       	andi	r18, 0x03	; 3
     b72:	92 2b       	or	r25, r18
     b74:	98 83       	st	Y, r25
    SPI_addr->status_reg |= (mask/4); // takes bit 2
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	89 2b       	or	r24, r25
     b7e:	89 83       	std	Y+1, r24	; 0x01

    //add MOSI & SCK pins based on whether it's SPI0 or SPI1
    if(SPI_addr == SPI0)
     b80:	cc 34       	cpi	r28, 0x4C	; 76
     b82:	d1 05       	cpc	r29, r1
     b84:	a9 f4       	brne	.+42     	; 0xbb0 <SPI_master_init+0x78>
    {
		GPIO_Output_Init(PB, (1<<5));
     b86:	60 e2       	ldi	r22, 0x20	; 32
     b88:	83 e2       	ldi	r24, 0x23	; 35
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
		GPIO_Output_Set(PB, (1<<5));
     b90:	60 e2       	ldi	r22, 0x20	; 32
     b92:	83 e2       	ldi	r24, 0x23	; 35
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_Output_Set>
		
		GPIO_Output_Init(PB, (1<<7));
     b9a:	60 e8       	ldi	r22, 0x80	; 128
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
		GPIO_Output_Clear(PB, (1<<7));
     ba4:	60 e8       	ldi	r22, 0x80	; 128
     ba6:	83 e2       	ldi	r24, 0x23	; 35
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_Output_Clear>
     bae:	0f c0       	rjmp	.+30     	; 0xbce <SPI_master_init+0x96>
		
        //PB->DDR_REG |= (1<<5) | (1<<7); //MOSI & SCK Output
        //PB->PORT_REG |= (1<<5);  //MOSI 1
        //PB->PORT_REG &= ~(1<<7); //SCK 0
    }
    else if (SPI_addr == SPI1)
     bb0:	cc 3a       	cpi	r28, 0xAC	; 172
     bb2:	d1 05       	cpc	r29, r1
     bb4:	61 f4       	brne	.+24     	; 0xbce <SPI_master_init+0x96>
    {
        PE->DDR_REG |= (1<<3);          // MOSI output
     bb6:	8d b1       	in	r24, 0x0d	; 13
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	8d b9       	out	0x0d, r24	; 13
        PD->DDR_REG |= (1<<7);          // SCK output
     bbc:	8a b1       	in	r24, 0x0a	; 10
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	8a b9       	out	0x0a, r24	; 10
        PE->PORT_REG |= (1<<3);         // MOSI 1
     bc2:	8e b1       	in	r24, 0x0e	; 14
     bc4:	88 60       	ori	r24, 0x08	; 8
     bc6:	8e b9       	out	0x0e, r24	; 14
        PD->PORT_REG &= ~(1<<7);        // SCK 0
     bc8:	8b b1       	in	r24, 0x0b	; 11
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	8b b9       	out	0x0b, r24	; 11
    }

}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <SPI_transmit>:

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
     bd4:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
     bd6:	62 83       	std	Z+2, r22	; 0x02

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     be2:	99 23       	and	r25, r25
     be4:	1c f0       	brlt	.+6      	; 0xbec <SPI_transmit+0x18>
     be6:	21 15       	cp	r18, r1
     be8:	31 05       	cpc	r19, r1
     bea:	c1 f7       	brne	.-16     	; 0xbdc <SPI_transmit+0x8>

    if(timeout == 0)
     bec:	23 2b       	or	r18, r19
     bee:	21 f4       	brne	.+8      	; 0xbf8 <SPI_transmit+0x24>
    {
        *data = 0xFF;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	fa 01       	movw	r30, r20
     bf4:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     bf6:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     bf8:	89 2f       	mov	r24, r25
     bfa:	80 74       	andi	r24, 0x40	; 64
     bfc:	96 ff       	sbrs	r25, 6
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <SPI_transmit+0x36>
    {
        *data = (SPI_addr->data_reg);
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	fa 01       	movw	r30, r20
     c04:	80 83       	st	Z, r24
        return ERROR_SPI;
     c06:	8e ef       	ldi	r24, 0xFE	; 254
     c08:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     c0a:	92 81       	ldd	r25, Z+2	; 0x02
     c0c:	fa 01       	movw	r30, r20
     c0e:	90 83       	st	Z, r25
        return 0;
    }
}
     c10:	08 95       	ret

00000c12 <SPI_receive>:
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
     c12:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = 0xFF;
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	82 83       	std	Z+2, r24	; 0x02
}
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     c22:	99 23       	and	r25, r25
     c24:	1c f0       	brlt	.+6      	; 0xc2c <SPI_receive+0x1a>
     c26:	21 15       	cp	r18, r1
     c28:	31 05       	cpc	r19, r1
     c2a:	c1 f7       	brne	.-16     	; 0xc1c <SPI_receive+0xa>

    if(timeout == 0)
     c2c:	23 2b       	or	r18, r19
     c2e:	21 f4       	brne	.+8      	; 0xc38 <SPI_receive+0x26>
    {
        *data = 0xFF;
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	fb 01       	movw	r30, r22
     c34:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     c36:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     c38:	89 2f       	mov	r24, r25
     c3a:	80 74       	andi	r24, 0x40	; 64
     c3c:	96 ff       	sbrs	r25, 6
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <SPI_receive+0x38>
    {
        *data = (SPI_addr->data_reg);
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	fb 01       	movw	r30, r22
     c44:	80 83       	st	Z, r24
        return ERROR_SPI;
     c46:	8e ef       	ldi	r24, 0xFE	; 254
     c48:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     c4a:	92 81       	ldd	r25, Z+2	; 0x02
     c4c:	fb 01       	movw	r30, r22
     c4e:	90 83       	st	Z, r25
        return 0;
    }
}
     c50:	08 95       	ret

00000c52 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
     c52:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
     c54:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     c60:	99 23       	and	r25, r25
     c62:	1c f0       	brlt	.+6      	; 0xc6a <SPI_transfer+0x18>
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	c1 f7       	brne	.-16     	; 0xc5a <SPI_transfer+0x8>

    if(timeout == 0)
     c6a:	23 2b       	or	r18, r19
     c6c:	21 f4       	brne	.+8      	; 0xc76 <SPI_transfer+0x24>
    {
        *data = 0xFF;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	fa 01       	movw	r30, r20
     c72:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     c74:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     c76:	89 2f       	mov	r24, r25
     c78:	80 74       	andi	r24, 0x40	; 64
     c7a:	96 ff       	sbrs	r25, 6
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	fa 01       	movw	r30, r20
     c82:	80 83       	st	Z, r24
        return ERROR_SPI;
     c84:	8e ef       	ldi	r24, 0xFE	; 254
     c86:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     c88:	92 81       	ldd	r25, Z+2	; 0x02
     c8a:	fa 01       	movw	r30, r20
     c8c:	90 83       	st	Z, r25
        return 0;
    }
}
     c8e:	08 95       	ret

00000c90 <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
     c90:	86 2f       	mov	r24, r22
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	e4 5f       	subi	r30, 0xF4	; 244
     c98:	f1 09       	sbc	r31, r1
     c9a:	ec 30       	cpi	r30, 0x0C	; 12
     c9c:	f1 05       	cpc	r31, r1
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <display_error+0x12>
     ca0:	64 c0       	rjmp	.+200    	; 0xd6a <display_error+0xda>
     ca2:	ea 59       	subi	r30, 0x9A	; 154
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__tablejump2__>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
     caa:	48 e0       	ldi	r20, 0x08	; 8
     cac:	69 e5       	ldi	r22, 0x59	; 89
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	88 ec       	ldi	r24, 0xC8	; 200
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     cb8:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
     cba:	44 e0       	ldi	r20, 0x04	; 4
     cbc:	62 e6       	ldi	r22, 0x62	; 98
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	88 ec       	ldi	r24, 0xC8	; 200
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     cc8:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
     cca:	43 e0       	ldi	r20, 0x03	; 3
     ccc:	67 e6       	ldi	r22, 0x67	; 103
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	88 ec       	ldi	r24, 0xC8	; 200
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     cd8:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
     cda:	4c e0       	ldi	r20, 0x0C	; 12
     cdc:	6b e6       	ldi	r22, 0x6B	; 107
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	88 ec       	ldi	r24, 0xC8	; 200
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     ce8:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
     cea:	45 e0       	ldi	r20, 0x05	; 5
     cec:	68 e7       	ldi	r22, 0x78	; 120
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	88 ec       	ldi	r24, 0xC8	; 200
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     cf8:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
     cfa:	45 e0       	ldi	r20, 0x05	; 5
     cfc:	6e e7       	ldi	r22, 0x7E	; 126
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d08:	08 95       	ret
        case ERROR_CMD58:
			UART_transmit_string(1, "CMD58\n", 6);
     d0a:	46 e0       	ldi	r20, 0x06	; 6
     d0c:	64 e8       	ldi	r22, 0x84	; 132
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d18:	08 95       	ret
        case ERROR_CMD55:
			UART_transmit_string(UART1, "CMD55\n", 6);
     d1a:	46 e0       	ldi	r20, 0x06	; 6
     d1c:	6b e8       	ldi	r22, 0x8B	; 139
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d28:	08 95       	ret
        case ERROR_CMD41:
			UART_transmit_string(UART1, "CMD41\n", 6);
     d2a:	46 e0       	ldi	r20, 0x06	; 6
     d2c:	62 e9       	ldi	r22, 0x92	; 146
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	88 ec       	ldi	r24, 0xC8	; 200
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d38:	08 95       	ret
        case ERROR_CMD41_TIMEOUT:
			UART_transmit_string(UART1, "CMD41TIME\n", 10);
     d3a:	4a e0       	ldi	r20, 0x0A	; 10
     d3c:	69 e9       	ldi	r22, 0x99	; 153
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	88 ec       	ldi	r24, 0xC8	; 200
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d48:	08 95       	ret
		case ERROR_TOKEN:
			UART_transmit_string(UART1, "TOKEN\n", 6);
     d4a:	46 e0       	ldi	r20, 0x06	; 6
     d4c:	64 ea       	ldi	r22, 0xA4	; 164
     d4e:	71 e0       	ldi	r23, 0x01	; 1
     d50:	88 ec       	ldi	r24, 0xC8	; 200
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d58:	08 95       	ret
		case ERROR_CMD16:
			UART_transmit_string(UART1, "CMD16\n", 6);
     d5a:	46 e0       	ldi	r20, 0x06	; 6
     d5c:	6b ea       	ldi	r22, 0xAB	; 171
     d5e:	71 e0       	ldi	r23, 0x01	; 1
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
			break;
     d68:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
     d6a:	4b e0       	ldi	r20, 0x0B	; 11
     d6c:	62 eb       	ldi	r22, 0xB2	; 178
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UART_transmit_string>
     d78:	08 95       	ret

00000d7a <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
     d7a:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
     d7c:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
     d7e:	87 e6       	ldi	r24, 0x67	; 103
     d80:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
     d82:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
     d84:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
     d8a:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	81 83       	std	Z+1, r24	; 0x01
     d90:	08 95       	ret

00000d92 <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
     d92:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
     d94:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
     d96:	95 ff       	sbrs	r25, 5
     d98:	fd cf       	rjmp	.-6      	; 0xd94 <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
     d9a:	66 83       	std	Z+6, r22	; 0x06
     d9c:	08 95       	ret

00000d9e <UART_receive>:
    return;
}


char UART_receive(volatile UART_t * UART_addr)
{
     d9e:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UART_UCSRA);
     da0:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
     da2:	99 23       	and	r25, r25
     da4:	ec f7       	brge	.-6      	; 0xda0 <UART_receive+0x2>
	return (UART_addr->UART_UDR);  // return the value in the receive buffer
     da6:	86 81       	ldd	r24, Z+6	; 0x06
     da8:	08 95       	ret

00000daa <export_print_buffer>:

char * export_print_buffer(void)
{
	
	return print_buffer;
}
     daa:	8e eb       	ldi	r24, 0xBE	; 190
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	08 95       	ret

00000db0 <copy_string_to_buffer>:

uint8_t copy_string_to_buffer(const char flash_string[], char buffer_p[], uint8_t num_bytes)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
     db6:	41 11       	cpse	r20, r1
     db8:	1a c0       	rjmp	.+52     	; 0xdee <copy_string_to_buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
     dba:	24 2f       	mov	r18, r20
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	fd 01       	movw	r30, r26
     dc0:	e2 0f       	add	r30, r18
     dc2:	f3 1f       	adc	r31, r19
     dc4:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     dc6:	eb 01       	movw	r28, r22
     dc8:	c2 0f       	add	r28, r18
     dca:	d3 1f       	adc	r29, r19
     dcc:	e8 83       	st	Y, r30
			index++;
     dce:	4f 5f       	subi	r20, 0xFF	; 255
		} while (value!=0);
     dd0:	e1 11       	cpse	r30, r1
     dd2:	f3 cf       	rjmp	.-26     	; 0xdba <copy_string_to_buffer+0xa>
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <copy_string_to_buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
     dd6:	29 2f       	mov	r18, r25
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	fd 01       	movw	r30, r26
     ddc:	e2 0f       	add	r30, r18
     dde:	f3 1f       	adc	r31, r19
     de0:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     de2:	eb 01       	movw	r28, r22
     de4:	c2 0f       	add	r28, r18
     de6:	d3 1f       	adc	r29, r19
     de8:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     dea:	9f 5f       	subi	r25, 0xFF	; 255
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <copy_string_to_buffer+0x40>
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	94 17       	cp	r25, r20
     df2:	88 f3       	brcs	.-30     	; 0xdd6 <copy_string_to_buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
     df4:	84 2f       	mov	r24, r20
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <UART_transmit_string>:

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	7c 01       	movw	r14, r24
     e0a:	8b 01       	movw	r16, r22
     e0c:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
     e0e:	41 11       	cpse	r20, r1
     e10:	18 c0       	rjmp	.+48     	; 0xe42 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
     e12:	fb 01       	movw	r30, r22
     e14:	60 81       	ld	r22, Z
                index=0;
     e16:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
     e18:	08 c0       	rjmp	.+16     	; 0xe2a <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
     e1a:	c7 01       	movw	r24, r14
     e1c:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
			index++;
     e20:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
     e22:	f8 01       	movw	r30, r16
     e24:	ec 0f       	add	r30, r28
     e26:	f1 1d       	adc	r31, r1
     e28:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
     e2a:	61 11       	cpse	r22, r1
     e2c:	f6 cf       	rjmp	.-20     	; 0xe1a <UART_transmit_string+0x1e>
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
     e30:	f8 01       	movw	r30, r16
     e32:	ec 0f       	add	r30, r28
     e34:	f1 1d       	adc	r31, r1
     e36:	60 81       	ld	r22, Z
     e38:	c7 01       	movw	r24, r14
     e3a:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     e3e:	cf 5f       	subi	r28, 0xFF	; 255
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <UART_transmit_string+0x48>
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	cd 17       	cp	r28, r29
     e46:	a0 f3       	brcs	.-24     	; 0xe30 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	08 95       	ret

00000e56 <__udivmodsi4>:
     e56:	a1 e2       	ldi	r26, 0x21	; 33
     e58:	1a 2e       	mov	r1, r26
     e5a:	aa 1b       	sub	r26, r26
     e5c:	bb 1b       	sub	r27, r27
     e5e:	fd 01       	movw	r30, r26
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <__udivmodsi4_ep>

00000e62 <__udivmodsi4_loop>:
     e62:	aa 1f       	adc	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	ee 1f       	adc	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	a2 17       	cp	r26, r18
     e6c:	b3 07       	cpc	r27, r19
     e6e:	e4 07       	cpc	r30, r20
     e70:	f5 07       	cpc	r31, r21
     e72:	20 f0       	brcs	.+8      	; 0xe7c <__udivmodsi4_ep>
     e74:	a2 1b       	sub	r26, r18
     e76:	b3 0b       	sbc	r27, r19
     e78:	e4 0b       	sbc	r30, r20
     e7a:	f5 0b       	sbc	r31, r21

00000e7c <__udivmodsi4_ep>:
     e7c:	66 1f       	adc	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	1a 94       	dec	r1
     e86:	69 f7       	brne	.-38     	; 0xe62 <__udivmodsi4_loop>
     e88:	60 95       	com	r22
     e8a:	70 95       	com	r23
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	bd 01       	movw	r22, r26
     e96:	cf 01       	movw	r24, r30
     e98:	08 95       	ret

00000e9a <__tablejump2__>:
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	05 90       	lpm	r0, Z+
     ea0:	f4 91       	lpm	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	09 94       	ijmp

00000ea6 <atol>:
     ea6:	1f 93       	push	r17
     ea8:	fc 01       	movw	r30, r24
     eaa:	99 27       	eor	r25, r25
     eac:	88 27       	eor	r24, r24
     eae:	bc 01       	movw	r22, r24
     eb0:	e8 94       	clt
     eb2:	11 91       	ld	r17, Z+
     eb4:	10 32       	cpi	r17, 0x20	; 32
     eb6:	e9 f3       	breq	.-6      	; 0xeb2 <atol+0xc>
     eb8:	19 30       	cpi	r17, 0x09	; 9
     eba:	10 f0       	brcs	.+4      	; 0xec0 <atol+0x1a>
     ebc:	1e 30       	cpi	r17, 0x0E	; 14
     ebe:	c8 f3       	brcs	.-14     	; 0xeb2 <atol+0xc>
     ec0:	1b 32       	cpi	r17, 0x2B	; 43
     ec2:	51 f0       	breq	.+20     	; 0xed8 <atol+0x32>
     ec4:	1d 32       	cpi	r17, 0x2D	; 45
     ec6:	49 f4       	brne	.+18     	; 0xeda <atol+0x34>
     ec8:	68 94       	set
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <atol+0x32>
     ecc:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsi_const_10>
     ed0:	61 0f       	add	r22, r17
     ed2:	71 1d       	adc	r23, r1
     ed4:	81 1d       	adc	r24, r1
     ed6:	91 1d       	adc	r25, r1
     ed8:	11 91       	ld	r17, Z+
     eda:	10 53       	subi	r17, 0x30	; 48
     edc:	1a 30       	cpi	r17, 0x0A	; 10
     ede:	b0 f3       	brcs	.-20     	; 0xecc <atol+0x26>
     ee0:	3e f4       	brtc	.+14     	; 0xef0 <atol+0x4a>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	1f 91       	pop	r17
     ef2:	08 95       	ret

00000ef4 <__mulsi_const_10>:
     ef4:	59 2f       	mov	r21, r25
     ef6:	48 2f       	mov	r20, r24
     ef8:	37 2f       	mov	r19, r23
     efa:	26 2f       	mov	r18, r22
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	62 0f       	add	r22, r18
     f0e:	73 1f       	adc	r23, r19
     f10:	84 1f       	adc	r24, r20
     f12:	95 1f       	adc	r25, r21
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	08 95       	ret

00000f1e <sprintf>:
     f1e:	ae e0       	ldi	r26, 0x0E	; 14
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e9       	ldi	r30, 0x95	; 149
     f24:	f7 e0       	ldi	r31, 0x07	; 7
     f26:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__prologue_saves__+0x1c>
     f2a:	0d 89       	ldd	r16, Y+21	; 0x15
     f2c:	1e 89       	ldd	r17, Y+22	; 0x16
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	8c 83       	std	Y+4, r24	; 0x04
     f32:	1a 83       	std	Y+2, r17	; 0x02
     f34:	09 83       	std	Y+1, r16	; 0x01
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f e7       	ldi	r25, 0x7F	; 127
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	ae 01       	movw	r20, r28
     f40:	47 5e       	subi	r20, 0xE7	; 231
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	6f 89       	ldd	r22, Y+23	; 0x17
     f46:	78 8d       	ldd	r23, Y+24	; 0x18
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 b1 07 	call	0xf62	; 0xf62 <vfprintf>
     f50:	ef 81       	ldd	r30, Y+7	; 0x07
     f52:	f8 85       	ldd	r31, Y+8	; 0x08
     f54:	e0 0f       	add	r30, r16
     f56:	f1 1f       	adc	r31, r17
     f58:	10 82       	st	Z, r1
     f5a:	2e 96       	adiw	r28, 0x0e	; 14
     f5c:	e4 e0       	ldi	r30, 0x04	; 4
     f5e:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__epilogue_restores__+0x1c>

00000f62 <vfprintf>:
     f62:	ab e0       	ldi	r26, 0x0B	; 11
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__prologue_saves__>
     f6e:	6c 01       	movw	r12, r24
     f70:	7b 01       	movw	r14, r22
     f72:	8a 01       	movw	r16, r20
     f74:	fc 01       	movw	r30, r24
     f76:	17 82       	std	Z+7, r1	; 0x07
     f78:	16 82       	std	Z+6, r1	; 0x06
     f7a:	83 81       	ldd	r24, Z+3	; 0x03
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	cc c1       	rjmp	.+920    	; 0x1318 <vfprintf+0x3b6>
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	3c 01       	movw	r6, r24
     f86:	f6 01       	movw	r30, r12
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	f7 01       	movw	r30, r14
     f8c:	93 fd       	sbrc	r25, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	93 ff       	sbrs	r25, 3
     f92:	81 91       	ld	r24, Z+
     f94:	7f 01       	movw	r14, r30
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <vfprintf+0x3a>
     f9a:	ba c1       	rjmp	.+884    	; 0x1310 <vfprintf+0x3ae>
     f9c:	85 32       	cpi	r24, 0x25	; 37
     f9e:	39 f4       	brne	.+14     	; 0xfae <vfprintf+0x4c>
     fa0:	93 fd       	sbrc	r25, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	93 ff       	sbrs	r25, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	7f 01       	movw	r14, r30
     faa:	85 32       	cpi	r24, 0x25	; 37
     fac:	29 f4       	brne	.+10     	; 0xfb8 <vfprintf+0x56>
     fae:	b6 01       	movw	r22, r12
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
     fb6:	e7 cf       	rjmp	.-50     	; 0xf86 <vfprintf+0x24>
     fb8:	91 2c       	mov	r9, r1
     fba:	21 2c       	mov	r2, r1
     fbc:	31 2c       	mov	r3, r1
     fbe:	ff e1       	ldi	r31, 0x1F	; 31
     fc0:	f3 15       	cp	r31, r3
     fc2:	d8 f0       	brcs	.+54     	; 0xffa <vfprintf+0x98>
     fc4:	8b 32       	cpi	r24, 0x2B	; 43
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <vfprintf+0x84>
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <vfprintf+0x76>
     fca:	80 32       	cpi	r24, 0x20	; 32
     fcc:	79 f0       	breq	.+30     	; 0xfec <vfprintf+0x8a>
     fce:	83 32       	cpi	r24, 0x23	; 35
     fd0:	a1 f4       	brne	.+40     	; 0xffa <vfprintf+0x98>
     fd2:	23 2d       	mov	r18, r3
     fd4:	20 61       	ori	r18, 0x10	; 16
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <vfprintf+0xb0>
     fd8:	8d 32       	cpi	r24, 0x2D	; 45
     fda:	61 f0       	breq	.+24     	; 0xff4 <vfprintf+0x92>
     fdc:	80 33       	cpi	r24, 0x30	; 48
     fde:	69 f4       	brne	.+26     	; 0xffa <vfprintf+0x98>
     fe0:	23 2d       	mov	r18, r3
     fe2:	21 60       	ori	r18, 0x01	; 1
     fe4:	16 c0       	rjmp	.+44     	; 0x1012 <vfprintf+0xb0>
     fe6:	83 2d       	mov	r24, r3
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	38 2e       	mov	r3, r24
     fec:	e3 2d       	mov	r30, r3
     fee:	e4 60       	ori	r30, 0x04	; 4
     ff0:	3e 2e       	mov	r3, r30
     ff2:	2a c0       	rjmp	.+84     	; 0x1048 <vfprintf+0xe6>
     ff4:	f3 2d       	mov	r31, r3
     ff6:	f8 60       	ori	r31, 0x08	; 8
     ff8:	1d c0       	rjmp	.+58     	; 0x1034 <vfprintf+0xd2>
     ffa:	37 fc       	sbrc	r3, 7
     ffc:	2d c0       	rjmp	.+90     	; 0x1058 <vfprintf+0xf6>
     ffe:	20 ed       	ldi	r18, 0xD0	; 208
    1000:	28 0f       	add	r18, r24
    1002:	2a 30       	cpi	r18, 0x0A	; 10
    1004:	40 f0       	brcs	.+16     	; 0x1016 <vfprintf+0xb4>
    1006:	8e 32       	cpi	r24, 0x2E	; 46
    1008:	b9 f4       	brne	.+46     	; 0x1038 <vfprintf+0xd6>
    100a:	36 fc       	sbrc	r3, 6
    100c:	81 c1       	rjmp	.+770    	; 0x1310 <vfprintf+0x3ae>
    100e:	23 2d       	mov	r18, r3
    1010:	20 64       	ori	r18, 0x40	; 64
    1012:	32 2e       	mov	r3, r18
    1014:	19 c0       	rjmp	.+50     	; 0x1048 <vfprintf+0xe6>
    1016:	36 fe       	sbrs	r3, 6
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0xc4>
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	98 9e       	mul	r9, r24
    101e:	20 0d       	add	r18, r0
    1020:	11 24       	eor	r1, r1
    1022:	92 2e       	mov	r9, r18
    1024:	11 c0       	rjmp	.+34     	; 0x1048 <vfprintf+0xe6>
    1026:	ea e0       	ldi	r30, 0x0A	; 10
    1028:	2e 9e       	mul	r2, r30
    102a:	20 0d       	add	r18, r0
    102c:	11 24       	eor	r1, r1
    102e:	22 2e       	mov	r2, r18
    1030:	f3 2d       	mov	r31, r3
    1032:	f0 62       	ori	r31, 0x20	; 32
    1034:	3f 2e       	mov	r3, r31
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <vfprintf+0xe6>
    1038:	8c 36       	cpi	r24, 0x6C	; 108
    103a:	21 f4       	brne	.+8      	; 0x1044 <vfprintf+0xe2>
    103c:	83 2d       	mov	r24, r3
    103e:	80 68       	ori	r24, 0x80	; 128
    1040:	38 2e       	mov	r3, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <vfprintf+0xe6>
    1044:	88 36       	cpi	r24, 0x68	; 104
    1046:	41 f4       	brne	.+16     	; 0x1058 <vfprintf+0xf6>
    1048:	f7 01       	movw	r30, r14
    104a:	93 fd       	sbrc	r25, 3
    104c:	85 91       	lpm	r24, Z+
    104e:	93 ff       	sbrs	r25, 3
    1050:	81 91       	ld	r24, Z+
    1052:	7f 01       	movw	r14, r30
    1054:	81 11       	cpse	r24, r1
    1056:	b3 cf       	rjmp	.-154    	; 0xfbe <vfprintf+0x5c>
    1058:	98 2f       	mov	r25, r24
    105a:	9f 7d       	andi	r25, 0xDF	; 223
    105c:	95 54       	subi	r25, 0x45	; 69
    105e:	93 30       	cpi	r25, 0x03	; 3
    1060:	28 f4       	brcc	.+10     	; 0x106c <vfprintf+0x10a>
    1062:	0c 5f       	subi	r16, 0xFC	; 252
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	9f e3       	ldi	r25, 0x3F	; 63
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <vfprintf+0x124>
    106c:	83 36       	cpi	r24, 0x63	; 99
    106e:	31 f0       	breq	.+12     	; 0x107c <vfprintf+0x11a>
    1070:	83 37       	cpi	r24, 0x73	; 115
    1072:	71 f0       	breq	.+28     	; 0x1090 <vfprintf+0x12e>
    1074:	83 35       	cpi	r24, 0x53	; 83
    1076:	09 f0       	breq	.+2      	; 0x107a <vfprintf+0x118>
    1078:	59 c0       	rjmp	.+178    	; 0x112c <vfprintf+0x1ca>
    107a:	21 c0       	rjmp	.+66     	; 0x10be <vfprintf+0x15c>
    107c:	f8 01       	movw	r30, r16
    107e:	80 81       	ld	r24, Z
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	0e 5f       	subi	r16, 0xFE	; 254
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	88 24       	eor	r8, r8
    1088:	83 94       	inc	r8
    108a:	91 2c       	mov	r9, r1
    108c:	53 01       	movw	r10, r6
    108e:	13 c0       	rjmp	.+38     	; 0x10b6 <vfprintf+0x154>
    1090:	28 01       	movw	r4, r16
    1092:	f2 e0       	ldi	r31, 0x02	; 2
    1094:	4f 0e       	add	r4, r31
    1096:	51 1c       	adc	r5, r1
    1098:	f8 01       	movw	r30, r16
    109a:	a0 80       	ld	r10, Z
    109c:	b1 80       	ldd	r11, Z+1	; 0x01
    109e:	36 fe       	sbrs	r3, 6
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <vfprintf+0x146>
    10a2:	69 2d       	mov	r22, r9
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x14a>
    10a8:	6f ef       	ldi	r22, 0xFF	; 255
    10aa:	7f ef       	ldi	r23, 0xFF	; 255
    10ac:	c5 01       	movw	r24, r10
    10ae:	0e 94 9d 09 	call	0x133a	; 0x133a <strnlen>
    10b2:	4c 01       	movw	r8, r24
    10b4:	82 01       	movw	r16, r4
    10b6:	f3 2d       	mov	r31, r3
    10b8:	ff 77       	andi	r31, 0x7F	; 127
    10ba:	3f 2e       	mov	r3, r31
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <vfprintf+0x188>
    10be:	28 01       	movw	r4, r16
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	42 0e       	add	r4, r18
    10c4:	51 1c       	adc	r5, r1
    10c6:	f8 01       	movw	r30, r16
    10c8:	a0 80       	ld	r10, Z
    10ca:	b1 80       	ldd	r11, Z+1	; 0x01
    10cc:	36 fe       	sbrs	r3, 6
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <vfprintf+0x174>
    10d0:	69 2d       	mov	r22, r9
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x178>
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	7f ef       	ldi	r23, 0xFF	; 255
    10da:	c5 01       	movw	r24, r10
    10dc:	0e 94 92 09 	call	0x1324	; 0x1324 <strnlen_P>
    10e0:	4c 01       	movw	r8, r24
    10e2:	f3 2d       	mov	r31, r3
    10e4:	f0 68       	ori	r31, 0x80	; 128
    10e6:	3f 2e       	mov	r3, r31
    10e8:	82 01       	movw	r16, r4
    10ea:	33 fc       	sbrc	r3, 3
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <vfprintf+0x1c2>
    10ee:	82 2d       	mov	r24, r2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	88 16       	cp	r8, r24
    10f4:	99 06       	cpc	r9, r25
    10f6:	b0 f4       	brcc	.+44     	; 0x1124 <vfprintf+0x1c2>
    10f8:	b6 01       	movw	r22, r12
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    1102:	2a 94       	dec	r2
    1104:	f4 cf       	rjmp	.-24     	; 0x10ee <vfprintf+0x18c>
    1106:	f5 01       	movw	r30, r10
    1108:	37 fc       	sbrc	r3, 7
    110a:	85 91       	lpm	r24, Z+
    110c:	37 fe       	sbrs	r3, 7
    110e:	81 91       	ld	r24, Z+
    1110:	5f 01       	movw	r10, r30
    1112:	b6 01       	movw	r22, r12
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    111a:	21 10       	cpse	r2, r1
    111c:	2a 94       	dec	r2
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	82 1a       	sub	r8, r18
    1122:	91 08       	sbc	r9, r1
    1124:	81 14       	cp	r8, r1
    1126:	91 04       	cpc	r9, r1
    1128:	71 f7       	brne	.-36     	; 0x1106 <vfprintf+0x1a4>
    112a:	e8 c0       	rjmp	.+464    	; 0x12fc <vfprintf+0x39a>
    112c:	84 36       	cpi	r24, 0x64	; 100
    112e:	11 f0       	breq	.+4      	; 0x1134 <vfprintf+0x1d2>
    1130:	89 36       	cpi	r24, 0x69	; 105
    1132:	41 f5       	brne	.+80     	; 0x1184 <vfprintf+0x222>
    1134:	f8 01       	movw	r30, r16
    1136:	37 fe       	sbrs	r3, 7
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <vfprintf+0x1e6>
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	0c 5f       	subi	r16, 0xFC	; 252
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <vfprintf+0x1f6>
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	07 2e       	mov	r0, r23
    114e:	00 0c       	add	r0, r0
    1150:	88 0b       	sbc	r24, r24
    1152:	99 0b       	sbc	r25, r25
    1154:	0e 5f       	subi	r16, 0xFE	; 254
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	f3 2d       	mov	r31, r3
    115a:	ff 76       	andi	r31, 0x6F	; 111
    115c:	3f 2e       	mov	r3, r31
    115e:	97 ff       	sbrs	r25, 7
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x212>
    1162:	90 95       	com	r25
    1164:	80 95       	com	r24
    1166:	70 95       	com	r23
    1168:	61 95       	neg	r22
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	f0 68       	ori	r31, 0x80	; 128
    1172:	3f 2e       	mov	r3, r31
    1174:	2a e0       	ldi	r18, 0x0A	; 10
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	a3 01       	movw	r20, r6
    117a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__ultoa_invert>
    117e:	88 2e       	mov	r8, r24
    1180:	86 18       	sub	r8, r6
    1182:	45 c0       	rjmp	.+138    	; 0x120e <vfprintf+0x2ac>
    1184:	85 37       	cpi	r24, 0x75	; 117
    1186:	31 f4       	brne	.+12     	; 0x1194 <vfprintf+0x232>
    1188:	23 2d       	mov	r18, r3
    118a:	2f 7e       	andi	r18, 0xEF	; 239
    118c:	b2 2e       	mov	r11, r18
    118e:	2a e0       	ldi	r18, 0x0A	; 10
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	25 c0       	rjmp	.+74     	; 0x11de <vfprintf+0x27c>
    1194:	93 2d       	mov	r25, r3
    1196:	99 7f       	andi	r25, 0xF9	; 249
    1198:	b9 2e       	mov	r11, r25
    119a:	8f 36       	cpi	r24, 0x6F	; 111
    119c:	c1 f0       	breq	.+48     	; 0x11ce <vfprintf+0x26c>
    119e:	18 f4       	brcc	.+6      	; 0x11a6 <vfprintf+0x244>
    11a0:	88 35       	cpi	r24, 0x58	; 88
    11a2:	79 f0       	breq	.+30     	; 0x11c2 <vfprintf+0x260>
    11a4:	b5 c0       	rjmp	.+362    	; 0x1310 <vfprintf+0x3ae>
    11a6:	80 37       	cpi	r24, 0x70	; 112
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <vfprintf+0x24e>
    11aa:	88 37       	cpi	r24, 0x78	; 120
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <vfprintf+0x254>
    11ae:	b0 c0       	rjmp	.+352    	; 0x1310 <vfprintf+0x3ae>
    11b0:	e9 2f       	mov	r30, r25
    11b2:	e0 61       	ori	r30, 0x10	; 16
    11b4:	be 2e       	mov	r11, r30
    11b6:	b4 fe       	sbrs	r11, 4
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <vfprintf+0x272>
    11ba:	fb 2d       	mov	r31, r11
    11bc:	f4 60       	ori	r31, 0x04	; 4
    11be:	bf 2e       	mov	r11, r31
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <vfprintf+0x272>
    11c2:	34 fe       	sbrs	r3, 4
    11c4:	0a c0       	rjmp	.+20     	; 0x11da <vfprintf+0x278>
    11c6:	29 2f       	mov	r18, r25
    11c8:	26 60       	ori	r18, 0x06	; 6
    11ca:	b2 2e       	mov	r11, r18
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <vfprintf+0x278>
    11ce:	28 e0       	ldi	r18, 0x08	; 8
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <vfprintf+0x27c>
    11d4:	20 e1       	ldi	r18, 0x10	; 16
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0x27c>
    11da:	20 e1       	ldi	r18, 0x10	; 16
    11dc:	32 e0       	ldi	r19, 0x02	; 2
    11de:	f8 01       	movw	r30, r16
    11e0:	b7 fe       	sbrs	r11, 7
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <vfprintf+0x290>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	0c 5f       	subi	r16, 0xFC	; 252
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <vfprintf+0x29c>
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 5f       	subi	r16, 0xFE	; 254
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	a3 01       	movw	r20, r6
    1200:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__ultoa_invert>
    1204:	88 2e       	mov	r8, r24
    1206:	86 18       	sub	r8, r6
    1208:	fb 2d       	mov	r31, r11
    120a:	ff 77       	andi	r31, 0x7F	; 127
    120c:	3f 2e       	mov	r3, r31
    120e:	36 fe       	sbrs	r3, 6
    1210:	0d c0       	rjmp	.+26     	; 0x122c <vfprintf+0x2ca>
    1212:	23 2d       	mov	r18, r3
    1214:	2e 7f       	andi	r18, 0xFE	; 254
    1216:	a2 2e       	mov	r10, r18
    1218:	89 14       	cp	r8, r9
    121a:	58 f4       	brcc	.+22     	; 0x1232 <vfprintf+0x2d0>
    121c:	34 fe       	sbrs	r3, 4
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <vfprintf+0x2d4>
    1220:	32 fc       	sbrc	r3, 2
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <vfprintf+0x2d4>
    1224:	83 2d       	mov	r24, r3
    1226:	8e 7e       	andi	r24, 0xEE	; 238
    1228:	a8 2e       	mov	r10, r24
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <vfprintf+0x2d4>
    122c:	b8 2c       	mov	r11, r8
    122e:	a3 2c       	mov	r10, r3
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <vfprintf+0x2d6>
    1232:	b8 2c       	mov	r11, r8
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <vfprintf+0x2d6>
    1236:	b9 2c       	mov	r11, r9
    1238:	a4 fe       	sbrs	r10, 4
    123a:	0f c0       	rjmp	.+30     	; 0x125a <vfprintf+0x2f8>
    123c:	fe 01       	movw	r30, r28
    123e:	e8 0d       	add	r30, r8
    1240:	f1 1d       	adc	r31, r1
    1242:	80 81       	ld	r24, Z
    1244:	80 33       	cpi	r24, 0x30	; 48
    1246:	21 f4       	brne	.+8      	; 0x1250 <vfprintf+0x2ee>
    1248:	9a 2d       	mov	r25, r10
    124a:	99 7e       	andi	r25, 0xE9	; 233
    124c:	a9 2e       	mov	r10, r25
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x300>
    1250:	a2 fe       	sbrs	r10, 2
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <vfprintf+0x2fe>
    1254:	b3 94       	inc	r11
    1256:	b3 94       	inc	r11
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <vfprintf+0x300>
    125a:	8a 2d       	mov	r24, r10
    125c:	86 78       	andi	r24, 0x86	; 134
    125e:	09 f0       	breq	.+2      	; 0x1262 <vfprintf+0x300>
    1260:	b3 94       	inc	r11
    1262:	a3 fc       	sbrc	r10, 3
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <vfprintf+0x326>
    1266:	a0 fe       	sbrs	r10, 0
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0x314>
    126a:	b2 14       	cp	r11, r2
    126c:	88 f4       	brcc	.+34     	; 0x1290 <vfprintf+0x32e>
    126e:	28 0c       	add	r2, r8
    1270:	92 2c       	mov	r9, r2
    1272:	9b 18       	sub	r9, r11
    1274:	0e c0       	rjmp	.+28     	; 0x1292 <vfprintf+0x330>
    1276:	b2 14       	cp	r11, r2
    1278:	60 f4       	brcc	.+24     	; 0x1292 <vfprintf+0x330>
    127a:	b6 01       	movw	r22, r12
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    1284:	b3 94       	inc	r11
    1286:	f7 cf       	rjmp	.-18     	; 0x1276 <vfprintf+0x314>
    1288:	b2 14       	cp	r11, r2
    128a:	18 f4       	brcc	.+6      	; 0x1292 <vfprintf+0x330>
    128c:	2b 18       	sub	r2, r11
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x332>
    1290:	98 2c       	mov	r9, r8
    1292:	21 2c       	mov	r2, r1
    1294:	a4 fe       	sbrs	r10, 4
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <vfprintf+0x356>
    1298:	b6 01       	movw	r22, r12
    129a:	80 e3       	ldi	r24, 0x30	; 48
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12a2:	a2 fe       	sbrs	r10, 2
    12a4:	17 c0       	rjmp	.+46     	; 0x12d4 <vfprintf+0x372>
    12a6:	a1 fc       	sbrc	r10, 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vfprintf+0x34e>
    12aa:	88 e7       	ldi	r24, 0x78	; 120
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x352>
    12b0:	88 e5       	ldi	r24, 0x58	; 88
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b6 01       	movw	r22, r12
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <vfprintf+0x36e>
    12b8:	8a 2d       	mov	r24, r10
    12ba:	86 78       	andi	r24, 0x86	; 134
    12bc:	59 f0       	breq	.+22     	; 0x12d4 <vfprintf+0x372>
    12be:	a1 fe       	sbrs	r10, 1
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x364>
    12c2:	8b e2       	ldi	r24, 0x2B	; 43
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <vfprintf+0x366>
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	a7 fc       	sbrc	r10, 7
    12ca:	8d e2       	ldi	r24, 0x2D	; 45
    12cc:	b6 01       	movw	r22, r12
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12d4:	89 14       	cp	r8, r9
    12d6:	38 f4       	brcc	.+14     	; 0x12e6 <vfprintf+0x384>
    12d8:	b6 01       	movw	r22, r12
    12da:	80 e3       	ldi	r24, 0x30	; 48
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12e2:	9a 94       	dec	r9
    12e4:	f7 cf       	rjmp	.-18     	; 0x12d4 <vfprintf+0x372>
    12e6:	8a 94       	dec	r8
    12e8:	f3 01       	movw	r30, r6
    12ea:	e8 0d       	add	r30, r8
    12ec:	f1 1d       	adc	r31, r1
    12ee:	80 81       	ld	r24, Z
    12f0:	b6 01       	movw	r22, r12
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12f8:	81 10       	cpse	r8, r1
    12fa:	f5 cf       	rjmp	.-22     	; 0x12e6 <vfprintf+0x384>
    12fc:	22 20       	and	r2, r2
    12fe:	09 f4       	brne	.+2      	; 0x1302 <vfprintf+0x3a0>
    1300:	42 ce       	rjmp	.-892    	; 0xf86 <vfprintf+0x24>
    1302:	b6 01       	movw	r22, r12
    1304:	80 e2       	ldi	r24, 0x20	; 32
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    130c:	2a 94       	dec	r2
    130e:	f6 cf       	rjmp	.-20     	; 0x12fc <vfprintf+0x39a>
    1310:	f6 01       	movw	r30, r12
    1312:	86 81       	ldd	r24, Z+6	; 0x06
    1314:	97 81       	ldd	r25, Z+7	; 0x07
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0x3ba>
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	2b 96       	adiw	r28, 0x0b	; 11
    131e:	e2 e1       	ldi	r30, 0x12	; 18
    1320:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__epilogue_restores__>

00001324 <strnlen_P>:
    1324:	fc 01       	movw	r30, r24
    1326:	05 90       	lpm	r0, Z+
    1328:	61 50       	subi	r22, 0x01	; 1
    132a:	70 40       	sbci	r23, 0x00	; 0
    132c:	01 10       	cpse	r0, r1
    132e:	d8 f7       	brcc	.-10     	; 0x1326 <strnlen_P+0x2>
    1330:	80 95       	com	r24
    1332:	90 95       	com	r25
    1334:	8e 0f       	add	r24, r30
    1336:	9f 1f       	adc	r25, r31
    1338:	08 95       	ret

0000133a <strnlen>:
    133a:	fc 01       	movw	r30, r24
    133c:	61 50       	subi	r22, 0x01	; 1
    133e:	70 40       	sbci	r23, 0x00	; 0
    1340:	01 90       	ld	r0, Z+
    1342:	01 10       	cpse	r0, r1
    1344:	d8 f7       	brcc	.-10     	; 0x133c <strnlen+0x2>
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	8e 0f       	add	r24, r30
    134c:	9f 1f       	adc	r25, r31
    134e:	08 95       	ret

00001350 <fputc>:
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	fb 01       	movw	r30, r22
    135a:	23 81       	ldd	r18, Z+3	; 0x03
    135c:	21 fd       	sbrc	r18, 1
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <fputc+0x16>
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	2c c0       	rjmp	.+88     	; 0x13be <fputc+0x6e>
    1366:	22 ff       	sbrs	r18, 2
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <fputc+0x46>
    136a:	46 81       	ldd	r20, Z+6	; 0x06
    136c:	57 81       	ldd	r21, Z+7	; 0x07
    136e:	24 81       	ldd	r18, Z+4	; 0x04
    1370:	35 81       	ldd	r19, Z+5	; 0x05
    1372:	42 17       	cp	r20, r18
    1374:	53 07       	cpc	r21, r19
    1376:	44 f4       	brge	.+16     	; 0x1388 <fputc+0x38>
    1378:	a0 81       	ld	r26, Z
    137a:	b1 81       	ldd	r27, Z+1	; 0x01
    137c:	9d 01       	movw	r18, r26
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	20 83       	st	Z, r18
    1386:	8c 93       	st	X, r24
    1388:	26 81       	ldd	r18, Z+6	; 0x06
    138a:	37 81       	ldd	r19, Z+7	; 0x07
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	37 83       	std	Z+7, r19	; 0x07
    1392:	26 83       	std	Z+6, r18	; 0x06
    1394:	14 c0       	rjmp	.+40     	; 0x13be <fputc+0x6e>
    1396:	8b 01       	movw	r16, r22
    1398:	ec 01       	movw	r28, r24
    139a:	fb 01       	movw	r30, r22
    139c:	00 84       	ldd	r0, Z+8	; 0x08
    139e:	f1 85       	ldd	r31, Z+9	; 0x09
    13a0:	e0 2d       	mov	r30, r0
    13a2:	09 95       	icall
    13a4:	89 2b       	or	r24, r25
    13a6:	e1 f6       	brne	.-72     	; 0x1360 <fputc+0x10>
    13a8:	d8 01       	movw	r26, r16
    13aa:	16 96       	adiw	r26, 0x06	; 6
    13ac:	8d 91       	ld	r24, X+
    13ae:	9c 91       	ld	r25, X
    13b0:	17 97       	sbiw	r26, 0x07	; 7
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	17 96       	adiw	r26, 0x07	; 7
    13b6:	9c 93       	st	X, r25
    13b8:	8e 93       	st	-X, r24
    13ba:	16 97       	sbiw	r26, 0x06	; 6
    13bc:	ce 01       	movw	r24, r28
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <__ultoa_invert>:
    13c8:	fa 01       	movw	r30, r20
    13ca:	aa 27       	eor	r26, r26
    13cc:	28 30       	cpi	r18, 0x08	; 8
    13ce:	51 f1       	breq	.+84     	; 0x1424 <__ultoa_invert+0x5c>
    13d0:	20 31       	cpi	r18, 0x10	; 16
    13d2:	81 f1       	breq	.+96     	; 0x1434 <__ultoa_invert+0x6c>
    13d4:	e8 94       	clt
    13d6:	6f 93       	push	r22
    13d8:	6e 7f       	andi	r22, 0xFE	; 254
    13da:	6e 5f       	subi	r22, 0xFE	; 254
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	8f 4f       	sbci	r24, 0xFF	; 255
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	af 4f       	sbci	r26, 0xFF	; 255
    13e4:	b1 e0       	ldi	r27, 0x01	; 1
    13e6:	3e d0       	rcall	.+124    	; 0x1464 <__ultoa_invert+0x9c>
    13e8:	b4 e0       	ldi	r27, 0x04	; 4
    13ea:	3c d0       	rcall	.+120    	; 0x1464 <__ultoa_invert+0x9c>
    13ec:	67 0f       	add	r22, r23
    13ee:	78 1f       	adc	r23, r24
    13f0:	89 1f       	adc	r24, r25
    13f2:	9a 1f       	adc	r25, r26
    13f4:	a1 1d       	adc	r26, r1
    13f6:	68 0f       	add	r22, r24
    13f8:	79 1f       	adc	r23, r25
    13fa:	8a 1f       	adc	r24, r26
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	6a 0f       	add	r22, r26
    1402:	71 1d       	adc	r23, r1
    1404:	81 1d       	adc	r24, r1
    1406:	91 1d       	adc	r25, r1
    1408:	a1 1d       	adc	r26, r1
    140a:	20 d0       	rcall	.+64     	; 0x144c <__ultoa_invert+0x84>
    140c:	09 f4       	brne	.+2      	; 0x1410 <__ultoa_invert+0x48>
    140e:	68 94       	set
    1410:	3f 91       	pop	r19
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	26 9f       	mul	r18, r22
    1416:	11 24       	eor	r1, r1
    1418:	30 19       	sub	r19, r0
    141a:	30 5d       	subi	r19, 0xD0	; 208
    141c:	31 93       	st	Z+, r19
    141e:	de f6       	brtc	.-74     	; 0x13d6 <__ultoa_invert+0xe>
    1420:	cf 01       	movw	r24, r30
    1422:	08 95       	ret
    1424:	46 2f       	mov	r20, r22
    1426:	47 70       	andi	r20, 0x07	; 7
    1428:	40 5d       	subi	r20, 0xD0	; 208
    142a:	41 93       	st	Z+, r20
    142c:	b3 e0       	ldi	r27, 0x03	; 3
    142e:	0f d0       	rcall	.+30     	; 0x144e <__ultoa_invert+0x86>
    1430:	c9 f7       	brne	.-14     	; 0x1424 <__ultoa_invert+0x5c>
    1432:	f6 cf       	rjmp	.-20     	; 0x1420 <__ultoa_invert+0x58>
    1434:	46 2f       	mov	r20, r22
    1436:	4f 70       	andi	r20, 0x0F	; 15
    1438:	40 5d       	subi	r20, 0xD0	; 208
    143a:	4a 33       	cpi	r20, 0x3A	; 58
    143c:	18 f0       	brcs	.+6      	; 0x1444 <__ultoa_invert+0x7c>
    143e:	49 5d       	subi	r20, 0xD9	; 217
    1440:	31 fd       	sbrc	r19, 1
    1442:	40 52       	subi	r20, 0x20	; 32
    1444:	41 93       	st	Z+, r20
    1446:	02 d0       	rcall	.+4      	; 0x144c <__ultoa_invert+0x84>
    1448:	a9 f7       	brne	.-22     	; 0x1434 <__ultoa_invert+0x6c>
    144a:	ea cf       	rjmp	.-44     	; 0x1420 <__ultoa_invert+0x58>
    144c:	b4 e0       	ldi	r27, 0x04	; 4
    144e:	a6 95       	lsr	r26
    1450:	97 95       	ror	r25
    1452:	87 95       	ror	r24
    1454:	77 95       	ror	r23
    1456:	67 95       	ror	r22
    1458:	ba 95       	dec	r27
    145a:	c9 f7       	brne	.-14     	; 0x144e <__ultoa_invert+0x86>
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 05       	cpc	r22, r1
    1460:	71 05       	cpc	r23, r1
    1462:	08 95       	ret
    1464:	9b 01       	movw	r18, r22
    1466:	ac 01       	movw	r20, r24
    1468:	0a 2e       	mov	r0, r26
    146a:	06 94       	lsr	r0
    146c:	57 95       	ror	r21
    146e:	47 95       	ror	r20
    1470:	37 95       	ror	r19
    1472:	27 95       	ror	r18
    1474:	ba 95       	dec	r27
    1476:	c9 f7       	brne	.-14     	; 0x146a <__ultoa_invert+0xa2>
    1478:	62 0f       	add	r22, r18
    147a:	73 1f       	adc	r23, r19
    147c:	84 1f       	adc	r24, r20
    147e:	95 1f       	adc	r25, r21
    1480:	a0 1d       	adc	r26, r0
    1482:	08 95       	ret

00001484 <__prologue_saves__>:
    1484:	2f 92       	push	r2
    1486:	3f 92       	push	r3
    1488:	4f 92       	push	r4
    148a:	5f 92       	push	r5
    148c:	6f 92       	push	r6
    148e:	7f 92       	push	r7
    1490:	8f 92       	push	r8
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	ca 1b       	sub	r28, r26
    14ae:	db 0b       	sbc	r29, r27
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	09 94       	ijmp

000014bc <__epilogue_restores__>:
    14bc:	2a 88       	ldd	r2, Y+18	; 0x12
    14be:	39 88       	ldd	r3, Y+17	; 0x11
    14c0:	48 88       	ldd	r4, Y+16	; 0x10
    14c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    14cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ce:	b9 84       	ldd	r11, Y+9	; 0x09
    14d0:	c8 84       	ldd	r12, Y+8	; 0x08
    14d2:	df 80       	ldd	r13, Y+7	; 0x07
    14d4:	ee 80       	ldd	r14, Y+6	; 0x06
    14d6:	fd 80       	ldd	r15, Y+5	; 0x05
    14d8:	0c 81       	ldd	r16, Y+4	; 0x04
    14da:	1b 81       	ldd	r17, Y+3	; 0x03
    14dc:	aa 81       	ldd	r26, Y+2	; 0x02
    14de:	b9 81       	ldd	r27, Y+1	; 0x01
    14e0:	ce 0f       	add	r28, r30
    14e2:	d1 1d       	adc	r29, r1
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	ed 01       	movw	r28, r26
    14f0:	08 95       	ret

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
