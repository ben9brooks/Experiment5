
Experiment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  0000209c  00002130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000209c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800200  00800200  00002230  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000413b  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001598  00000000  00000000  0000661f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a82  00000000  00000000  00007bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d4  00000000  00000000  0000963c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfd  00000000  00000000  00009d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ab4  00000000  00000000  0000aa0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000d4c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	3a 0c       	add	r3, r10
      ce:	42 0c       	add	r4, r2
      d0:	32 0c       	add	r3, r2
      d2:	2a 0c       	add	r2, r10
      d4:	22 0c       	add	r2, r2
      d6:	1a 0c       	add	r1, r10
      d8:	12 0c       	add	r1, r2
      da:	0a 0c       	add	r0, r10
      dc:	02 0c       	add	r0, r2
      de:	fa 0b       	sbc	r31, r26
      e0:	f2 0b       	sbc	r31, r18
      e2:	ea 0b       	sbc	r30, r26

000000e4 <Prnt_bytes_prnt>:
      e4:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      f4:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
     104:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
     114:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	ec e9       	ldi	r30, 0x9C	; 156
     138:	f0 e2       	ldi	r31, 0x20	; 32
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a0 30       	cpi	r26, 0x00	; 0
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ae 37       	cpi	r26, 0x7E	; 126
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 b4 03 	call	0x768	; 0x768 <main>
     15a:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <export_drive_values>:
************************************************************************/

FS_values_t * export_drive_values(void)
{
   return &Drive_values;
}
     162:	80 e5       	ldi	r24, 0x50	; 80
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	08 95       	ret

00000168 <print_directory>:
************************************************************************/



uint16_t  print_directory(uint32_t Sector_num, uint8_t * array_in)
{ 
     168:	2f 92       	push	r2
     16a:	3f 92       	push	r3
     16c:	4f 92       	push	r4
     16e:	5f 92       	push	r5
     170:	6f 92       	push	r6
     172:	7f 92       	push	r7
     174:	8f 92       	push	r8
     176:	9f 92       	push	r9
     178:	af 92       	push	r10
     17a:	bf 92       	push	r11
     17c:	cf 92       	push	r12
     17e:	df 92       	push	r13
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	27 97       	sbiw	r28, 0x07	; 7
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	4b 01       	movw	r8, r22
     19e:	5c 01       	movw	r10, r24
     1a0:	5a 83       	std	Y+2, r21	; 0x02
     1a2:	49 83       	std	Y+1, r20	; 0x01
   uint16_t i, entries;
   uint8_t temp8, j, attr, out_val, error_flag;
   uint8_t * values;
   char *prnt_bffr;

   prnt_bffr=export_print_buffer();
     1a4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <export_print_buffer>
     1a8:	8c 83       	std	Y+4, r24	; 0x04
     1aa:	9d 83       	std	Y+5, r25	; 0x05
   
   values=array_in;
   entries=0;
   i=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
     1ac:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <Drive_values+0x1>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	49 f4       	brne	.+18     	; 0x1c6 <print_directory+0x5e>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
     1b4:	40 90 62 02 	lds	r4, 0x0262	; 0x800262 <Drive_values+0x12>
     1b8:	50 90 63 02 	lds	r5, 0x0263	; 0x800263 <Drive_values+0x13>
     1bc:	60 90 64 02 	lds	r6, 0x0264	; 0x800264 <Drive_values+0x14>
     1c0:	70 90 65 02 	lds	r7, 0x0265	; 0x800265 <Drive_values+0x15>
     1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <print_directory+0x68>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
     1c6:	40 90 50 02 	lds	r4, 0x0250	; 0x800250 <Drive_values>
     1ca:	51 2c       	mov	r5, r1
     1cc:	61 2c       	mov	r6, r1
     1ce:	71 2c       	mov	r7, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     1d0:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <Drive_values+0x4>
     1d4:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <Drive_values+0x5>
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	3a 81       	ldd	r19, Y+2	; 0x02
     1dc:	c5 01       	movw	r24, r10
     1de:	b4 01       	movw	r22, r8
     1e0:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
   if(error_flag==no_errors)
     1e4:	81 11       	cpse	r24, r1
     1e6:	cd c0       	rjmp	.+410    	; 0x382 <print_directory+0x21a>
     1e8:	75 01       	movw	r14, r10
     1ea:	64 01       	movw	r12, r8
     1ec:	00 e0       	ldi	r16, 0x00	; 0
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	1f 82       	std	Y+7, r1	; 0x07
     1f2:	1e 82       	std	Y+6, r1	; 0x06
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
     1f4:	69 81       	ldd	r22, Y+1	; 0x01
     1f6:	7a 81       	ldd	r23, Y+2	; 0x02
     1f8:	8e 81       	ldd	r24, Y+6	; 0x06
     1fa:	9f 81       	ldd	r25, Y+7	; 0x07
     1fc:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     200:	38 2e       	mov	r3, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
     202:	25 ee       	ldi	r18, 0xE5	; 229
     204:	82 17       	cp	r24, r18
     206:	09 f4       	brne	.+2      	; 0x20a <print_directory+0xa2>
     208:	8a c0       	rjmp	.+276    	; 0x31e <print_directory+0x1b6>
     20a:	88 23       	and	r24, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <print_directory+0xa8>
     20e:	87 c0       	rjmp	.+270    	; 0x31e <print_directory+0x1b6>
	    {  
	       attr=read_value_8(0x0b+i,values);
     210:	69 81       	ldd	r22, Y+1	; 0x01
     212:	7a 81       	ldd	r23, Y+2	; 0x02
     214:	8e 81       	ldd	r24, Y+6	; 0x06
     216:	9f 81       	ldd	r25, Y+7	; 0x07
     218:	0b 96       	adiw	r24, 0x0b	; 11
     21a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     21e:	8b 83       	std	Y+3, r24	; 0x03
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
     220:	8e 70       	andi	r24, 0x0E	; 14
     222:	09 f0       	breq	.+2      	; 0x226 <print_directory+0xbe>
     224:	7c c0       	rjmp	.+248    	; 0x31e <print_directory+0x1b6>
		   {
		      entries++;
     226:	0f 5f       	subi	r16, 0xFF	; 255
     228:	1f 4f       	sbci	r17, 0xFF	; 255
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
     22a:	1f 93       	push	r17
     22c:	0f 93       	push	r16
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	8f 93       	push	r24
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	9f 93       	push	r25
     23e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <sprintf>
		      UART_transmit_string(UART1,prnt_bffr,0);
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	6c 81       	ldd	r22, Y+4	; 0x04
     246:	7d 81       	ldd	r23, Y+5	; 0x05
     248:	88 ec       	ldi	r24, 0xC8	; 200
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
			  for(j=0;j<8;j++)
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	21 2c       	mov	r2, r1
     25e:	0e c0       	rjmp	.+28     	; 0x27c <print_directory+0x114>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
     260:	69 81       	ldd	r22, Y+1	; 0x01
     262:	7a 81       	ldd	r23, Y+2	; 0x02
     264:	8e 81       	ldd	r24, Y+6	; 0x06
     266:	9f 81       	ldd	r25, Y+7	; 0x07
     268:	82 0d       	add	r24, r2
     26a:	91 1d       	adc	r25, r1
     26c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
			     UART_transmit(UART1,out_val);
     270:	68 2f       	mov	r22, r24
     272:	88 ec       	ldi	r24, 0xC8	; 200
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
		   {
		      entries++;
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
		      UART_transmit_string(UART1,prnt_bffr,0);
			  for(j=0;j<8;j++)
     27a:	23 94       	inc	r2
     27c:	27 e0       	ldi	r18, 0x07	; 7
     27e:	22 15       	cp	r18, r2
     280:	78 f7       	brcc	.-34     	; 0x260 <print_directory+0xf8>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	84 fd       	sbrc	r24, 4
     286:	10 c0       	rjmp	.+32     	; 0x2a8 <print_directory+0x140>
     288:	26 c0       	rjmp	.+76     	; 0x2d6 <print_directory+0x16e>
			  {
			     for(j=8;j<11;j++)
			     {
			        out_val=read_value_8(i+j,values);
     28a:	69 81       	ldd	r22, Y+1	; 0x01
     28c:	7a 81       	ldd	r23, Y+2	; 0x02
     28e:	8e 81       	ldd	r24, Y+6	; 0x06
     290:	9f 81       	ldd	r25, Y+7	; 0x07
     292:	82 0d       	add	r24, r2
     294:	91 1d       	adc	r25, r1
     296:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
			        UART_transmit(UART1,out_val);
     29a:	68 2f       	mov	r22, r24
     29c:	88 ec       	ldi	r24, 0xC8	; 200
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
			  {
			     for(j=8;j<11;j++)
     2a4:	23 94       	inc	r2
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <print_directory+0x146>
     2a8:	68 94       	set
     2aa:	22 24       	eor	r2, r2
     2ac:	23 f8       	bld	r2, 3
     2ae:	9a e0       	ldi	r25, 0x0A	; 10
     2b0:	92 15       	cp	r25, r2
     2b2:	58 f7       	brcc	.-42     	; 0x28a <print_directory+0x122>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     sprintf(prnt_bffr,"[DIR]\r\n");
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	e6 e0       	ldi	r30, 0x06	; 6
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	ac 81       	ldd	r26, Y+4	; 0x04
     2bc:	bd 81       	ldd	r27, Y+5	; 0x05
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	8a 95       	dec	r24
     2c4:	e1 f7       	brne	.-8      	; 0x2be <print_directory+0x156>
				 UART_transmit_string(UART1,prnt_bffr,0);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	6c 81       	ldd	r22, Y+4	; 0x04
     2ca:	7d 81       	ldd	r23, Y+5	; 0x05
     2cc:	88 ec       	ldi	r24, 0xC8	; 200
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
     2d4:	24 c0       	rjmp	.+72     	; 0x31e <print_directory+0x1b6>
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
     2d6:	6e e2       	ldi	r22, 0x2E	; 46
     2d8:	88 ec       	ldi	r24, 0xC8	; 200
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
			     for(j=8;j<11;j++)
     2e0:	68 94       	set
     2e2:	22 24       	eor	r2, r2
     2e4:	23 f8       	bld	r2, 3
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <print_directory+0x19c>
			     {
			        out_val=read_value_8(i+j,values);
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	7a 81       	ldd	r23, Y+2	; 0x02
     2ec:	8e 81       	ldd	r24, Y+6	; 0x06
     2ee:	9f 81       	ldd	r25, Y+7	; 0x07
     2f0:	82 0d       	add	r24, r2
     2f2:	91 1d       	adc	r25, r1
     2f4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
			        UART_transmit(UART1,out_val);
     2f8:	68 2f       	mov	r22, r24
     2fa:	88 ec       	ldi	r24, 0xC8	; 200
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
				 UART_transmit_string(UART1,prnt_bffr,0);
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
			     for(j=8;j<11;j++)
     302:	23 94       	inc	r2
     304:	2a e0       	ldi	r18, 0x0A	; 10
     306:	22 15       	cp	r18, r2
     308:	78 f7       	brcc	.-34     	; 0x2e8 <print_directory+0x180>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     UART_transmit(UART1,CR);
     30a:	6d e0       	ldi	r22, 0x0D	; 13
     30c:	88 ec       	ldi	r24, 0xC8	; 200
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
                 UART_transmit(UART1,LF);
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	88 ec       	ldi	r24, 0xC8	; 200
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
			  }
		    }
		}
		    i=i+32;  // next entry
     31e:	8e 81       	ldd	r24, Y+6	; 0x06
     320:	9f 81       	ldd	r25, Y+7	; 0x07
     322:	80 96       	adiw	r24, 0x20	; 32
     324:	9f 83       	std	Y+7, r25	; 0x07
     326:	8e 83       	std	Y+6, r24	; 0x06
		    if(i>510)
     328:	8f 3f       	cpi	r24, 0xFF	; 255
     32a:	91 40       	sbci	r25, 0x01	; 1
     32c:	38 f1       	brcs	.+78     	; 0x37c <print_directory+0x214>
		    {
			  Sector++;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	c8 1a       	sub	r12, r24
     332:	d8 0a       	sbc	r13, r24
     334:	e8 0a       	sbc	r14, r24
     336:	f8 0a       	sbc	r15, r24
              if((Sector-Sector_num)<max_sectors)
     338:	d7 01       	movw	r26, r14
     33a:	c6 01       	movw	r24, r12
     33c:	88 19       	sub	r24, r8
     33e:	99 09       	sbc	r25, r9
     340:	aa 09       	sbc	r26, r10
     342:	bb 09       	sbc	r27, r11
     344:	84 15       	cp	r24, r4
     346:	95 05       	cpc	r25, r5
     348:	a6 05       	cpc	r26, r6
     34a:	b7 05       	cpc	r27, r7
     34c:	78 f4       	brcc	.+30     	; 0x36c <print_directory+0x204>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     34e:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <Drive_values+0x4>
     352:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <Drive_values+0x5>
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	3a 81       	ldd	r19, Y+2	; 0x02
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
			     if(error_flag!=no_errors)
     362:	81 11       	cpse	r24, r1
     364:	06 c0       	rjmp	.+12     	; 0x372 <print_directory+0x20a>
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
			     }
                 i=0;
     366:	1f 82       	std	Y+7, r1	; 0x07
     368:	1e 82       	std	Y+6, r1	; 0x06
     36a:	08 c0       	rjmp	.+16     	; 0x37c <print_directory+0x214>
			  }
			  else
			  {
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
     36c:	10 68       	ori	r17, 0x80	; 128
			     temp8=0;                       // forces a function exit
     36e:	31 2c       	mov	r3, r1
     370:	05 c0       	rjmp	.+10     	; 0x37c <print_directory+0x214>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
     372:	31 2c       	mov	r3, r1
              if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	10 e0       	ldi	r17, 0x00	; 0
				    temp8=0;     // forces a function exit
			     }
                 i=0;
     378:	1f 82       	std	Y+7, r1	; 0x07
     37a:	1e 82       	std	Y+6, r1	; 0x06
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
     37c:	31 10       	cpse	r3, r1
     37e:	3a cf       	rjmp	.-396    	; 0x1f4 <print_directory+0x8c>
     380:	02 c0       	rjmp	.+4      	; 0x386 <print_directory+0x21e>
	}
	else
	{
	   entries=0;    // no entries found indicates disk read error
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
	}
   return entries;
 }
     386:	c8 01       	movw	r24, r16
     388:	27 96       	adiw	r28, 0x07	; 7
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	3f 90       	pop	r3
     3b6:	2f 90       	pop	r2
     3b8:	08 95       	ret

000003ba <read_dir_entry>:
         a directory entry, clear for a file.  Bit 31 set for error.
CAUTION: 
************************************************************************/

uint32_t read_dir_entry(uint32_t Sector_num, uint16_t Entry, uint8_t * array_in)
{ 
     3ba:	2f 92       	push	r2
     3bc:	3f 92       	push	r3
     3be:	4f 92       	push	r4
     3c0:	5f 92       	push	r5
     3c2:	6f 92       	push	r6
     3c4:	7f 92       	push	r7
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	2c 97       	sbiw	r28, 0x0c	; 12
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	6b 01       	movw	r12, r22
     3ee:	7c 01       	movw	r14, r24
     3f0:	5a 87       	std	Y+10, r21	; 0x0a
     3f2:	49 87       	std	Y+9, r20	; 0x09
     3f4:	19 01       	movw	r2, r18

   values=array_in;
   entries=0;
   i=0;
   return_clus=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
     3f6:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <Drive_values+0x1>
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	49 f4       	brne	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
     3fe:	80 90 62 02 	lds	r8, 0x0262	; 0x800262 <Drive_values+0x12>
     402:	90 90 63 02 	lds	r9, 0x0263	; 0x800263 <Drive_values+0x13>
     406:	a0 90 64 02 	lds	r10, 0x0264	; 0x800264 <Drive_values+0x14>
     40a:	b0 90 65 02 	lds	r11, 0x0265	; 0x800265 <Drive_values+0x15>
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
     410:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <Drive_values>
     414:	88 2e       	mov	r8, r24
     416:	91 2c       	mov	r9, r1
     418:	a1 2c       	mov	r10, r1
     41a:	b1 2c       	mov	r11, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     41c:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <Drive_values+0x4>
     420:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <Drive_values+0x5>
     424:	91 01       	movw	r18, r2
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
   if(error_flag==no_errors)
     42e:	81 11       	cpse	r24, r1
     430:	c7 c0       	rjmp	.+398    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     432:	26 01       	movw	r4, r12
     434:	37 01       	movw	r6, r14
     436:	18 86       	std	Y+8, r1	; 0x08
     438:	1f 82       	std	Y+7, r1	; 0x07
     43a:	19 82       	std	Y+1, r1	; 0x01
     43c:	1a 82       	std	Y+2, r1	; 0x02
     43e:	1b 82       	std	Y+3, r1	; 0x03
     440:	1c 82       	std	Y+4, r1	; 0x04
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	3c 87       	std	Y+12, r19	; 0x0c
     448:	2b 87       	std	Y+11, r18	; 0x0b
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
     44a:	b1 01       	movw	r22, r2
     44c:	8b 85       	ldd	r24, Y+11	; 0x0b
     44e:	9c 85       	ldd	r25, Y+12	; 0x0c
     450:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     454:	18 2f       	mov	r17, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
     456:	85 3e       	cpi	r24, 0xE5	; 229
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	7c c0       	rjmp	.+248    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	79 c0       	rjmp	.+242    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
	    {  
	       attr=read_value_8(0x0b+i,values);
     462:	4b 85       	ldd	r20, Y+11	; 0x0b
     464:	5c 85       	ldd	r21, Y+12	; 0x0c
     466:	45 5f       	subi	r20, 0xF5	; 245
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	5e 83       	std	Y+6, r21	; 0x06
     46c:	4d 83       	std	Y+5, r20	; 0x05
     46e:	b1 01       	movw	r22, r2
     470:	ca 01       	movw	r24, r20
     472:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
		   if((attr&0x0E)==0)    // if hidden do not print
     476:	8e 70       	andi	r24, 0x0E	; 14
     478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	6c c0       	rjmp	.+216    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
		   {
		      entries++;
     47c:	8f 81       	ldd	r24, Y+7	; 0x07
     47e:	98 85       	ldd	r25, Y+8	; 0x08
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	98 87       	std	Y+8, r25	; 0x08
     484:	8f 83       	std	Y+7, r24	; 0x07
              if(entries==Entry)
     486:	a9 85       	ldd	r26, Y+9	; 0x09
     488:	ba 85       	ldd	r27, Y+10	; 0x0a
     48a:	8a 17       	cp	r24, r26
     48c:	9b 07       	cpc	r25, r27
     48e:	09 f0       	breq	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	61 c0       	rjmp	.+194    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
              {
			    if(Drive_values.FATtype==FAT32)
     492:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <Drive_values+0x1>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	31 f5       	brne	.+76     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
                {
                   return_clus=read_value_8(21+i,values);
     49a:	b1 01       	movw	r22, r2
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	45 96       	adiw	r24, 0x15	; 21
     4a2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
				   return_clus=return_clus<<8;
     4ac:	22 27       	eor	r18, r18
     4ae:	38 2f       	mov	r19, r24
     4b0:	49 2f       	mov	r20, r25
     4b2:	5a 2f       	mov	r21, r26
     4b4:	29 83       	std	Y+1, r18	; 0x01
     4b6:	3a 83       	std	Y+2, r19	; 0x02
     4b8:	4b 83       	std	Y+3, r20	; 0x03
     4ba:	5c 83       	std	Y+4, r21	; 0x04
                   return_clus|=read_value_8(20+i,values);
     4bc:	b1 01       	movw	r22, r2
     4be:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4c2:	44 96       	adiw	r24, 0x14	; 20
     4c4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     4c8:	29 81       	ldd	r18, Y+1	; 0x01
     4ca:	3a 81       	ldd	r19, Y+2	; 0x02
     4cc:	4b 81       	ldd	r20, Y+3	; 0x03
     4ce:	5c 81       	ldd	r21, Y+4	; 0x04
     4d0:	28 2b       	or	r18, r24
     4d2:	da 01       	movw	r26, r20
     4d4:	c9 01       	movw	r24, r18
                   return_clus=return_clus<<8;
     4d6:	22 27       	eor	r18, r18
     4d8:	38 2f       	mov	r19, r24
     4da:	49 2f       	mov	r20, r25
     4dc:	5a 2f       	mov	r21, r26
     4de:	29 83       	std	Y+1, r18	; 0x01
     4e0:	3a 83       	std	Y+2, r19	; 0x02
     4e2:	4b 83       	std	Y+3, r20	; 0x03
     4e4:	5c 83       	std	Y+4, r21	; 0x04
                }
                return_clus|=read_value_8(27+i,values);
     4e6:	b1 01       	movw	r22, r2
     4e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ec:	4b 96       	adiw	r24, 0x1b	; 27
     4ee:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	4b 81       	ldd	r20, Y+3	; 0x03
     4f8:	5c 81       	ldd	r21, Y+4	; 0x04
     4fa:	28 2b       	or	r18, r24
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
			    return_clus=return_clus<<8;
     500:	22 27       	eor	r18, r18
     502:	38 2f       	mov	r19, r24
     504:	49 2f       	mov	r20, r25
     506:	5a 2f       	mov	r21, r26
     508:	29 83       	std	Y+1, r18	; 0x01
     50a:	3a 83       	std	Y+2, r19	; 0x02
     50c:	4b 83       	std	Y+3, r20	; 0x03
     50e:	5c 83       	std	Y+4, r21	; 0x04
                return_clus|=read_value_8(26+i,values);
     510:	b1 01       	movw	r22, r2
     512:	8b 85       	ldd	r24, Y+11	; 0x0b
     514:	9c 85       	ldd	r25, Y+12	; 0x0c
     516:	4a 96       	adiw	r24, 0x1a	; 26
     518:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
     51c:	29 81       	ldd	r18, Y+1	; 0x01
     51e:	3a 81       	ldd	r19, Y+2	; 0x02
     520:	4b 81       	ldd	r20, Y+3	; 0x03
     522:	5c 81       	ldd	r21, Y+4	; 0x04
     524:	28 2b       	or	r18, r24
     526:	29 83       	std	Y+1, r18	; 0x01
     528:	3a 83       	std	Y+2, r19	; 0x02
     52a:	4b 83       	std	Y+3, r20	; 0x03
     52c:	5c 83       	std	Y+4, r21	; 0x04
			    attr=read_value_8(0x0b+i,values);
     52e:	b1 01       	movw	r22, r2
     530:	8d 81       	ldd	r24, Y+5	; 0x05
     532:	9e 81       	ldd	r25, Y+6	; 0x06
     534:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
			    if(attr&0x10) return_clus|=directory_bit;
     538:	84 ff       	sbrs	r24, 4
     53a:	0b c0       	rjmp	.+22     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	ab 81       	ldd	r26, Y+3	; 0x03
     542:	bc 81       	ldd	r27, Y+4	; 0x04
     544:	b0 61       	ori	r27, 0x10	; 16
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	ab 83       	std	Y+3, r26	; 0x03
     54c:	bc 83       	std	Y+4, r27	; 0x04
                temp8=0;    // forces a function exit
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	01 c0       	rjmp	.+2      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     552:	10 e0       	ldi	r17, 0x00	; 0
              }
              
		    }
		}
		    i=i+32;  // next entry
     554:	ab 85       	ldd	r26, Y+11	; 0x0b
     556:	bc 85       	ldd	r27, Y+12	; 0x0c
     558:	90 96       	adiw	r26, 0x20	; 32
     55a:	bc 87       	std	Y+12, r27	; 0x0c
     55c:	ab 87       	std	Y+11, r26	; 0x0b
		    if(i>510)
     55e:	af 3f       	cpi	r26, 0xFF	; 255
     560:	b1 40       	sbci	r27, 0x01	; 1
     562:	58 f1       	brcs	.+86     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
		    {
			  Sector++;
     564:	3f ef       	ldi	r19, 0xFF	; 255
     566:	43 1a       	sub	r4, r19
     568:	53 0a       	sbc	r5, r19
     56a:	63 0a       	sbc	r6, r19
     56c:	73 0a       	sbc	r7, r19
			  if((Sector-Sector_num)<max_sectors)
     56e:	d3 01       	movw	r26, r6
     570:	c2 01       	movw	r24, r4
     572:	8c 19       	sub	r24, r12
     574:	9d 09       	sbc	r25, r13
     576:	ae 09       	sbc	r26, r14
     578:	bf 09       	sbc	r27, r15
     57a:	88 15       	cp	r24, r8
     57c:	99 05       	cpc	r25, r9
     57e:	aa 05       	cpc	r26, r10
     580:	bb 05       	cpc	r27, r11
     582:	70 f4       	brcc	.+28     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     584:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <Drive_values+0x4>
     588:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <Drive_values+0x5>
     58c:	91 01       	movw	r18, r2
     58e:	c3 01       	movw	r24, r6
     590:	b2 01       	movw	r22, r4
     592:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
			     if(error_flag!=no_errors)
     596:	81 11       	cpse	r24, r1
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
			     }
			     i=0;
     59a:	1c 86       	std	Y+12, r1	; 0x0c
     59c:	1b 86       	std	Y+11, r1	; 0x0b
     59e:	0d c0       	rjmp	.+26     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			  }
			  else
			  {
			     temp8=0;                       // forces a function exit
     5a0:	10 e0       	ldi	r17, 0x00	; 0
     5a2:	0b c0       	rjmp	.+22     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
     5a4:	10 e0       	ldi	r17, 0x00	; 0
			     }
			     i=0;
     5a6:	1c 86       	std	Y+12, r1	; 0x0c
     5a8:	1b 86       	std	Y+11, r1	; 0x0b
			  if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e8       	ldi	r27, 0x80	; 128
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	9a 83       	std	Y+2, r25	; 0x02
     5b6:	ab 83       	std	Y+3, r26	; 0x03
     5b8:	bc 83       	std	Y+4, r27	; 0x04
			  {
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
     5ba:	11 11       	cpse	r17, r1
     5bc:	46 cf       	rjmp	.-372    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
	}
	else
	{
	   return_clus=no_entry_found;
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e8       	ldi	r21, 0x80	; 128
     5c8:	29 83       	std	Y+1, r18	; 0x01
     5ca:	3a 83       	std	Y+2, r19	; 0x02
     5cc:	4b 83       	std	Y+3, r20	; 0x03
     5ce:	5c 83       	std	Y+4, r21	; 0x04
	}
	if(return_clus==0) return_clus=no_entry_found;
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	ab 81       	ldd	r26, Y+3	; 0x03
     5d6:	bc 81       	ldd	r27, Y+4	; 0x04
     5d8:	89 2b       	or	r24, r25
     5da:	8a 2b       	or	r24, r26
     5dc:	8b 2b       	or	r24, r27
     5de:	41 f4       	brne	.+16     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e8       	ldi	r21, 0x80	; 128
     5e8:	29 83       	std	Y+1, r18	; 0x01
     5ea:	3a 83       	std	Y+2, r19	; 0x02
     5ec:	4b 83       	std	Y+3, r20	; 0x03
     5ee:	5c 83       	std	Y+4, r21	; 0x04
   return return_clus;
 }
     5f0:	69 81       	ldd	r22, Y+1	; 0x01
     5f2:	7a 81       	ldd	r23, Y+2	; 0x02
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	2c 96       	adiw	r28, 0x0c	; 12
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	4f 90       	pop	r4
     622:	3f 90       	pop	r3
     624:	2f 90       	pop	r2
     626:	08 95       	ret

00000628 <GPIO_Output_Init>:
     628:	fc 01       	movw	r30, r24
     62a:	21 81       	ldd	r18, Z+1	; 0x01
     62c:	62 2b       	or	r22, r18
     62e:	61 83       	std	Z+1, r22	; 0x01
     630:	08 95       	ret

00000632 <GPIO_Output_Set>:
     632:	fc 01       	movw	r30, r24
     634:	22 81       	ldd	r18, Z+2	; 0x02
     636:	62 2b       	or	r22, r18
     638:	62 83       	std	Z+2, r22	; 0x02
     63a:	08 95       	ret

0000063c <GPIO_Output_Clear>:
     63c:	fc 01       	movw	r30, r24
     63e:	92 81       	ldd	r25, Z+2	; 0x02
     640:	60 95       	com	r22
     642:	69 23       	and	r22, r25
     644:	62 83       	std	Z+2, r22	; 0x02
     646:	08 95       	ret

00000648 <long_serial_input>:
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	2b 97       	sbiw	r28, 0x0b	; 11
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	7c 01       	movw	r14, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 c0       	rjmp	.+16     	; 0x682 <long_serial_input+0x3a>
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ec 0f       	add	r30, r28
     678:	fd 1f       	adc	r31, r29
     67a:	e8 0f       	add	r30, r24
     67c:	f1 1d       	adc	r31, r1
     67e:	10 82       	st	Z, r1
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	8b 30       	cpi	r24, 0x0B	; 11
     684:	b0 f3       	brcs	.-20     	; 0x672 <long_serial_input+0x2a>
     686:	88 24       	eor	r8, r8
     688:	8a 94       	dec	r8
     68a:	98 2c       	mov	r9, r8
     68c:	54 01       	movw	r10, r8
     68e:	00 e0       	ldi	r16, 0x00	; 0
     690:	c7 01       	movw	r24, r14
     692:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <UART_receive>
     696:	18 2f       	mov	r17, r24
     698:	80 ed       	ldi	r24, 0xD0	; 208
     69a:	81 0f       	add	r24, r17
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	68 f4       	brcc	.+26     	; 0x6ba <long_serial_input+0x72>
     6a0:	61 2f       	mov	r22, r17
     6a2:	c7 01       	movw	r24, r14
     6a4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     6a8:	e1 e0       	ldi	r30, 0x01	; 1
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	ec 0f       	add	r30, r28
     6ae:	fd 1f       	adc	r31, r29
     6b0:	e0 0f       	add	r30, r16
     6b2:	f1 1d       	adc	r31, r1
     6b4:	10 83       	st	Z, r17
     6b6:	0f 5f       	subi	r16, 0xFF	; 255
     6b8:	2d c0       	rjmp	.+90     	; 0x714 <long_serial_input+0xcc>
     6ba:	18 30       	cpi	r17, 0x08	; 8
     6bc:	11 f0       	breq	.+4      	; 0x6c2 <long_serial_input+0x7a>
     6be:	1f 37       	cpi	r17, 0x7F	; 127
     6c0:	a9 f4       	brne	.+42     	; 0x6ec <long_serial_input+0xa4>
     6c2:	01 50       	subi	r16, 0x01	; 1
     6c4:	e1 e0       	ldi	r30, 0x01	; 1
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ec 0f       	add	r30, r28
     6ca:	fd 1f       	adc	r31, r29
     6cc:	e0 0f       	add	r30, r16
     6ce:	f1 1d       	adc	r31, r1
     6d0:	10 82       	st	Z, r1
     6d2:	68 e0       	ldi	r22, 0x08	; 8
     6d4:	c7 01       	movw	r24, r14
     6d6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     6da:	60 e2       	ldi	r22, 0x20	; 32
     6dc:	c7 01       	movw	r24, r14
     6de:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     6e2:	68 e0       	ldi	r22, 0x08	; 8
     6e4:	c7 01       	movw	r24, r14
     6e6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     6ea:	14 c0       	rjmp	.+40     	; 0x714 <long_serial_input+0xcc>
     6ec:	1d 30       	cpi	r17, 0x0D	; 13
     6ee:	21 f0       	breq	.+8      	; 0x6f8 <long_serial_input+0xb0>
     6f0:	1a 30       	cpi	r17, 0x0A	; 10
     6f2:	11 f0       	breq	.+4      	; 0x6f8 <long_serial_input+0xb0>
     6f4:	1e 32       	cpi	r17, 0x2E	; 46
     6f6:	71 f4       	brne	.+28     	; 0x714 <long_serial_input+0xcc>
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <atol>
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
     704:	6d e0       	ldi	r22, 0x0D	; 13
     706:	c7 01       	movw	r24, r14
     708:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     70c:	6a e0       	ldi	r22, 0x0A	; 10
     70e:	c7 01       	movw	r24, r14
     710:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     714:	0a 30       	cpi	r16, 0x0A	; 10
     716:	71 f4       	brne	.+28     	; 0x734 <long_serial_input+0xec>
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <atol>
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
     724:	6d e0       	ldi	r22, 0x0D	; 13
     726:	c7 01       	movw	r24, r14
     728:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     72c:	6a e0       	ldi	r22, 0x0A	; 10
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     734:	8f ef       	ldi	r24, 0xFF	; 255
     736:	88 16       	cp	r8, r24
     738:	98 06       	cpc	r9, r24
     73a:	a8 06       	cpc	r10, r24
     73c:	b8 06       	cpc	r11, r24
     73e:	09 f4       	brne	.+2      	; 0x742 <long_serial_input+0xfa>
     740:	a7 cf       	rjmp	.-178    	; 0x690 <long_serial_input+0x48>
     742:	c5 01       	movw	r24, r10
     744:	b4 01       	movw	r22, r8
     746:	2b 96       	adiw	r28, 0x0b	; 11
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <main>:
#include "UART_Print.h"
#include "Long_Serial_In.h"
#include "sd_read.h"

int main(void)
{
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	c3 52       	subi	r28, 0x23	; 35
     780:	d2 40       	sbci	r29, 0x02	; 2
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	/**********************************
	*
	* Experiment 2 Initializations
	*
	***********************************/
	UART_init(UART1, BAUD_RATE);
     78c:	60 e8       	ldi	r22, 0x80	; 128
     78e:	75 e2       	ldi	r23, 0x25	; 37
     790:	88 ec       	ldi	r24, 0xC8	; 200
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_init>
	*
	* Experiment 3 Initializations
	*
	***********************************/
	/* 400KHz used for the first init, which is the max hz for now. */ 
	SPI_master_init(SPI0, 400000U); /* port 0 is used for SD card, OLED, MP3 */
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5a e1       	ldi	r21, 0x1A	; 26
     79c:	66 e0       	ldi	r22, 0x06	; 6
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	8c e4       	ldi	r24, 0x4C	; 76
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_master_init>
	uint8_t mem_block[512];
	enum ErrorTypes typederror = 0;
	
	/* debug strings */ 
	char start[] = "Start\n";
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	e7 e5       	ldi	r30, 0x57	; 87
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	de 01       	movw	r26, r28
     7b0:	af 5f       	subi	r26, 0xFF	; 255
     7b2:	bd 4f       	sbci	r27, 0xFD	; 253
     7b4:	01 90       	ld	r0, Z+
     7b6:	0d 92       	st	X+, r0
     7b8:	8a 95       	dec	r24
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <main+0x4c>
	char stop[] = "Stop\n";
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	ee e5       	ldi	r30, 0x5E	; 94
     7c0:	f1 e0       	ldi	r31, 0x01	; 1
     7c2:	de 01       	movw	r26, r28
     7c4:	a8 5f       	subi	r26, 0xF8	; 248
     7c6:	bd 4f       	sbci	r27, 0xFD	; 253
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	8a 95       	dec	r24
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <main+0x60>
	
	/* initialize SS AKA CS */ 
	GPIO_Output_Init(PB, (1<<4));
     7d0:	60 e1       	ldi	r22, 0x10	; 16
     7d2:	83 e2       	ldi	r24, 0x23	; 35
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
     7da:	46 e0       	ldi	r20, 0x06	; 6
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7d 4f       	sbci	r23, 0xFD	; 253
     7e2:	88 ec       	ldi	r24, 0xC8	; 200
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
	
	do
	{
		typederror = SD_init(SPI0);
     7ea:	8c e4       	ldi	r24, 0x4C	; 76
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <SD_init>
     7f2:	18 2f       	mov	r17, r24
		if (typederror != 0)
     7f4:	88 23       	and	r24, r24
     7f6:	29 f0       	breq	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			display_error(UART1, typederror);
     7f8:	68 2f       	mov	r22, r24
     7fa:	88 ec       	ldi	r24, 0xC8	; 200
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <display_error>
		}
	}while(typederror != 0);
     802:	11 11       	cpse	r17, r1
     804:	f2 cf       	rjmp	.-28     	; 0x7ea <main+0x82>
	
	FS_values_t* accessor_fileSystem = export_drive_values();
     806:	0e 94 b1 00 	call	0x162	; 0x162 <export_drive_values>
     80a:	8c 01       	movw	r16, r24
	FS_values_t file_system;
	mount_drive(&file_system);
     80c:	ce 01       	movw	r24, r28
     80e:	82 5f       	subi	r24, 0xF2	; 242
     810:	9d 4f       	sbci	r25, 0xFD	; 253
     812:	0e 94 bf 07 	call	0xf7e	; 0xf7e <mount_drive>
	
	/* Fills the file system struct to match */ 
	*accessor_fileSystem = file_system;
     816:	86 e1       	ldi	r24, 0x16	; 22
     818:	fe 01       	movw	r30, r28
     81a:	e2 5f       	subi	r30, 0xF2	; 242
     81c:	fd 4f       	sbci	r31, 0xFD	; 253
     81e:	d8 01       	movw	r26, r16
     820:	01 90       	ld	r0, Z+
     822:	0d 92       	st	X+, r0
     824:	8a 95       	dec	r24
     826:	e1 f7       	brne	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	
	uint32_t FirstRootDirSector = first_sector(0);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	cb 01       	movw	r24, r22
     82e:	0e 94 9c 09 	call	0x1338	; 0x1338 <first_sector>
     832:	4b 01       	movw	r8, r22
     834:	5c 01       	movw	r10, r24

	/* SPI can be reinitialized at a faster freq, now that the SD has been initialized. */
	SPI_master_init(SPI0, 8000000U);
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	52 e1       	ldi	r21, 0x12	; 18
     83a:	6a e7       	ldi	r22, 0x7A	; 122
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	8c e4       	ldi	r24, 0x4C	; 76
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_master_init>
	
	UART_transmit_string(UART1, "SD initialized\n", 15);
     846:	4f e0       	ldi	r20, 0x0F	; 15
     848:	6e e0       	ldi	r22, 0x0E	; 14
     84a:	71 e0       	ldi	r23, 0x01	; 1
     84c:	88 ec       	ldi	r24, 0xC8	; 200
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>

	/* to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal */ 
	while (1)
	{	
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
     854:	9e 01       	movw	r18, r28
     856:	2f 5f       	subi	r18, 0xFF	; 255
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	52 e0       	ldi	r21, 0x02	; 2
     85e:	c5 01       	movw	r24, r10
     860:	b4 01       	movw	r22, r8
     862:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
		
		if(typederror != 0)
     866:	81 11       	cpse	r24, r1
     868:	3e c0       	rjmp	.+124    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
		
		
		userDirNum = FirstRootDirSector;
		while(1)
		{
			numEntries = print_directory(userDirNum, mem_block);
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	c5 01       	movw	r24, r10
     872:	b4 01       	movw	r22, r8
     874:	0e 94 b4 00 	call	0x168	; 0x168 <print_directory>
     878:	f8 2e       	mov	r15, r24
			UART_transmit_string(UART1, "Entry Number:\n", 14);
     87a:	4e e0       	ldi	r20, 0x0E	; 14
     87c:	6e e1       	ldi	r22, 0x1E	; 30
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	88 ec       	ldi	r24, 0xC8	; 200
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
			userDirNum = long_serial_input(UART1);
     888:	88 ec       	ldi	r24, 0xC8	; 200
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
			
			while(userDirNum > numEntries)
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
     892:	49 e2       	ldi	r20, 0x29	; 41
     894:	6d e2       	ldi	r22, 0x2D	; 45
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	88 ec       	ldi	r24, 0xC8	; 200
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
				userDirNum = long_serial_input(UART1);
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
		{
			numEntries = print_directory(userDirNum, mem_block);
			UART_transmit_string(UART1, "Entry Number:\n", 14);
			userDirNum = long_serial_input(UART1);
			
			while(userDirNum > numEntries)
     8a8:	0f 2d       	mov	r16, r15
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	06 17       	cp	r16, r22
     8b2:	17 07       	cpc	r17, r23
     8b4:	28 07       	cpc	r18, r24
     8b6:	39 07       	cpc	r19, r25
     8b8:	60 f3       	brcs	.-40     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
				userDirNum = long_serial_input(UART1);
			}
			
			userClusNum = read_dir_entry(FirstRootDirSector, userDirNum, mem_block);
     8ba:	9e 01       	movw	r18, r28
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	ab 01       	movw	r20, r22
     8c2:	c5 01       	movw	r24, r10
     8c4:	b4 01       	movw	r22, r8
     8c6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <read_dir_entry>
			
			/* For Directory */
			if((userClusNum & 0x10000000) != 0)
     8ca:	94 ff       	sbrs	r25, 4
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
			{
				userClusNum &= 0x0FFFFFFF; /* mask upper 4 off */
     8ce:	9f 70       	andi	r25, 0x0F	; 15
				userDirNum = first_sector(userClusNum);
     8d0:	0e 94 9c 09 	call	0x1338	; 0x1338 <first_sector>
     8d4:	4b 01       	movw	r8, r22
     8d6:	5c 01       	movw	r10, r24
     8d8:	c8 cf       	rjmp	.-112    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
				FirstRootDirSector = userDirNum;
			}
			/* For File */
			else
			{
				print_file(userClusNum, mem_block);
     8da:	ae 01       	movw	r20, r28
     8dc:	4f 5f       	subi	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	0e 94 26 0a 	call	0x144c	; 0x144c <print_file>
     8e4:	c2 cf       	rjmp	.-124    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
	{	
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
		
		if(typederror != 0)
		{
			display_error(UART1, typederror);
     8e6:	68 2f       	mov	r22, r24
     8e8:	88 ec       	ldi	r24, 0xC8	; 200
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <display_error>
				userDirNum = FirstRootDirSector;
			}	
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
     8f0:	45 e0       	ldi	r20, 0x05	; 5
     8f2:	be 01       	movw	r22, r28
     8f4:	68 5f       	subi	r22, 0xF8	; 248
     8f6:	7d 4f       	sbci	r23, 0xFD	; 253
     8f8:	88 ec       	ldi	r24, 0xC8	; 200
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
	UART_transmit(UART1, '\n');
     900:	6a e0       	ldi	r22, 0x0A	; 10
     902:	88 ec       	ldi	r24, 0xC8	; 200
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
	return 0;
	
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	cd 5d       	subi	r28, 0xDD	; 221
     910:	dd 4f       	sbci	r29, 0xFD	; 253
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	08 95       	ret

00000930 <print_16bytes>:
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	8c 01       	movw	r16, r24
     940:	6b 01       	movw	r12, r22
     942:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <export_print_buffer>
     946:	f8 2e       	mov	r15, r24
     948:	d9 2f       	mov	r29, r25
     94a:	0c 0d       	add	r16, r12
     94c:	1d 1d       	adc	r17, r13
     94e:	1f 93       	push	r17
     950:	0f 93       	push	r16
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	df 93       	push	r29
     95c:	ff 92       	push	r15
     95e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <sprintf>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	6f 2d       	mov	r22, r15
     966:	7d 2f       	mov	r23, r29
     968:	88 ec       	ldi	r24, 0xC8	; 200
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
     970:	df 92       	push	r13
     972:	cf 92       	push	r12
     974:	88 e6       	ldi	r24, 0x68	; 104
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	df 93       	push	r29
     97e:	ff 92       	push	r15
     980:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <sprintf>
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	6f 2d       	mov	r22, r15
     988:	7d 2f       	mov	r23, r29
     98a:	88 ec       	ldi	r24, 0xC8	; 200
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
     992:	8d b7       	in	r24, 0x3d	; 61
     994:	9e b7       	in	r25, 0x3e	; 62
     996:	0c 96       	adiw	r24, 0x0c	; 12
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	9e bf       	out	0x3e, r25	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	8d bf       	out	0x3d, r24	; 61
     9a2:	c0 e0       	ldi	r28, 0x00	; 0
     9a4:	1c c0       	rjmp	.+56     	; 0x9de <print_16bytes+0xae>
     9a6:	f8 01       	movw	r30, r16
     9a8:	ec 0f       	add	r30, r28
     9aa:	f1 1d       	adc	r31, r1
     9ac:	80 81       	ld	r24, Z
     9ae:	1f 92       	push	r1
     9b0:	8f 93       	push	r24
     9b2:	22 e7       	ldi	r18, 0x72	; 114
     9b4:	31 e0       	ldi	r19, 0x01	; 1
     9b6:	3f 93       	push	r19
     9b8:	2f 93       	push	r18
     9ba:	df 93       	push	r29
     9bc:	ff 92       	push	r15
     9be:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <sprintf>
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	6f 2d       	mov	r22, r15
     9c6:	7d 2f       	mov	r23, r29
     9c8:	88 ec       	ldi	r24, 0xC8	; 200
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
     9d0:	cf 5f       	subi	r28, 0xFF	; 255
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	c0 31       	cpi	r28, 0x10	; 16
     9e0:	10 f3       	brcs	.-60     	; 0x9a6 <print_16bytes+0x76>
     9e2:	c0 e0       	ldi	r28, 0x00	; 0
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <print_16bytes+0xd2>
     9e6:	f8 01       	movw	r30, r16
     9e8:	ec 0f       	add	r30, r28
     9ea:	f1 1d       	adc	r31, r1
     9ec:	60 81       	ld	r22, Z
     9ee:	80 ee       	ldi	r24, 0xE0	; 224
     9f0:	86 0f       	add	r24, r22
     9f2:	80 36       	cpi	r24, 0x60	; 96
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <print_16bytes+0xc8>
     9f6:	6e e2       	ldi	r22, 0x2E	; 46
     9f8:	88 ec       	ldi	r24, 0xC8	; 200
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     a00:	cf 5f       	subi	r28, 0xFF	; 255
     a02:	c0 31       	cpi	r28, 0x10	; 16
     a04:	80 f3       	brcs	.-32     	; 0x9e6 <print_16bytes+0xb6>
     a06:	6d e0       	ldi	r22, 0x0D	; 13
     a08:	88 ec       	ldi	r24, 0xC8	; 200
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     a10:	6a e0       	ldi	r22, 0x0A	; 10
     a12:	88 ec       	ldi	r24, 0xC8	; 200
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <print_memory>:
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	7c 01       	movw	r14, r24
     a38:	8b 01       	movw	r16, r22
     a3a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <export_print_buffer>
     a3e:	ec 01       	movw	r28, r24
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	bc 01       	movw	r22, r24
     a44:	84 ee       	ldi	r24, 0xE4	; 228
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 6d 0c 	call	0x18da	; 0x18da <copy_string_to_buffer>
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	be 01       	movw	r22, r28
     a50:	88 ec       	ldi	r24, 0xC8	; 200
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	be 01       	movw	r22, r28
     a5e:	c7 01       	movw	r24, r14
     a60:	0e 94 98 04 	call	0x930	; 0x930 <print_16bytes>
     a64:	60 96       	adiw	r28, 0x10	; 16
     a66:	c0 17       	cp	r28, r16
     a68:	d1 07       	cpc	r29, r17
     a6a:	c0 f3       	brcs	.-16     	; 0xa5c <print_memory+0x32>
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
     a7a:	0e 94 1e 03 	call	0x63c	; 0x63c <GPIO_Output_Clear>
     a7e:	08 95       	ret

00000a80 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
     a80:	0e 94 19 03 	call	0x632	; 0x632 <GPIO_Output_Set>
     a84:	08 95       	ret

00000a86 <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
     a86:	8f 92       	push	r8
     a88:	9f 92       	push	r9
     a8a:	af 92       	push	r10
     a8c:	bf 92       	push	r11
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	1f 92       	push	r1
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
     aa0:	60 34       	cpi	r22, 0x40	; 64
     aa2:	e0 f5       	brcc	.+120    	; 0xb1c <send_command+0x96>
     aa4:	49 01       	movw	r8, r18
     aa6:	5a 01       	movw	r10, r20
     aa8:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
     aaa:	16 2f       	mov	r17, r22
     aac:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
     aae:	ae 01       	movw	r20, r28
     ab0:	4f 5f       	subi	r20, 0xFF	; 255
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	61 2f       	mov	r22, r17
     ab6:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
     aba:	81 11       	cpse	r24, r1
     abc:	30 c0       	rjmp	.+96     	; 0xb1e <send_command+0x98>
     abe:	04 e0       	ldi	r16, 0x04	; 4
     ac0:	1c c0       	rjmp	.+56     	; 0xafa <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
     ac2:	40 2f       	mov	r20, r16
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	41 50       	subi	r20, 0x01	; 1
     ac8:	51 09       	sbc	r21, r1
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	44 0f       	add	r20, r20
     ad0:	55 1f       	adc	r21, r21
     ad2:	44 0f       	add	r20, r20
     ad4:	55 1f       	adc	r21, r21
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <send_command+0x5e>
     adc:	96 95       	lsr	r25
     ade:	87 95       	ror	r24
     ae0:	77 95       	ror	r23
     ae2:	67 95       	ror	r22
     ae4:	4a 95       	dec	r20
     ae6:	d2 f7       	brpl	.-12     	; 0xadc <send_command+0x56>
     ae8:	ae 01       	movw	r20, r28
     aea:	4f 5f       	subi	r20, 0xFF	; 255
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	c7 01       	movw	r24, r14
     af0:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
     af4:	81 11       	cpse	r24, r1
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
     af8:	01 50       	subi	r16, 0x01	; 1
     afa:	01 11       	cpse	r16, r1
     afc:	e2 cf       	rjmp	.-60     	; 0xac2 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
     afe:	10 34       	cpi	r17, 0x40	; 64
     b00:	11 f0       	breq	.+4      	; 0xb06 <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
     b06:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
     b08:	18 34       	cpi	r17, 0x48	; 72
     b0a:	09 f4       	brne	.+2      	; 0xb0e <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
     b0c:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
     b0e:	ae 01       	movw	r20, r28
     b10:	4f 5f       	subi	r20, 0xFF	; 255
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	c7 01       	movw	r24, r14
     b16:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
	
	//6: return error status
	return errorStatus;
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
     b1c:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	9f 90       	pop	r9
     b32:	8f 90       	pop	r8
     b34:	08 95       	ret

00000b36 <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	1f 92       	push	r1
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	7c 01       	movw	r14, r24
     b4e:	06 2f       	mov	r16, r22
     b50:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     b52:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     b54:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     b56:	ae 01       	movw	r20, r28
     b58:	4f 5f       	subi	r20, 0xFF	; 255
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	c7 01       	movw	r24, r14
     b60:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
		timeout++;
     b64:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	11 f4       	brne	.+4      	; 0xb70 <receive_response+0x3a>
     b6c:	11 11       	cpse	r17, r1
     b6e:	f3 cf       	rjmp	.-26     	; 0xb56 <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
     b70:	11 23       	and	r17, r17
     b72:	29 f1       	breq	.+74     	; 0xbbe <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
     b74:	98 2f       	mov	r25, r24
     b76:	9e 7f       	andi	r25, 0xFE	; 254
     b78:	21 f0       	breq	.+8      	; 0xb82 <receive_response+0x4c>
	{
		*array = data; //return value to see error
     b7a:	f6 01       	movw	r30, r12
     b7c:	80 83       	st	Z, r24
		return ERROR_SD;
     b7e:	8d ef       	ldi	r24, 0xFD	; 253
     b80:	1f c0       	rjmp	.+62     	; 0xbc0 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
     b82:	f6 01       	movw	r30, r12
     b84:	80 83       	st	Z, r24
		if(number_of_bytes>1)
     b86:	02 30       	cpi	r16, 0x02	; 2
     b88:	78 f4       	brcc	.+30     	; 0xba8 <receive_response+0x72>
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     b8c:	ae 01       	movw	r20, r28
     b8e:	4f 5f       	subi	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	6f ef       	ldi	r22, 0xFF	; 255
     b94:	c7 01       	movw	r24, r14
     b96:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
				array[i] = data;
     b9a:	f6 01       	movw	r30, r12
     b9c:	e1 0f       	add	r30, r17
     b9e:	f1 1d       	adc	r31, r1
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
     ba4:	1f 5f       	subi	r17, 0xFF	; 255
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <receive_response+0x74>
     ba8:	11 e0       	ldi	r17, 0x01	; 1
     baa:	01 17       	cp	r16, r17
     bac:	78 f7       	brcc	.-34     	; 0xb8c <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     bae:	ae 01       	movw	r20, r28
     bb0:	4f 5f       	subi	r20, 0xFF	; 255
     bb2:	5f 4f       	sbci	r21, 0xFF	; 255
     bb4:	6f ef       	ldi	r22, 0xFF	; 255
     bb6:	c7 01       	movw	r24, r14
     bb8:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
	// 4. return error value
	return errorStatus;
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	29 97       	sbiw	r28, 0x09	; 9
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
     bfa:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[8] = {0,0,0,0,0,0,0,0};
     bfc:	fe 01       	movw	r30, r28
     bfe:	32 96       	adiw	r30, 0x02	; 2
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	df 01       	movw	r26, r30
     c04:	1d 92       	st	X+, r1
     c06:	8a 95       	dec	r24
     c08:	e9 f7       	brne	.-6      	; 0xc04 <SD_init+0x30>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint32_t CMD16_arg = 0x00000200;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
     c0a:	60 e1       	ldi	r22, 0x10	; 16
     c0c:	83 e2       	ldi	r24, 0x23	; 35
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <SD_init+0x54>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     c18:	ae 01       	movw	r20, r28
     c1a:	4f 5f       	subi	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	6f ef       	ldi	r22, 0xFF	; 255
     c20:	c7 01       	movw	r24, r14
     c22:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     c26:	1f 5f       	subi	r17, 0xFF	; 255
     c28:	18 30       	cpi	r17, 0x08	; 8
     c2a:	b0 f3       	brcs	.-20     	; 0xc18 <SD_init+0x44>
     *
     *  CMD0
     *
     *************/
	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
     c2c:	60 e1       	ldi	r22, 0x10	; 16
     c2e:	83 e2       	ldi	r24, 0x23	; 35
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>

	 errorStatus = send_command(SPI_addr, CMD0, arg);
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	a9 01       	movw	r20, r18
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	c7 01       	movw	r24, r14
     c40:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
	 if (errorStatus == 0)
     c44:	81 11       	cpse	r24, r1
     c46:	0c c0       	rjmp	.+24     	; 0xc60 <SD_init+0x8c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     c48:	ae 01       	movw	r20, r28
     c4a:	4e 5f       	subi	r20, 0xFE	; 254
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	c7 01       	movw	r24, r14
     c52:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
     c56:	60 e1       	ldi	r22, 0x10	; 16
     c58:	83 e2       	ldi	r24, 0x23	; 35
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <SD_init+0x94>
     c66:	dc c0       	rjmp	.+440    	; 0xe20 <SD_init+0x24c>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
     c68:	60 e1       	ldi	r22, 0x10	; 16
     c6a:	83 e2       	ldi	r24, 0x23	; 35
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
     c72:	2a ea       	ldi	r18, 0xAA	; 170
     c74:	31 e0       	ldi	r19, 0x01	; 1
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	68 e0       	ldi	r22, 0x08	; 8
     c7c:	c7 01       	movw	r24, r14
     c7e:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
     c82:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
     c84:	81 11       	cpse	r24, r1
     c86:	0d c0       	rjmp	.+26     	; 0xca2 <SD_init+0xce>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     c88:	ae 01       	movw	r20, r28
     c8a:	4e 5f       	subi	r20, 0xFE	; 254
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	65 e0       	ldi	r22, 0x05	; 5
     c90:	c7 01       	movw	r24, r14
     c92:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
     c96:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
     c98:	60 e1       	ldi	r22, 0x10	; 16
     c9a:	83 e2       	ldi	r24, 0x23	; 35
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	59 f4       	brne	.+22     	; 0xcbe <SD_init+0xea>
     ca8:	11 11       	cpse	r17, r1
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <SD_init+0xea>
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <SD_init+0xe0>
     cb2:	b8 c0       	rjmp	.+368    	; 0xe24 <SD_init+0x250>
     cb4:	8e 81       	ldd	r24, Y+6	; 0x06
     cb6:	8a 3a       	cpi	r24, 0xAA	; 170
     cb8:	49 f0       	breq	.+18     	; 0xccc <SD_init+0xf8>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     cba:	8c ef       	ldi	r24, 0xFC	; 252
     cbc:	d4 c0       	rjmp	.+424    	; 0xe66 <SD_init+0x292>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
     cbe:	85 30       	cpi	r24, 0x05	; 5
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <SD_init+0xf0>
     cc2:	b2 c0       	rjmp	.+356    	; 0xe28 <SD_init+0x254>
	 {
		ACMD41_arg = 0x00000000; //v1.x
     cc4:	81 2c       	mov	r8, r1
     cc6:	91 2c       	mov	r9, r1
     cc8:	54 01       	movw	r10, r8
     cca:	05 c0       	rjmp	.+10     	; 0xcd6 <SD_init+0x102>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
     ccc:	81 2c       	mov	r8, r1
     cce:	91 2c       	mov	r9, r1
     cd0:	54 01       	movw	r10, r8
     cd2:	68 94       	set
     cd4:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     cd6:	60 e1       	ldi	r22, 0x10	; 16
     cd8:	83 e2       	ldi	r24, 0x23	; 35
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	a9 01       	movw	r20, r18
     ce6:	6a e3       	ldi	r22, 0x3A	; 58
     ce8:	c7 01       	movw	r24, r14
     cea:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
	
	//check error
	if (errorStatus != 0x00)
     cee:	81 11       	cpse	r24, r1
     cf0:	9d c0       	rjmp	.+314    	; 0xe2c <SD_init+0x258>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 plus 32bit OCR. bit 30 of OCR should be a 1 for high-capacity. SPI clock freq can be increased if that passes.
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     cf2:	ae 01       	movw	r20, r28
     cf4:	4e 5f       	subi	r20, 0xFE	; 254
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	65 e0       	ldi	r22, 0x05	; 5
     cfa:	c7 01       	movw	r24, r14
     cfc:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
     d00:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     d02:	60 e1       	ldi	r22, 0x10	; 16
     d04:	83 e2       	ldi	r24, 0x23	; 35
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     d0c:	11 11       	cpse	r17, r1
     d0e:	90 c0       	rjmp	.+288    	; 0xe30 <SD_init+0x25c>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	09 f0       	breq	.+2      	; 0xd18 <SD_init+0x144>
     d16:	8e c0       	rjmp	.+284    	; 0xe34 <SD_init+0x260>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	8c 7f       	andi	r24, 0xFC	; 252
     d1c:	8c 3f       	cpi	r24, 0xFC	; 252
     d1e:	09 f0       	breq	.+2      	; 0xd22 <SD_init+0x14e>
     d20:	8b c0       	rjmp	.+278    	; 0xe38 <SD_init+0x264>
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	33 c0       	rjmp	.+102    	; 0xd8e <SD_init+0x1ba>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
     d28:	60 e1       	ldi	r22, 0x10	; 16
     d2a:	83 e2       	ldi	r24, 0x23	; 35
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	a9 01       	movw	r20, r18
     d38:	67 e3       	ldi	r22, 0x37	; 55
     d3a:	c7 01       	movw	r24, r14
     d3c:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
		if(errorStatus != 0x00)
     d40:	81 11       	cpse	r24, r1
     d42:	7c c0       	rjmp	.+248    	; 0xe3c <SD_init+0x268>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     d44:	ae 01       	movw	r20, r28
     d46:	4e 5f       	subi	r20, 0xFE	; 254
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	c7 01       	movw	r24, r14
     d4e:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
		
		if(receive_array[0] != 0x01)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	09 f0       	breq	.+2      	; 0xd5a <SD_init+0x186>
     d58:	73 c0       	rjmp	.+230    	; 0xe40 <SD_init+0x26c>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	69 e2       	ldi	r22, 0x29	; 41
     d60:	c7 01       	movw	r24, r14
     d62:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
		if(errorStatus != 0x00)
     d66:	81 11       	cpse	r24, r1
     d68:	6d c0       	rjmp	.+218    	; 0xe44 <SD_init+0x270>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
     d6a:	ae 01       	movw	r20, r28
     d6c:	4e 5f       	subi	r20, 0xFE	; 254
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	c7 01       	movw	r24, r14
     d74:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
		if(errorStatus != 0x00)
     d78:	81 11       	cpse	r24, r1
     d7a:	66 c0       	rjmp	.+204    	; 0xe48 <SD_init+0x274>
		{
			return ERROR_CMD41;
		}
		timeout++;
     d7c:	0f 5f       	subi	r16, 0xFF	; 255
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (timeout == 0)
     d80:	09 f4       	brne	.+2      	; 0xd84 <SD_init+0x1b0>
     d82:	64 c0       	rjmp	.+200    	; 0xe4c <SD_init+0x278>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
     d84:	60 e1       	ldi	r22, 0x10	; 16
     d86:	83 e2       	ldi	r24, 0x23	; 35
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	*
	* 	ACMD41  -- try a new sampling rate, not 10
	*
	**************************/
	
	while(receive_array[0] != 0x00)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	81 11       	cpse	r24, r1
     d92:	ca cf       	rjmp	.-108    	; 0xd28 <SD_init+0x154>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     d94:	60 e1       	ldi	r22, 0x10	; 16
     d96:	83 e2       	ldi	r24, 0x23	; 35
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	a9 01       	movw	r20, r18
     da4:	6a e3       	ldi	r22, 0x3A	; 58
     da6:	c7 01       	movw	r24, r14
     da8:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
	
	//check error
	if (errorStatus != 0x00)
     dac:	81 11       	cpse	r24, r1
     dae:	50 c0       	rjmp	.+160    	; 0xe50 <SD_init+0x27c>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 + 32bit OCR
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     db0:	ae 01       	movw	r20, r28
     db2:	4e 5f       	subi	r20, 0xFE	; 254
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	65 e0       	ldi	r22, 0x05	; 5
     db8:	c7 01       	movw	r24, r14
     dba:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
     dbe:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     dc0:	60 e1       	ldi	r22, 0x10	; 16
     dc2:	83 e2       	ldi	r24, 0x23	; 35
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     dca:	11 11       	cpse	r17, r1
     dcc:	43 c0       	rjmp	.+134    	; 0xe54 <SD_init+0x280>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	88 23       	and	r24, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <SD_init+0x202>
     dd4:	41 c0       	rjmp	.+130    	; 0xe58 <SD_init+0x284>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
     dd6:	80 7c       	andi	r24, 0xC0	; 192
     dd8:	80 3c       	cpi	r24, 0xC0	; 192
     dda:	09 f0       	breq	.+2      	; 0xdde <SD_init+0x20a>
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <SD_init+0x288>
	*
	* 	CMD16 
	*
	**************************/
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
     dde:	60 e1       	ldi	r22, 0x10	; 16
     de0:	83 e2       	ldi	r24, 0x23	; 35
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	32 e0       	ldi	r19, 0x02	; 2
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	60 e1       	ldi	r22, 0x10	; 16
     df2:	c7 01       	movw	r24, r14
     df4:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
	if (errorStatus != 0)
     df8:	81 11       	cpse	r24, r1
     dfa:	32 c0       	rjmp	.+100    	; 0xe60 <SD_init+0x28c>
	{
		return ERROR_CMD16;
	}
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     dfc:	ae 01       	movw	r20, r28
     dfe:	4e 5f       	subi	r20, 0xFE	; 254
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	c7 01       	movw	r24, r14
     e06:	0e 94 9b 05 	call	0xb36	; 0xb36 <receive_response>
     e0a:	18 2f       	mov	r17, r24
	
	if(receive_array[0] != 0x00)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	81 11       	cpse	r24, r1
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <SD_init+0x290>
	{
		return ERROR_CMD16;
	}
	SD_CS_inactive(PB, (1<<4));
     e12:	60 e1       	ldi	r22, 0x10	; 16
     e14:	83 e2       	ldi	r24, 0x23	; 35
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
	return errorStatus;
     e1c:	81 2f       	mov	r24, r17
     e1e:	23 c0       	rjmp	.+70     	; 0xe66 <SD_init+0x292>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
     e20:	8b ef       	ldi	r24, 0xFB	; 251
     e22:	21 c0       	rjmp	.+66     	; 0xe66 <SD_init+0x292>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     e24:	8c ef       	ldi	r24, 0xFC	; 252
     e26:	1f c0       	rjmp	.+62     	; 0xe66 <SD_init+0x292>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
     e28:	8a ef       	ldi	r24, 0xFA	; 250
     e2a:	1d c0       	rjmp	.+58     	; 0xe66 <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     e2c:	89 ef       	ldi	r24, 0xF9	; 249
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     e30:	89 ef       	ldi	r24, 0xF9	; 249
     e32:	19 c0       	rjmp	.+50     	; 0xe66 <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
     e34:	89 ef       	ldi	r24, 0xF9	; 249
     e36:	17 c0       	rjmp	.+46     	; 0xe66 <SD_init+0x292>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
     e38:	89 ef       	ldi	r24, 0xF9	; 249
     e3a:	15 c0       	rjmp	.+42     	; 0xe66 <SD_init+0x292>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
     e3c:	88 ef       	ldi	r24, 0xF8	; 248
     e3e:	13 c0       	rjmp	.+38     	; 0xe66 <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
     e40:	88 ef       	ldi	r24, 0xF8	; 248
     e42:	11 c0       	rjmp	.+34     	; 0xe66 <SD_init+0x292>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     e44:	87 ef       	ldi	r24, 0xF7	; 247
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     e48:	87 ef       	ldi	r24, 0xF7	; 247
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <SD_init+0x292>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
     e4c:	86 ef       	ldi	r24, 0xF6	; 246
     e4e:	0b c0       	rjmp	.+22     	; 0xe66 <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     e50:	89 ef       	ldi	r24, 0xF9	; 249
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     e54:	89 ef       	ldi	r24, 0xF9	; 249
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
     e58:	89 ef       	ldi	r24, 0xF9	; 249
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <SD_init+0x292>
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
	{
		return ERROR_CMD58;
     e5c:	89 ef       	ldi	r24, 0xF9	; 249
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <SD_init+0x292>
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
	if (errorStatus != 0)
	{
		return ERROR_CMD16;
     e60:	85 ef       	ldi	r24, 0xF5	; 245
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <SD_init+0x292>
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
	
	if(receive_array[0] != 0x00)
	{
		return ERROR_CMD16;
     e64:	85 ef       	ldi	r24, 0xF5	; 245
	}
	SD_CS_inactive(PB, (1<<4));
	return errorStatus;
 }
     e66:	29 96       	adiw	r28, 0x09	; 9
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	08 95       	ret

00000e88 <read_block>:
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	1f 92       	push	r1
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	7c 01       	movw	r14, r24
     ea8:	5b 01       	movw	r10, r22
     eaa:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     eac:	19 82       	std	Y+1, r1	; 0x01
 }
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     eae:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data=0;
	// step a
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     eb0:	ae 01       	movw	r20, r28
     eb2:	4f 5f       	subi	r20, 0xFF	; 255
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	c7 01       	movw	r24, r14
     eba:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
		timeout++;
     ebe:	1f 5f       	subi	r17, 0xFF	; 255
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	99 23       	and	r25, r25
     ec4:	24 f4       	brge	.+8      	; 0xece <read_block+0x46>
     ec6:	81 11       	cpse	r24, r1
     ec8:	02 c0       	rjmp	.+4      	; 0xece <read_block+0x46>
     eca:	11 11       	cpse	r17, r1
     ecc:	f1 cf       	rjmp	.-30     	; 0xeb0 <read_block+0x28>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
     ece:	81 11       	cpse	r24, r1
     ed0:	43 c0       	rjmp	.+134    	; 0xf58 <read_block+0xd0>
	{
		return ERROR_CMD0;
	}
	if(data != 0)
     ed2:	91 11       	cpse	r25, r1
     ed4:	43 c0       	rjmp	.+134    	; 0xf5c <read_block+0xd4>
		return ERROR_CMD8;
	}

	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     ed6:	ae 01       	movw	r20, r28
     ed8:	4f 5f       	subi	r20, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	c7 01       	movw	r24, r14
     ee0:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
     ee4:	08 2f       	mov	r16, r24
		timeout++;
     ee6:	1f 5f       	subi	r17, 0xFF	; 255
	} while((data == 0xFF) && (errorStatus == 0) && (timeout != 0));
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	21 f4       	brne	.+8      	; 0xef6 <read_block+0x6e>
     eee:	01 11       	cpse	r16, r1
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <read_block+0x6e>
     ef2:	11 11       	cpse	r17, r1
     ef4:	f0 cf       	rjmp	.-32     	; 0xed6 <read_block+0x4e>
	//while ( (data == 0xFF) && (timeout != 0) );


	// check for 0xFE (success) or 0b0000XXXX (error)
	if (data == 0xFE)
     ef6:	8e 3f       	cpi	r24, 0xFE	; 254
     ef8:	99 f5       	brne	.+102    	; 0xf60 <read_block+0xd8>
	{
		// take first byte of data
		SPI_receive(SPI_addr, &data);
     efa:	be 01       	movw	r22, r28
     efc:	6f 5f       	subi	r22, 0xFF	; 255
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 9e 0b 	call	0x173c	; 0x173c <SPI_receive>
		array[0] = data;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	f6 01       	movw	r30, r12
     f0a:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     f0c:	88 24       	eor	r8, r8
     f0e:	83 94       	inc	r8
     f10:	91 2c       	mov	r9, r1
     f12:	10 c0       	rjmp	.+32     	; 0xf34 <read_block+0xac>
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     f14:	ae 01       	movw	r20, r28
     f16:	4f 5f       	subi	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	6f ef       	ldi	r22, 0xFF	; 255
     f1c:	c7 01       	movw	r24, r14
     f1e:	0e 94 be 0b 	call	0x177c	; 0x177c <SPI_transfer>
     f22:	08 2f       	mov	r16, r24
		array[i] = data;
     f24:	f6 01       	movw	r30, r12
     f26:	e8 0d       	add	r30, r8
     f28:	f9 1d       	adc	r31, r9
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     f2e:	ff ef       	ldi	r31, 0xFF	; 255
     f30:	8f 1a       	sub	r8, r31
     f32:	9f 0a       	sbc	r9, r31
     f34:	8a 14       	cp	r8, r10
     f36:	9b 04       	cpc	r9, r11
     f38:	68 f3       	brcs	.-38     	; 0xf14 <read_block+0x8c>
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <read_block+0xc8>

	// step d

	for(uint8_t i = 0; i < 3; i++)
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     f3e:	ae 01       	movw	r20, r28
     f40:	4f 5f       	subi	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	6f ef       	ldi	r22, 0xFF	; 255
     f46:	c7 01       	movw	r24, r14
     f48:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <SPI_transmit>
     f4c:	08 2f       	mov	r16, r24
		array[i] = data;
	}

	// step d

	for(uint8_t i = 0; i < 3; i++)
     f4e:	1f 5f       	subi	r17, 0xFF	; 255
     f50:	13 30       	cpi	r17, 0x03	; 3
     f52:	a8 f3       	brcs	.-22     	; 0xf3e <read_block+0xb6>
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     f54:	80 2f       	mov	r24, r16
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <read_block+0xda>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
	{
		return ERROR_CMD0;
     f58:	8b ef       	ldi	r24, 0xFB	; 251
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <read_block+0xda>
	}
	if(data != 0)
	{
		return ERROR_CMD8;
     f5c:	8a ef       	ldi	r24, 0xFA	; 250
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <read_block+0xda>
		array[0] = data;
	}
	else
	{
		//error
		return ERROR_TIMEOUT;
     f60:	8f ef       	ldi	r24, 0xFF	; 255
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
}
     f62:	0f 90       	pop	r0
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	08 95       	ret

00000f7e <mount_drive>:

uint8_t mount_drive(FS_values_t* fs)
{
     f7e:	2f 92       	push	r2
     f80:	3f 92       	push	r3
     f82:	4f 92       	push	r4
     f84:	5f 92       	push	r5
     f86:	6f 92       	push	r6
     f88:	7f 92       	push	r7
     f8a:	8f 92       	push	r8
     f8c:	9f 92       	push	r9
     f8e:	af 92       	push	r10
     f90:	bf 92       	push	r11
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	c6 50       	subi	r28, 0x06	; 6
     fa8:	d2 40       	sbci	r29, 0x02	; 2
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	1c 01       	movw	r2, r24
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
     fb6:	9e 01       	movw	r18, r28
     fb8:	2f 5f       	subi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	52 e0       	ldi	r21, 0x02	; 2
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	cb 01       	movw	r24, r22
     fc6:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
     fca:	18 2f       	mov	r17, r24
     fcc:	81 11       	cpse	r24, r1
     fce:	94 c1       	rjmp	.+808    	; 0x12f8 <mount_drive+0x37a>
	{
		return 1; //error
	}
	
	// determine if 0 is MBR or BPB
	if (array[0] != 0xEB && array[0] != 0xE9)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	8b 3e       	cpi	r24, 0xEB	; 235
     fd4:	a9 f0       	breq	.+42     	; 0x1000 <mount_drive+0x82>
     fd6:	89 3e       	cpi	r24, 0xE9	; 233
     fd8:	b9 f0       	breq	.+46     	; 0x1008 <mount_drive+0x8a>
	{
		//likely the MBR, read relative sectors value at 0x01C6
		mbr_relative_sectors = read_value_32(0x01C6, array);
     fda:	be 01       	movw	r22, r28
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	86 ec       	ldi	r24, 0xC6	; 198
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <read_value_32>
     fe8:	6b 01       	movw	r12, r22
     fea:	7c 01       	movw	r14, r24
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
     fec:	9e 01       	movw	r18, r28
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	52 e0       	ldi	r21, 0x02	; 2
     ff6:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
     ffa:	81 11       	cpse	r24, r1
     ffc:	7f c1       	rjmp	.+766    	; 0x12fc <mount_drive+0x37e>
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <mount_drive+0x90>
}

uint8_t mount_drive(FS_values_t* fs)
{
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
    1000:	c1 2c       	mov	r12, r1
    1002:	d1 2c       	mov	r13, r1
    1004:	76 01       	movw	r14, r12
    1006:	03 c0       	rjmp	.+6      	; 0x100e <mount_drive+0x90>
    1008:	c1 2c       	mov	r12, r1
    100a:	d1 2c       	mov	r13, r1
    100c:	76 01       	movw	r14, r12
		{
			return 2; //error
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	8b 3e       	cpi	r24, 0xEB	; 235
    1012:	19 f0       	breq	.+6      	; 0x101a <mount_drive+0x9c>
    1014:	89 3e       	cpi	r24, 0xE9	; 233
    1016:	09 f0       	breq	.+2      	; 0x101a <mount_drive+0x9c>
    1018:	73 c1       	rjmp	.+742    	; 0x1300 <mount_drive+0x382>
	{
		return 3; //error, BPB not found
	}
	
	// b - read values and determine FAT type
	fs->BytesPerSec = read_value_16(11, array);
    101a:	be 01       	movw	r22, r28
    101c:	6f 5f       	subi	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	8b e0       	ldi	r24, 0x0B	; 11
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    1028:	d1 01       	movw	r26, r2
    102a:	15 96       	adiw	r26, 0x05	; 5
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
    1030:	14 97       	sbiw	r26, 0x04	; 4
	fs->SecPerClus = read_value_8(13, array);
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	8d e0       	ldi	r24, 0x0D	; 13
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
    1040:	f1 01       	movw	r30, r2
    1042:	80 83       	st	Z, r24
	uint16_t reservedSectorCount = read_value_16(14, array);
    1044:	be 01       	movw	r22, r28
    1046:	6f 5f       	subi	r22, 0xFF	; 255
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	8e e0       	ldi	r24, 0x0E	; 14
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    1052:	5c 01       	movw	r10, r24
	uint8_t numFATs = read_value_8(16, array);
    1054:	be 01       	movw	r22, r28
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	80 e1       	ldi	r24, 0x10	; 16
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_value_8>
    1062:	08 2f       	mov	r16, r24
	uint16_t rootEntCnt = read_value_16(17, array);
    1064:	be 01       	movw	r22, r28
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	81 e1       	ldi	r24, 0x11	; 17
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    1072:	cb 5f       	subi	r28, 0xFB	; 251
    1074:	dd 4f       	sbci	r29, 0xFD	; 253
    1076:	99 83       	std	Y+1, r25	; 0x01
    1078:	88 83       	st	Y, r24
    107a:	c5 50       	subi	r28, 0x05	; 5
    107c:	d2 40       	sbci	r29, 0x02	; 2
	uint32_t totalSectors = read_value_16(19, array);
    107e:	be 01       	movw	r22, r28
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	83 e1       	ldi	r24, 0x13	; 19
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    108c:	2c 01       	movw	r4, r24
    108e:	61 2c       	mov	r6, r1
    1090:	71 2c       	mov	r7, r1
	
	if (totalSectors == 0)
    1092:	41 14       	cp	r4, r1
    1094:	51 04       	cpc	r5, r1
    1096:	61 04       	cpc	r6, r1
    1098:	71 04       	cpc	r7, r1
    109a:	49 f4       	brne	.+18     	; 0x10ae <mount_drive+0x130>
	{
		totalSectors = read_value_32(32, array);
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <read_value_32>
    10aa:	2b 01       	movw	r4, r22
    10ac:	3c 01       	movw	r6, r24
	}
	uint32_t fatSize = read_value_16(22, array);
    10ae:	be 01       	movw	r22, r28
    10b0:	6f 5f       	subi	r22, 0xFF	; 255
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	86 e1       	ldi	r24, 0x16	; 22
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    10bc:	9c 01       	movw	r18, r24
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	cf 5f       	subi	r28, 0xFF	; 255
    10c4:	dd 4f       	sbci	r29, 0xFD	; 253
    10c6:	28 83       	st	Y, r18
    10c8:	39 83       	std	Y+1, r19	; 0x01
    10ca:	4a 83       	std	Y+2, r20	; 0x02
    10cc:	5b 83       	std	Y+3, r21	; 0x03
    10ce:	c1 50       	subi	r28, 0x01	; 1
    10d0:	d2 40       	sbci	r29, 0x02	; 2
	if (fatSize == 0)
    10d2:	23 2b       	or	r18, r19
    10d4:	24 2b       	or	r18, r20
    10d6:	25 2b       	or	r18, r21
    10d8:	79 f4       	brne	.+30     	; 0x10f8 <mount_drive+0x17a>
	{
		fatSize = read_value_32(36, array);
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	84 e2       	ldi	r24, 0x24	; 36
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <read_value_32>
    10e8:	cf 5f       	subi	r28, 0xFF	; 255
    10ea:	dd 4f       	sbci	r29, 0xFD	; 253
    10ec:	68 83       	st	Y, r22
    10ee:	79 83       	std	Y+1, r23	; 0x01
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	9b 83       	std	Y+3, r25	; 0x03
    10f4:	c1 50       	subi	r28, 0x01	; 1
    10f6:	d2 40       	sbci	r29, 0x02	; 2
	}
	
	uint32_t totalClusters = totalSectors / fs->SecPerClus;
    10f8:	d1 01       	movw	r26, r2
    10fa:	2c 91       	ld	r18, X
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	c3 01       	movw	r24, r6
    1104:	b2 01       	movw	r22, r4
    1106:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__udivmodsi4>
	if (totalClusters < 65525)
    110a:	25 3f       	cpi	r18, 0xF5	; 245
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	41 05       	cpc	r20, r1
    1110:	51 05       	cpc	r21, r1
    1112:	20 f4       	brcc	.+8      	; 0x111c <mount_drive+0x19e>
	{
		fs->FATtype = 16;
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	f1 01       	movw	r30, r2
    1118:	81 83       	std	Z+1, r24	; 0x01
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <mount_drive+0x1a6>
	}
	else
	{
		fs->FATtype = 32;
    111c:	80 e2       	ldi	r24, 0x20	; 32
    111e:	d1 01       	movw	r26, r2
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	8c 93       	st	X, r24
	}
	
	// c - calulate starting sector numbers for FAT, 1st data sector, 1st root dir. Global vars.
	fs->StartofFAT = reservedSectorCount;
    1124:	45 01       	movw	r8, r10
    1126:	a1 2c       	mov	r10, r1
    1128:	b1 2c       	mov	r11, r1
    112a:	f1 01       	movw	r30, r2
    112c:	86 86       	std	Z+14, r8	; 0x0e
    112e:	97 86       	std	Z+15, r9	; 0x0f
    1130:	a0 8a       	std	Z+16, r10	; 0x10
    1132:	b1 8a       	std	Z+17, r11	; 0x11
	if (fs->FATtype == 32)
    1134:	81 81       	ldd	r24, Z+1	; 0x01
    1136:	80 32       	cpi	r24, 0x20	; 32
    1138:	29 f5       	brne	.+74     	; 0x1184 <mount_drive+0x206>
	{
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize) + read_value_32(44, array);
    113a:	a0 2f       	mov	r26, r16
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	cf 5f       	subi	r28, 0xFF	; 255
    1140:	dd 4f       	sbci	r29, 0xFD	; 253
    1142:	28 81       	ld	r18, Y
    1144:	39 81       	ldd	r19, Y+1	; 0x01
    1146:	4a 81       	ldd	r20, Y+2	; 0x02
    1148:	5b 81       	ldd	r21, Y+3	; 0x03
    114a:	c1 50       	subi	r28, 0x01	; 1
    114c:	d2 40       	sbci	r29, 0x02	; 2
    114e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__muluhisi3>
    1152:	24 01       	movw	r4, r8
    1154:	35 01       	movw	r6, r10
    1156:	46 0e       	add	r4, r22
    1158:	57 1e       	adc	r5, r23
    115a:	68 1e       	adc	r6, r24
    115c:	79 1e       	adc	r7, r25
    115e:	be 01       	movw	r22, r28
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8c e2       	ldi	r24, 0x2C	; 44
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 c8 0a 	call	0x1590	; 0x1590 <read_value_32>
    116c:	46 0e       	add	r4, r22
    116e:	57 1e       	adc	r5, r23
    1170:	68 1e       	adc	r6, r24
    1172:	79 1e       	adc	r7, r25
    1174:	d1 01       	movw	r26, r2
    1176:	16 96       	adiw	r26, 0x06	; 6
    1178:	4d 92       	st	X+, r4
    117a:	5d 92       	st	X+, r5
    117c:	6d 92       	st	X+, r6
    117e:	7c 92       	st	X, r7
    1180:	19 97       	sbiw	r26, 0x09	; 9
    1182:	36 c0       	rjmp	.+108    	; 0x11f0 <mount_drive+0x272>
	}
	else
	{
		fs->RootDirSecs = ((read_value_16(17,array) * 32) + (fs->BytesPerSec - 1)) / fs->BytesPerSec;
    1184:	be 01       	movw	r22, r28
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	81 e1       	ldi	r24, 0x11	; 17
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 be 0a 	call	0x157c	; 0x157c <read_value_16>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 95       	swap	r24
    1198:	92 95       	swap	r25
    119a:	90 7f       	andi	r25, 0xF0	; 240
    119c:	98 27       	eor	r25, r24
    119e:	80 7f       	andi	r24, 0xF0	; 240
    11a0:	98 27       	eor	r25, r24
    11a2:	f1 01       	movw	r30, r2
    11a4:	64 81       	ldd	r22, Z+4	; 0x04
    11a6:	75 81       	ldd	r23, Z+5	; 0x05
    11a8:	86 0f       	add	r24, r22
    11aa:	97 1f       	adc	r25, r23
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
    11b2:	cb 01       	movw	r24, r22
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	82 8b       	std	Z+18, r24	; 0x12
    11ba:	93 8b       	std	Z+19, r25	; 0x13
    11bc:	a4 8b       	std	Z+20, r26	; 0x14
    11be:	b5 8b       	std	Z+21, r27	; 0x15
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize);
    11c0:	46 84       	ldd	r4, Z+14	; 0x0e
    11c2:	57 84       	ldd	r5, Z+15	; 0x0f
    11c4:	60 88       	ldd	r6, Z+16	; 0x10
    11c6:	71 88       	ldd	r7, Z+17	; 0x11
    11c8:	a0 2f       	mov	r26, r16
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	cf 5f       	subi	r28, 0xFF	; 255
    11ce:	dd 4f       	sbci	r29, 0xFD	; 253
    11d0:	28 81       	ld	r18, Y
    11d2:	39 81       	ldd	r19, Y+1	; 0x01
    11d4:	4a 81       	ldd	r20, Y+2	; 0x02
    11d6:	5b 81       	ldd	r21, Y+3	; 0x03
    11d8:	c1 50       	subi	r28, 0x01	; 1
    11da:	d2 40       	sbci	r29, 0x02	; 2
    11dc:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__muluhisi3>
    11e0:	46 0e       	add	r4, r22
    11e2:	57 1e       	adc	r5, r23
    11e4:	68 1e       	adc	r6, r24
    11e6:	79 1e       	adc	r7, r25
    11e8:	46 82       	std	Z+6, r4	; 0x06
    11ea:	57 82       	std	Z+7, r5	; 0x07
    11ec:	60 86       	std	Z+8, r6	; 0x08
    11ee:	71 86       	std	Z+9, r7	; 0x09
	}
	fs->FirstDataSec = fs->FirstRootDirSec + fs->RootDirSecs;
    11f0:	f1 01       	movw	r30, r2
    11f2:	46 81       	ldd	r20, Z+6	; 0x06
    11f4:	57 81       	ldd	r21, Z+7	; 0x07
    11f6:	60 85       	ldd	r22, Z+8	; 0x08
    11f8:	71 85       	ldd	r23, Z+9	; 0x09
    11fa:	82 89       	ldd	r24, Z+18	; 0x12
    11fc:	93 89       	ldd	r25, Z+19	; 0x13
    11fe:	a4 89       	ldd	r26, Z+20	; 0x14
    1200:	b5 89       	ldd	r27, Z+21	; 0x15
    1202:	84 0f       	add	r24, r20
    1204:	95 1f       	adc	r25, r21
    1206:	a6 1f       	adc	r26, r22
    1208:	b7 1f       	adc	r27, r23
    120a:	82 87       	std	Z+10, r24	; 0x0a
    120c:	93 87       	std	Z+11, r25	; 0x0b
    120e:	a4 87       	std	Z+12, r26	; 0x0c
    1210:	b5 87       	std	Z+13, r27	; 0x0d
	
	//assign globals
	g_fat_start_sector = reservedSectorCount + mbr_relative_sectors;
    1212:	d7 01       	movw	r26, r14
    1214:	c6 01       	movw	r24, r12
    1216:	88 0d       	add	r24, r8
    1218:	99 1d       	adc	r25, r9
    121a:	aa 1d       	adc	r26, r10
    121c:	bb 1d       	adc	r27, r11
    121e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <g_fat_start_sector>
    1222:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <g_fat_start_sector+0x1>
    1226:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <g_fat_start_sector+0x2>
    122a:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <g_fat_start_sector+0x3>
	g_root_dir_sectors = ((rootEntCnt * 32) + (fs->BytesPerSec-1)) / (fs->BytesPerSec);
    122e:	cb 5f       	subi	r28, 0xFB	; 251
    1230:	dd 4f       	sbci	r29, 0xFD	; 253
    1232:	88 81       	ld	r24, Y
    1234:	99 81       	ldd	r25, Y+1	; 0x01
    1236:	c5 50       	subi	r28, 0x05	; 5
    1238:	d2 40       	sbci	r29, 0x02	; 2
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 95       	swap	r24
    1240:	92 95       	swap	r25
    1242:	90 7f       	andi	r25, 0xF0	; 240
    1244:	98 27       	eor	r25, r24
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	98 27       	eor	r25, r24
    124a:	04 80       	ldd	r0, Z+4	; 0x04
    124c:	f5 81       	ldd	r31, Z+5	; 0x05
    124e:	e0 2d       	mov	r30, r0
    1250:	8e 0f       	add	r24, r30
    1252:	9f 1f       	adc	r25, r31
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	bf 01       	movw	r22, r30
    1258:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
    125c:	2b 01       	movw	r4, r22
    125e:	61 2c       	mov	r6, r1
    1260:	71 2c       	mov	r7, r1
    1262:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <g_root_dir_sectors>
    1266:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <g_root_dir_sectors+0x1>
    126a:	60 92 70 02 	sts	0x0270, r6	; 0x800270 <g_root_dir_sectors+0x2>
    126e:	70 92 71 02 	sts	0x0271, r7	; 0x800271 <g_root_dir_sectors+0x3>
	g_first_data_sector = reservedSectorCount + (numFATs * fatSize) + g_root_dir_sectors + mbr_relative_sectors;
    1272:	a0 2f       	mov	r26, r16
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	cf 5f       	subi	r28, 0xFF	; 255
    1278:	dd 4f       	sbci	r29, 0xFD	; 253
    127a:	28 81       	ld	r18, Y
    127c:	39 81       	ldd	r19, Y+1	; 0x01
    127e:	4a 81       	ldd	r20, Y+2	; 0x02
    1280:	5b 81       	ldd	r21, Y+3	; 0x03
    1282:	c1 50       	subi	r28, 0x01	; 1
    1284:	d2 40       	sbci	r29, 0x02	; 2
    1286:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__muluhisi3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	88 0d       	add	r24, r8
    1290:	99 1d       	adc	r25, r9
    1292:	aa 1d       	adc	r26, r10
    1294:	bb 1d       	adc	r27, r11
    1296:	48 0e       	add	r4, r24
    1298:	59 1e       	adc	r5, r25
    129a:	6a 1e       	adc	r6, r26
    129c:	7b 1e       	adc	r7, r27
    129e:	c4 0c       	add	r12, r4
    12a0:	d5 1c       	adc	r13, r5
    12a2:	e6 1c       	adc	r14, r6
    12a4:	f7 1c       	adc	r15, r7
    12a6:	c0 92 66 02 	sts	0x0266, r12	; 0x800266 <g_first_data_sector>
    12aa:	d0 92 67 02 	sts	0x0267, r13	; 0x800267 <g_first_data_sector+0x1>
    12ae:	e0 92 68 02 	sts	0x0268, r14	; 0x800268 <g_first_data_sector+0x2>
    12b2:	f0 92 69 02 	sts	0x0269, r15	; 0x800269 <g_first_data_sector+0x3>
	g_secPerClus = fs->SecPerClus;
    12b6:	d1 01       	movw	r26, r2
    12b8:	8c 91       	ld	r24, X
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a0 e0       	ldi	r26, 0x00	; 0
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <g_secPerClus>
    12c4:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <g_secPerClus+0x1>
    12c8:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <g_secPerClus+0x2>
    12cc:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <g_secPerClus+0x3>
	g_resvdSecCnt = reservedSectorCount;
    12d0:	80 92 6a 02 	sts	0x026A, r8	; 0x80026a <g_resvdSecCnt>
    12d4:	90 92 6b 02 	sts	0x026B, r9	; 0x80026b <g_resvdSecCnt+0x1>
    12d8:	a0 92 6c 02 	sts	0x026C, r10	; 0x80026c <g_resvdSecCnt+0x2>
    12dc:	b0 92 6d 02 	sts	0x026D, r11	; 0x80026d <g_resvdSecCnt+0x3>
	g_bytsPerSec = fs->BytesPerSec;
    12e0:	cf 01       	movw	r24, r30
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_bytsPerSec>
    12ea:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_bytsPerSec+0x1>
    12ee:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_bytsPerSec+0x2>
    12f2:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_bytsPerSec+0x3>
	
	
	return 0; //success
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <mount_drive+0x384>
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
	{
		return 1; //error
    12f8:	11 e0       	ldi	r17, 0x01	; 1
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <mount_drive+0x384>
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
		{
			return 2; //error
    12fc:	12 e0       	ldi	r17, 0x02	; 2
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <mount_drive+0x384>
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
	{
		return 3; //error, BPB not found
    1300:	13 e0       	ldi	r17, 0x03	; 3
	g_resvdSecCnt = reservedSectorCount;
	g_bytsPerSec = fs->BytesPerSec;
	
	
	return 0; //success
}
    1302:	81 2f       	mov	r24, r17
    1304:	ca 5f       	subi	r28, 0xFA	; 250
    1306:	dd 4f       	sbci	r29, 0xFD	; 253
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	7f 90       	pop	r7
    132c:	6f 90       	pop	r6
    132e:	5f 90       	pop	r5
    1330:	4f 90       	pop	r4
    1332:	3f 90       	pop	r3
    1334:	2f 90       	pop	r2
    1336:	08 95       	ret

00001338 <first_sector>:

uint32_t first_sector(uint32_t cluster_num)
{
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
	if(cluster_num == 0)
    133c:	61 15       	cp	r22, r1
    133e:	71 05       	cpc	r23, r1
    1340:	81 05       	cpc	r24, r1
    1342:	91 05       	cpc	r25, r1
    1344:	49 f4       	brne	.+18     	; 0x1358 <first_sector+0x20>
	{
		return g_first_data_sector;
    1346:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_first_data_sector>
    134a:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_first_data_sector+0x1>
    134e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_first_data_sector+0x2>
    1352:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_first_data_sector+0x3>
    1356:	2e c0       	rjmp	.+92     	; 0x13b4 <first_sector+0x7c>
	}
	else if(cluster_num <= 2)
    1358:	63 30       	cpi	r22, 0x03	; 3
    135a:	71 05       	cpc	r23, r1
    135c:	81 05       	cpc	r24, r1
    135e:	91 05       	cpc	r25, r1
    1360:	68 f4       	brcc	.+26     	; 0x137c <first_sector+0x44>
	{
		return g_first_data_sector + cluster_num;
    1362:	00 91 66 02 	lds	r16, 0x0266	; 0x800266 <g_first_data_sector>
    1366:	10 91 67 02 	lds	r17, 0x0267	; 0x800267 <g_first_data_sector+0x1>
    136a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <g_first_data_sector+0x2>
    136e:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <g_first_data_sector+0x3>
    1372:	60 0f       	add	r22, r16
    1374:	71 1f       	adc	r23, r17
    1376:	82 1f       	adc	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	1c c0       	rjmp	.+56     	; 0x13b4 <first_sector+0x7c>
	}
	return ((cluster_num-2) * g_secPerClus) + g_first_data_sector;
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	22 50       	subi	r18, 0x02	; 2
    1382:	31 09       	sbc	r19, r1
    1384:	41 09       	sbc	r20, r1
    1386:	51 09       	sbc	r21, r1
    1388:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <g_secPerClus>
    138c:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <g_secPerClus+0x1>
    1390:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <g_secPerClus+0x2>
    1394:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <g_secPerClus+0x3>
    1398:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__mulsi3>
    139c:	00 91 66 02 	lds	r16, 0x0266	; 0x800266 <g_first_data_sector>
    13a0:	10 91 67 02 	lds	r17, 0x0267	; 0x800267 <g_first_data_sector+0x1>
    13a4:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <g_first_data_sector+0x2>
    13a8:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <g_first_data_sector+0x3>
    13ac:	60 0f       	add	r22, r16
    13ae:	71 1f       	adc	r23, r17
    13b0:	82 1f       	adc	r24, r18
    13b2:	93 1f       	adc	r25, r19
}
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <find_next_clus>:

uint32_t find_next_clus(uint32_t cluster_num, uint8_t array[])
{
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ea 01       	movw	r28, r20
	uint32_t FATOffset = (cluster_num * 4);
    13c8:	6b 01       	movw	r12, r22
    13ca:	7c 01       	movw	r14, r24
    13cc:	cc 0c       	add	r12, r12
    13ce:	dd 1c       	adc	r13, r13
    13d0:	ee 1c       	adc	r14, r14
    13d2:	ff 1c       	adc	r15, r15
    13d4:	cc 0c       	add	r12, r12
    13d6:	dd 1c       	adc	r13, r13
    13d8:	ee 1c       	adc	r14, r14
    13da:	ff 1c       	adc	r15, r15
	// a
	uint32_t ThisFATSecNum = g_resvdSecCnt + (FATOffset / g_bytsPerSec);
    13dc:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <g_bytsPerSec>
    13e0:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <g_bytsPerSec+0x1>
    13e4:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <g_bytsPerSec+0x2>
    13e8:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <g_bytsPerSec+0x3>
    13ec:	c7 01       	movw	r24, r14
    13ee:	b6 01       	movw	r22, r12
    13f0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__udivmodsi4>
    13f4:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_resvdSecCnt>
    13f8:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <g_resvdSecCnt+0x1>
    13fc:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <g_resvdSecCnt+0x2>
    1400:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <g_resvdSecCnt+0x3>
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	62 0f       	add	r22, r18
    140a:	73 1f       	adc	r23, r19
    140c:	84 1f       	adc	r24, r20
    140e:	95 1f       	adc	r25, r21
	// b
	read_sector(ThisFATSecNum, 512, array);
    1410:	9e 01       	movw	r18, r28
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	52 e0       	ldi	r21, 0x02	; 2
    1416:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
	// c
	uint32_t ThisFATEntOffset = FATOffset % g_bytsPerSec;
    141a:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <g_bytsPerSec>
    141e:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <g_bytsPerSec+0x1>
    1422:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <g_bytsPerSec+0x2>
    1426:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <g_bytsPerSec+0x3>
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__udivmodsi4>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
	// d
	uint32_t temp32 = read_value_32(ThisFATEntOffset, array);
    1436:	be 01       	movw	r22, r28
    1438:	0e 94 c8 0a 	call	0x1590	; 0x1590 <read_value_32>
	// e
	temp32 &= 0x0FFFFFFF;
    143c:	9f 70       	andi	r25, 0x0F	; 15
	// f
	// blank
	
	return temp32;
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <print_file>:

void print_file(uint32_t first_cluster, uint8_t *buffer) {
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	4b 01       	movw	r8, r22
    1462:	5c 01       	movw	r10, r24
    1464:	ea 01       	movw	r28, r20
    1466:	c1 2c       	mov	r12, r1
    1468:	d1 2c       	mov	r13, r1
    146a:	76 01       	movw	r14, r12
	uint32_t current_sector;
	uint32_t sector_in_cluster = 0;

	while (1) {
		// Calculate first sector of the current cluster
		current_sector = first_sector(current_cluster);
    146c:	c5 01       	movw	r24, r10
    146e:	b4 01       	movw	r22, r8
    1470:	0e 94 9c 09 	call	0x1338	; 0x1338 <first_sector>

		// Read and print the sector
		read_sector(current_sector + sector_in_cluster, 512, buffer);
    1474:	6c 0d       	add	r22, r12
    1476:	7d 1d       	adc	r23, r13
    1478:	8e 1d       	adc	r24, r14
    147a:	9f 1d       	adc	r25, r15
    147c:	9e 01       	movw	r18, r28
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	52 e0       	ldi	r21, 0x02	; 2
    1482:	0e 94 88 0a 	call	0x1510	; 0x1510 <read_sector>
		print_memory(buffer, 512); 
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	72 e0       	ldi	r23, 0x02	; 2
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 15 05 	call	0xa2a	; 0xa2a <print_memory>

		// Print sector and cluster information for debugging
		//printf("Cluster: %lu, Sector: %lu\n", current_cluster, current_sector + sector_in_cluster);

		// User interaction
		UART_transmit_string(UART1, "Enter 0 to stop, 1 to continue:\n", 32);
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	69 e7       	ldi	r22, 0x79	; 121
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
		uint8_t user_input = long_serial_input(UART1);
    14a0:	88 ec       	ldi	r24, 0xC8	; 200
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
		if (user_input == 0) {
    14a8:	88 23       	and	r24, r24
    14aa:	39 f1       	breq	.+78     	; 0x14fa <print_file+0xae>
			return; // Exit the loop if the user chooses to exit
		}

		// Move to the next sector
		sector_in_cluster++;
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	c8 1a       	sub	r12, r24
    14b0:	d8 0a       	sbc	r13, r24
    14b2:	e8 0a       	sbc	r14, r24
    14b4:	f8 0a       	sbc	r15, r24
		if (sector_in_cluster >= g_secPerClus) {
    14b6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <g_secPerClus>
    14ba:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <g_secPerClus+0x1>
    14be:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <g_secPerClus+0x2>
    14c2:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <g_secPerClus+0x3>
    14c6:	c8 16       	cp	r12, r24
    14c8:	d9 06       	cpc	r13, r25
    14ca:	ea 06       	cpc	r14, r26
    14cc:	fb 06       	cpc	r15, r27
    14ce:	70 f2       	brcs	.-100    	; 0x146c <print_file+0x20>
			// Find the next cluster if all sectors in the current cluster are printed
			current_cluster = find_next_clus(current_cluster, buffer);
    14d0:	ae 01       	movw	r20, r28
    14d2:	c5 01       	movw	r24, r10
    14d4:	b4 01       	movw	r22, r8
    14d6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <find_next_clus>
    14da:	4b 01       	movw	r8, r22
    14dc:	5c 01       	movw	r10, r24
			if ((current_cluster == 0x00000007) || (current_cluster == 0x0FFFFFFF)) {
    14de:	87 e0       	ldi	r24, 0x07	; 7
    14e0:	88 16       	cp	r8, r24
    14e2:	91 04       	cpc	r9, r1
    14e4:	a1 04       	cpc	r10, r1
    14e6:	b1 04       	cpc	r11, r1
    14e8:	41 f0       	breq	.+16     	; 0x14fa <print_file+0xae>
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	88 16       	cp	r8, r24
    14ee:	98 06       	cpc	r9, r24
    14f0:	a8 06       	cpc	r10, r24
    14f2:	8f e0       	ldi	r24, 0x0F	; 15
    14f4:	b8 06       	cpc	r11, r24
    14f6:	09 f0       	breq	.+2      	; 0x14fa <print_file+0xae>
    14f8:	b6 cf       	rjmp	.-148    	; 0x1466 <print_file+0x1a>
			}
			sector_in_cluster = 0; // Reset the sector counter for the new cluster
		}
	}
	return;
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	08 95       	ret

00001510 <read_sector>:
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	6b 01       	movw	r12, r22
    1522:	7c 01       	movw	r14, r24
    1524:	ea 01       	movw	r28, r20
    1526:	89 01       	movw	r16, r18
    1528:	60 e1       	ldi	r22, 0x10	; 16
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	83 e2       	ldi	r24, 0x23	; 35
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 3d 05 	call	0xa7a	; 0xa7a <SD_CS_active>
    1534:	a7 01       	movw	r20, r14
    1536:	96 01       	movw	r18, r12
    1538:	61 e1       	ldi	r22, 0x11	; 17
    153a:	8c e4       	ldi	r24, 0x4C	; 76
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 43 05 	call	0xa86	; 0xa86 <send_command>
    1542:	a8 01       	movw	r20, r16
    1544:	be 01       	movw	r22, r28
    1546:	8c e4       	ldi	r24, 0x4C	; 76
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 44 07 	call	0xe88	; 0xe88 <read_block>
    154e:	81 11       	cpse	r24, r1
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <read_sector+0x50>
    1552:	60 e1       	ldi	r22, 0x10	; 16
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	83 e2       	ldi	r24, 0x23	; 35
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 40 05 	call	0xa80	; 0xa80 <SD_CS_inactive>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	08 95       	ret

00001572 <read_value_8>:
    1572:	86 0f       	add	r24, r22
    1574:	97 1f       	adc	r25, r23
    1576:	fc 01       	movw	r30, r24
    1578:	80 81       	ld	r24, Z
    157a:	08 95       	ret

0000157c <read_value_16>:
    157c:	fb 01       	movw	r30, r22
    157e:	e8 0f       	add	r30, r24
    1580:	f9 1f       	adc	r31, r25
    1582:	20 81       	ld	r18, Z
    1584:	81 81       	ldd	r24, Z+1	; 0x01
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	98 2f       	mov	r25, r24
    158a:	88 27       	eor	r24, r24
    158c:	82 2b       	or	r24, r18
    158e:	08 95       	ret

00001590 <read_value_32>:
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	fb 01       	movw	r30, r22
    1596:	e8 0f       	add	r30, r24
    1598:	f9 1f       	adc	r31, r25
    159a:	20 81       	ld	r18, Z
    159c:	61 81       	ldd	r22, Z+1	; 0x01
    159e:	86 2f       	mov	r24, r22
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ba 2f       	mov	r27, r26
    15a8:	a9 2f       	mov	r26, r25
    15aa:	98 2f       	mov	r25, r24
    15ac:	88 27       	eor	r24, r24
    15ae:	82 2b       	or	r24, r18
    15b0:	02 81       	ldd	r16, Z+2	; 0x02
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	98 01       	movw	r18, r16
    15ba:	11 27       	eor	r17, r17
    15bc:	00 27       	eor	r16, r16
    15be:	ac 01       	movw	r20, r24
    15c0:	bd 01       	movw	r22, r26
    15c2:	40 2b       	or	r20, r16
    15c4:	51 2b       	or	r21, r17
    15c6:	62 2b       	or	r22, r18
    15c8:	73 2b       	or	r23, r19
    15ca:	83 81       	ldd	r24, Z+3	; 0x03
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	b8 2f       	mov	r27, r24
    15d4:	aa 27       	eor	r26, r26
    15d6:	99 27       	eor	r25, r25
    15d8:	88 27       	eor	r24, r24
    15da:	8a 01       	movw	r16, r20
    15dc:	9b 01       	movw	r18, r22
    15de:	08 2b       	or	r16, r24
    15e0:	19 2b       	or	r17, r25
    15e2:	2a 2b       	or	r18, r26
    15e4:	3b 2b       	or	r19, r27
    15e6:	c9 01       	movw	r24, r18
    15e8:	b8 01       	movw	r22, r16
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	08 95       	ret

000015f0 <round_up_pwr2>:
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	a8 f0       	brcs	.+42     	; 0x161e <round_up_pwr2+0x2e>
    15f4:	81 38       	cpi	r24, 0x81	; 129
    15f6:	a8 f4       	brcc	.+42     	; 0x1622 <round_up_pwr2+0x32>
    15f8:	81 50       	subi	r24, 0x01	; 1
    15fa:	98 2f       	mov	r25, r24
    15fc:	96 95       	lsr	r25
    15fe:	89 2b       	or	r24, r25
    1600:	98 2f       	mov	r25, r24
    1602:	96 95       	lsr	r25
    1604:	96 95       	lsr	r25
    1606:	89 2b       	or	r24, r25
    1608:	98 2f       	mov	r25, r24
    160a:	92 95       	swap	r25
    160c:	9f 70       	andi	r25, 0x0F	; 15
    160e:	89 2b       	or	r24, r25
    1610:	98 2f       	mov	r25, r24
    1612:	99 1f       	adc	r25, r25
    1614:	99 27       	eor	r25, r25
    1616:	99 1f       	adc	r25, r25
    1618:	89 2b       	or	r24, r25
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	08 95       	ret
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	08 95       	ret
    1622:	80 e8       	ldi	r24, 0x80	; 128
    1624:	08 95       	ret

00001626 <get_spi_prescaler_mask>:
    1626:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <round_up_pwr2>
    162a:	80 31       	cpi	r24, 0x10	; 16
    162c:	c1 f0       	breq	.+48     	; 0x165e <get_spi_prescaler_mask+0x38>
    162e:	28 f4       	brcc	.+10     	; 0x163a <get_spi_prescaler_mask+0x14>
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	79 f0       	breq	.+30     	; 0x1652 <get_spi_prescaler_mask+0x2c>
    1634:	88 30       	cpi	r24, 0x08	; 8
    1636:	79 f0       	breq	.+30     	; 0x1656 <get_spi_prescaler_mask+0x30>
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <get_spi_prescaler_mask+0x20>
    163a:	80 34       	cpi	r24, 0x40	; 64
    163c:	31 f0       	breq	.+12     	; 0x164a <get_spi_prescaler_mask+0x24>
    163e:	80 38       	cpi	r24, 0x80	; 128
    1640:	31 f0       	breq	.+12     	; 0x164e <get_spi_prescaler_mask+0x28>
    1642:	80 32       	cpi	r24, 0x20	; 32
    1644:	51 f0       	breq	.+20     	; 0x165a <get_spi_prescaler_mask+0x34>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	08 95       	ret
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	08 95       	ret
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	08 95       	ret
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	08 95       	ret
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	08 95       	ret
    165a:	86 e0       	ldi	r24, 0x06	; 6
    165c:	08 95       	ret
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	08 95       	ret

00001662 <SPI_master_init>:
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
    1668:	9a 01       	movw	r18, r20
    166a:	ab 01       	movw	r20, r22
    166c:	88 81       	ld	r24, Y
    166e:	83 7f       	andi	r24, 0xF3	; 243
    1670:	88 83       	st	Y, r24
    1672:	88 81       	ld	r24, Y
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	88 83       	st	Y, r24
    1678:	88 81       	ld	r24, Y
    167a:	80 61       	ori	r24, 0x10	; 16
    167c:	88 83       	st	Y, r24
    167e:	88 81       	ld	r24, Y
    1680:	8f 7d       	andi	r24, 0xDF	; 223
    1682:	88 83       	st	Y, r24
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	74 e2       	ldi	r23, 0x24	; 36
    1688:	84 ef       	ldi	r24, 0xF4	; 244
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__udivmodsi4>
    1690:	82 2f       	mov	r24, r18
    1692:	0e 94 13 0b 	call	0x1626	; 0x1626 <get_spi_prescaler_mask>
    1696:	98 81       	ld	r25, Y
    1698:	28 2f       	mov	r18, r24
    169a:	23 70       	andi	r18, 0x03	; 3
    169c:	92 2b       	or	r25, r18
    169e:	98 83       	st	Y, r25
    16a0:	99 81       	ldd	r25, Y+1	; 0x01
    16a2:	86 95       	lsr	r24
    16a4:	86 95       	lsr	r24
    16a6:	89 2b       	or	r24, r25
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	cc 34       	cpi	r28, 0x4C	; 76
    16ac:	d1 05       	cpc	r29, r1
    16ae:	a9 f4       	brne	.+42     	; 0x16da <SPI_master_init+0x78>
    16b0:	60 e2       	ldi	r22, 0x20	; 32
    16b2:	83 e2       	ldi	r24, 0x23	; 35
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
    16ba:	60 e2       	ldi	r22, 0x20	; 32
    16bc:	83 e2       	ldi	r24, 0x23	; 35
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 19 03 	call	0x632	; 0x632 <GPIO_Output_Set>
    16c4:	60 e8       	ldi	r22, 0x80	; 128
    16c6:	83 e2       	ldi	r24, 0x23	; 35
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
    16ce:	60 e8       	ldi	r22, 0x80	; 128
    16d0:	83 e2       	ldi	r24, 0x23	; 35
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 1e 03 	call	0x63c	; 0x63c <GPIO_Output_Clear>
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <SPI_master_init+0x96>
    16da:	cc 3a       	cpi	r28, 0xAC	; 172
    16dc:	d1 05       	cpc	r29, r1
    16de:	61 f4       	brne	.+24     	; 0x16f8 <SPI_master_init+0x96>
    16e0:	8d b1       	in	r24, 0x0d	; 13
    16e2:	88 60       	ori	r24, 0x08	; 8
    16e4:	8d b9       	out	0x0d, r24	; 13
    16e6:	8a b1       	in	r24, 0x0a	; 10
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	8a b9       	out	0x0a, r24	; 10
    16ec:	8e b1       	in	r24, 0x0e	; 14
    16ee:	88 60       	ori	r24, 0x08	; 8
    16f0:	8e b9       	out	0x0e, r24	; 14
    16f2:	8b b1       	in	r24, 0x0b	; 11
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	8b b9       	out	0x0b, r24	; 11
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <SPI_transmit>:
    16fe:	fc 01       	movw	r30, r24
    1700:	62 83       	std	Z+2, r22	; 0x02
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	99 23       	and	r25, r25
    170e:	1c f0       	brlt	.+6      	; 0x1716 <SPI_transmit+0x18>
    1710:	21 15       	cp	r18, r1
    1712:	31 05       	cpc	r19, r1
    1714:	c1 f7       	brne	.-16     	; 0x1706 <SPI_transmit+0x8>
    1716:	23 2b       	or	r18, r19
    1718:	21 f4       	brne	.+8      	; 0x1722 <SPI_transmit+0x24>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	fa 01       	movw	r30, r20
    171e:	80 83       	st	Z, r24
    1720:	08 95       	ret
    1722:	89 2f       	mov	r24, r25
    1724:	80 74       	andi	r24, 0x40	; 64
    1726:	96 ff       	sbrs	r25, 6
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <SPI_transmit+0x36>
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	fa 01       	movw	r30, r20
    172e:	80 83       	st	Z, r24
    1730:	8e ef       	ldi	r24, 0xFE	; 254
    1732:	08 95       	ret
    1734:	92 81       	ldd	r25, Z+2	; 0x02
    1736:	fa 01       	movw	r30, r20
    1738:	90 83       	st	Z, r25
    173a:	08 95       	ret

0000173c <SPI_receive>:
    173c:	fc 01       	movw	r30, r24
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	82 83       	std	Z+2, r24	; 0x02
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	2f 5f       	subi	r18, 0xFF	; 255
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	99 23       	and	r25, r25
    174e:	1c f0       	brlt	.+6      	; 0x1756 <SPI_receive+0x1a>
    1750:	21 15       	cp	r18, r1
    1752:	31 05       	cpc	r19, r1
    1754:	c1 f7       	brne	.-16     	; 0x1746 <SPI_receive+0xa>
    1756:	23 2b       	or	r18, r19
    1758:	21 f4       	brne	.+8      	; 0x1762 <SPI_receive+0x26>
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	fb 01       	movw	r30, r22
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret
    1762:	89 2f       	mov	r24, r25
    1764:	80 74       	andi	r24, 0x40	; 64
    1766:	96 ff       	sbrs	r25, 6
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <SPI_receive+0x38>
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	fb 01       	movw	r30, r22
    176e:	80 83       	st	Z, r24
    1770:	8e ef       	ldi	r24, 0xFE	; 254
    1772:	08 95       	ret
    1774:	92 81       	ldd	r25, Z+2	; 0x02
    1776:	fb 01       	movw	r30, r22
    1778:	90 83       	st	Z, r25
    177a:	08 95       	ret

0000177c <SPI_transfer>:
    177c:	fc 01       	movw	r30, r24
    177e:	62 83       	std	Z+2, r22	; 0x02
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	2f 5f       	subi	r18, 0xFF	; 255
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	99 23       	and	r25, r25
    178c:	1c f0       	brlt	.+6      	; 0x1794 <SPI_transfer+0x18>
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	c1 f7       	brne	.-16     	; 0x1784 <SPI_transfer+0x8>
    1794:	23 2b       	or	r18, r19
    1796:	21 f4       	brne	.+8      	; 0x17a0 <SPI_transfer+0x24>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	fa 01       	movw	r30, r20
    179c:	80 83       	st	Z, r24
    179e:	08 95       	ret
    17a0:	89 2f       	mov	r24, r25
    17a2:	80 74       	andi	r24, 0x40	; 64
    17a4:	96 ff       	sbrs	r25, 6
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <SPI_transfer+0x36>
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	fa 01       	movw	r30, r20
    17ac:	80 83       	st	Z, r24
    17ae:	8e ef       	ldi	r24, 0xFE	; 254
    17b0:	08 95       	ret
    17b2:	92 81       	ldd	r25, Z+2	; 0x02
    17b4:	fa 01       	movw	r30, r20
    17b6:	90 83       	st	Z, r25
    17b8:	08 95       	ret

000017ba <display_error>:
    17ba:	86 2f       	mov	r24, r22
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	e4 5f       	subi	r30, 0xF4	; 244
    17c2:	f1 09       	sbc	r31, r1
    17c4:	ec 30       	cpi	r30, 0x0C	; 12
    17c6:	f1 05       	cpc	r31, r1
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <display_error+0x12>
    17ca:	64 c0       	rjmp	.+200    	; 0x1894 <display_error+0xda>
    17cc:	ea 59       	subi	r30, 0x9A	; 154
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__tablejump2__>
    17d4:	48 e0       	ldi	r20, 0x08	; 8
    17d6:	6a e9       	ldi	r22, 0x9A	; 154
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	88 ec       	ldi	r24, 0xC8	; 200
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    17e2:	08 95       	ret
    17e4:	44 e0       	ldi	r20, 0x04	; 4
    17e6:	63 ea       	ldi	r22, 0xA3	; 163
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    17f2:	08 95       	ret
    17f4:	43 e0       	ldi	r20, 0x03	; 3
    17f6:	68 ea       	ldi	r22, 0xA8	; 168
    17f8:	71 e0       	ldi	r23, 0x01	; 1
    17fa:	88 ec       	ldi	r24, 0xC8	; 200
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1802:	08 95       	ret
    1804:	4c e0       	ldi	r20, 0x0C	; 12
    1806:	6c ea       	ldi	r22, 0xAC	; 172
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	88 ec       	ldi	r24, 0xC8	; 200
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1812:	08 95       	ret
    1814:	45 e0       	ldi	r20, 0x05	; 5
    1816:	69 eb       	ldi	r22, 0xB9	; 185
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	88 ec       	ldi	r24, 0xC8	; 200
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1822:	08 95       	ret
    1824:	45 e0       	ldi	r20, 0x05	; 5
    1826:	6f eb       	ldi	r22, 0xBF	; 191
    1828:	71 e0       	ldi	r23, 0x01	; 1
    182a:	88 ec       	ldi	r24, 0xC8	; 200
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1832:	08 95       	ret
    1834:	46 e0       	ldi	r20, 0x06	; 6
    1836:	65 ec       	ldi	r22, 0xC5	; 197
    1838:	71 e0       	ldi	r23, 0x01	; 1
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1842:	08 95       	ret
    1844:	46 e0       	ldi	r20, 0x06	; 6
    1846:	6c ec       	ldi	r22, 0xCC	; 204
    1848:	71 e0       	ldi	r23, 0x01	; 1
    184a:	88 ec       	ldi	r24, 0xC8	; 200
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1852:	08 95       	ret
    1854:	46 e0       	ldi	r20, 0x06	; 6
    1856:	63 ed       	ldi	r22, 0xD3	; 211
    1858:	71 e0       	ldi	r23, 0x01	; 1
    185a:	88 ec       	ldi	r24, 0xC8	; 200
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1862:	08 95       	ret
    1864:	4a e0       	ldi	r20, 0x0A	; 10
    1866:	6a ed       	ldi	r22, 0xDA	; 218
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1872:	08 95       	ret
    1874:	46 e0       	ldi	r20, 0x06	; 6
    1876:	65 ee       	ldi	r22, 0xE5	; 229
    1878:	71 e0       	ldi	r23, 0x01	; 1
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1882:	08 95       	ret
    1884:	46 e0       	ldi	r20, 0x06	; 6
    1886:	6c ee       	ldi	r22, 0xEC	; 236
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    1892:	08 95       	ret
    1894:	4b e0       	ldi	r20, 0x0B	; 11
    1896:	63 ef       	ldi	r22, 0xF3	; 243
    1898:	71 e0       	ldi	r23, 0x01	; 1
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_transmit_string>
    18a2:	08 95       	ret

000018a4 <UART_init>:
    18a4:	fc 01       	movw	r30, r24
    18a6:	15 82       	std	Z+5, r1	; 0x05
    18a8:	87 e6       	ldi	r24, 0x67	; 103
    18aa:	84 83       	std	Z+4, r24	; 0x04
    18ac:	10 82       	st	Z, r1
    18ae:	12 82       	std	Z+2, r1	; 0x02
    18b0:	86 e0       	ldi	r24, 0x06	; 6
    18b2:	82 83       	std	Z+2, r24	; 0x02
    18b4:	11 82       	std	Z+1, r1	; 0x01
    18b6:	88 e1       	ldi	r24, 0x18	; 24
    18b8:	81 83       	std	Z+1, r24	; 0x01
    18ba:	08 95       	ret

000018bc <UART_transmit>:
    18bc:	fc 01       	movw	r30, r24
    18be:	90 81       	ld	r25, Z
    18c0:	95 ff       	sbrs	r25, 5
    18c2:	fd cf       	rjmp	.-6      	; 0x18be <UART_transmit+0x2>
    18c4:	66 83       	std	Z+6, r22	; 0x06
    18c6:	08 95       	ret

000018c8 <UART_receive>:
    18c8:	fc 01       	movw	r30, r24
    18ca:	90 81       	ld	r25, Z
    18cc:	99 23       	and	r25, r25
    18ce:	ec f7       	brge	.-6      	; 0x18ca <UART_receive+0x2>
    18d0:	86 81       	ldd	r24, Z+6	; 0x06
    18d2:	08 95       	ret

000018d4 <export_print_buffer>:
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	08 95       	ret

000018da <copy_string_to_buffer>:
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	dc 01       	movw	r26, r24
    18e0:	41 11       	cpse	r20, r1
    18e2:	1a c0       	rjmp	.+52     	; 0x1918 <copy_string_to_buffer+0x3e>
    18e4:	24 2f       	mov	r18, r20
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	fd 01       	movw	r30, r26
    18ea:	e2 0f       	add	r30, r18
    18ec:	f3 1f       	adc	r31, r19
    18ee:	e4 91       	lpm	r30, Z
    18f0:	eb 01       	movw	r28, r22
    18f2:	c2 0f       	add	r28, r18
    18f4:	d3 1f       	adc	r29, r19
    18f6:	e8 83       	st	Y, r30
    18f8:	4f 5f       	subi	r20, 0xFF	; 255
    18fa:	e1 11       	cpse	r30, r1
    18fc:	f3 cf       	rjmp	.-26     	; 0x18e4 <copy_string_to_buffer+0xa>
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <copy_string_to_buffer+0x44>
    1900:	29 2f       	mov	r18, r25
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	fd 01       	movw	r30, r26
    1906:	e2 0f       	add	r30, r18
    1908:	f3 1f       	adc	r31, r19
    190a:	e4 91       	lpm	r30, Z
    190c:	eb 01       	movw	r28, r22
    190e:	c2 0f       	add	r28, r18
    1910:	d3 1f       	adc	r29, r19
    1912:	e8 83       	st	Y, r30
    1914:	9f 5f       	subi	r25, 0xFF	; 255
    1916:	01 c0       	rjmp	.+2      	; 0x191a <copy_string_to_buffer+0x40>
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	94 17       	cp	r25, r20
    191c:	88 f3       	brcs	.-30     	; 0x1900 <copy_string_to_buffer+0x26>
    191e:	84 2f       	mov	r24, r20
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <UART_transmit_string>:
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	7c 01       	movw	r14, r24
    1934:	8b 01       	movw	r16, r22
    1936:	d4 2f       	mov	r29, r20
    1938:	41 11       	cpse	r20, r1
    193a:	18 c0       	rjmp	.+48     	; 0x196c <UART_transmit_string+0x46>
    193c:	fb 01       	movw	r30, r22
    193e:	60 81       	ld	r22, Z
    1940:	c0 e0       	ldi	r28, 0x00	; 0
    1942:	08 c0       	rjmp	.+16     	; 0x1954 <UART_transmit_string+0x2e>
    1944:	c7 01       	movw	r24, r14
    1946:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
    194a:	cf 5f       	subi	r28, 0xFF	; 255
    194c:	f8 01       	movw	r30, r16
    194e:	ec 0f       	add	r30, r28
    1950:	f1 1d       	adc	r31, r1
    1952:	60 81       	ld	r22, Z
    1954:	61 11       	cpse	r22, r1
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <UART_transmit_string+0x1e>
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <UART_transmit_string+0x4c>
    195a:	f8 01       	movw	r30, r16
    195c:	ec 0f       	add	r30, r28
    195e:	f1 1d       	adc	r31, r1
    1960:	60 81       	ld	r22, Z
    1962:	c7 01       	movw	r24, r14
    1964:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <UART_transmit>
    1968:	cf 5f       	subi	r28, 0xFF	; 255
    196a:	01 c0       	rjmp	.+2      	; 0x196e <UART_transmit_string+0x48>
    196c:	c0 e0       	ldi	r28, 0x00	; 0
    196e:	cd 17       	cp	r28, r29
    1970:	a0 f3       	brcs	.-24     	; 0x195a <UART_transmit_string+0x34>
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	08 95       	ret

00001980 <__mulsi3>:
    1980:	db 01       	movw	r26, r22
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__muluhisi3>
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	a2 9f       	mul	r26, r18
    1990:	80 0d       	add	r24, r0
    1992:	91 1d       	adc	r25, r1
    1994:	a3 9f       	mul	r26, r19
    1996:	90 0d       	add	r25, r0
    1998:	b2 9f       	mul	r27, r18
    199a:	90 0d       	add	r25, r0
    199c:	11 24       	eor	r1, r1
    199e:	08 95       	ret

000019a0 <__udivmodhi4>:
    19a0:	aa 1b       	sub	r26, r26
    19a2:	bb 1b       	sub	r27, r27
    19a4:	51 e1       	ldi	r21, 0x11	; 17
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <__udivmodhi4_ep>

000019a8 <__udivmodhi4_loop>:
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	a6 17       	cp	r26, r22
    19ae:	b7 07       	cpc	r27, r23
    19b0:	10 f0       	brcs	.+4      	; 0x19b6 <__udivmodhi4_ep>
    19b2:	a6 1b       	sub	r26, r22
    19b4:	b7 0b       	sbc	r27, r23

000019b6 <__udivmodhi4_ep>:
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	5a 95       	dec	r21
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__udivmodhi4_loop>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	08 95       	ret

000019c8 <__udivmodsi4>:
    19c8:	a1 e2       	ldi	r26, 0x21	; 33
    19ca:	1a 2e       	mov	r1, r26
    19cc:	aa 1b       	sub	r26, r26
    19ce:	bb 1b       	sub	r27, r27
    19d0:	fd 01       	movw	r30, r26
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <__udivmodsi4_ep>

000019d4 <__udivmodsi4_loop>:
    19d4:	aa 1f       	adc	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	ee 1f       	adc	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	a2 17       	cp	r26, r18
    19de:	b3 07       	cpc	r27, r19
    19e0:	e4 07       	cpc	r30, r20
    19e2:	f5 07       	cpc	r31, r21
    19e4:	20 f0       	brcs	.+8      	; 0x19ee <__udivmodsi4_ep>
    19e6:	a2 1b       	sub	r26, r18
    19e8:	b3 0b       	sbc	r27, r19
    19ea:	e4 0b       	sbc	r30, r20
    19ec:	f5 0b       	sbc	r31, r21

000019ee <__udivmodsi4_ep>:
    19ee:	66 1f       	adc	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	1a 94       	dec	r1
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <__udivmodsi4_loop>
    19fa:	60 95       	com	r22
    19fc:	70 95       	com	r23
    19fe:	80 95       	com	r24
    1a00:	90 95       	com	r25
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	bd 01       	movw	r22, r26
    1a08:	cf 01       	movw	r24, r30
    1a0a:	08 95       	ret

00001a0c <__tablejump2__>:
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	05 90       	lpm	r0, Z+
    1a12:	f4 91       	lpm	r31, Z
    1a14:	e0 2d       	mov	r30, r0
    1a16:	09 94       	ijmp

00001a18 <__muluhisi3>:
    1a18:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__umulhisi3>
    1a1c:	a5 9f       	mul	r26, r21
    1a1e:	90 0d       	add	r25, r0
    1a20:	b4 9f       	mul	r27, r20
    1a22:	90 0d       	add	r25, r0
    1a24:	a4 9f       	mul	r26, r20
    1a26:	80 0d       	add	r24, r0
    1a28:	91 1d       	adc	r25, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	08 95       	ret

00001a2e <__umulhisi3>:
    1a2e:	a2 9f       	mul	r26, r18
    1a30:	b0 01       	movw	r22, r0
    1a32:	b3 9f       	mul	r27, r19
    1a34:	c0 01       	movw	r24, r0
    1a36:	a3 9f       	mul	r26, r19
    1a38:	70 0d       	add	r23, r0
    1a3a:	81 1d       	adc	r24, r1
    1a3c:	11 24       	eor	r1, r1
    1a3e:	91 1d       	adc	r25, r1
    1a40:	b2 9f       	mul	r27, r18
    1a42:	70 0d       	add	r23, r0
    1a44:	81 1d       	adc	r24, r1
    1a46:	11 24       	eor	r1, r1
    1a48:	91 1d       	adc	r25, r1
    1a4a:	08 95       	ret

00001a4c <atol>:
    1a4c:	1f 93       	push	r17
    1a4e:	fc 01       	movw	r30, r24
    1a50:	99 27       	eor	r25, r25
    1a52:	88 27       	eor	r24, r24
    1a54:	bc 01       	movw	r22, r24
    1a56:	e8 94       	clt
    1a58:	11 91       	ld	r17, Z+
    1a5a:	10 32       	cpi	r17, 0x20	; 32
    1a5c:	e9 f3       	breq	.-6      	; 0x1a58 <atol+0xc>
    1a5e:	19 30       	cpi	r17, 0x09	; 9
    1a60:	10 f0       	brcs	.+4      	; 0x1a66 <atol+0x1a>
    1a62:	1e 30       	cpi	r17, 0x0E	; 14
    1a64:	c8 f3       	brcs	.-14     	; 0x1a58 <atol+0xc>
    1a66:	1b 32       	cpi	r17, 0x2B	; 43
    1a68:	51 f0       	breq	.+20     	; 0x1a7e <atol+0x32>
    1a6a:	1d 32       	cpi	r17, 0x2D	; 45
    1a6c:	49 f4       	brne	.+18     	; 0x1a80 <atol+0x34>
    1a6e:	68 94       	set
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <atol+0x32>
    1a72:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__mulsi_const_10>
    1a76:	61 0f       	add	r22, r17
    1a78:	71 1d       	adc	r23, r1
    1a7a:	81 1d       	adc	r24, r1
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	11 91       	ld	r17, Z+
    1a80:	10 53       	subi	r17, 0x30	; 48
    1a82:	1a 30       	cpi	r17, 0x0A	; 10
    1a84:	b0 f3       	brcs	.-20     	; 0x1a72 <atol+0x26>
    1a86:	3e f4       	brtc	.+14     	; 0x1a96 <atol+0x4a>
    1a88:	90 95       	com	r25
    1a8a:	80 95       	com	r24
    1a8c:	70 95       	com	r23
    1a8e:	61 95       	neg	r22
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	8f 4f       	sbci	r24, 0xFF	; 255
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	1f 91       	pop	r17
    1a98:	08 95       	ret

00001a9a <__mulsi_const_10>:
    1a9a:	59 2f       	mov	r21, r25
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	37 2f       	mov	r19, r23
    1aa0:	26 2f       	mov	r18, r22
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	66 0f       	add	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	62 0f       	add	r22, r18
    1ab4:	73 1f       	adc	r23, r19
    1ab6:	84 1f       	adc	r24, r20
    1ab8:	95 1f       	adc	r25, r21
    1aba:	66 0f       	add	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	08 95       	ret

00001ac4 <sprintf>:
    1ac4:	ae e0       	ldi	r26, 0x0E	; 14
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e6       	ldi	r30, 0x68	; 104
    1aca:	fd e0       	ldi	r31, 0x0D	; 13
    1acc:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__prologue_saves__+0x1c>
    1ad0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ad2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ad4:	86 e0       	ldi	r24, 0x06	; 6
    1ad6:	8c 83       	std	Y+4, r24	; 0x04
    1ad8:	1a 83       	std	Y+2, r17	; 0x02
    1ada:	09 83       	std	Y+1, r16	; 0x01
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	9f e7       	ldi	r25, 0x7F	; 127
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	ae 01       	movw	r20, r28
    1ae6:	47 5e       	subi	r20, 0xE7	; 231
    1ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aea:	6f 89       	ldd	r22, Y+23	; 0x17
    1aec:	78 8d       	ldd	r23, Y+24	; 0x18
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vfprintf>
    1af6:	ef 81       	ldd	r30, Y+7	; 0x07
    1af8:	f8 85       	ldd	r31, Y+8	; 0x08
    1afa:	e0 0f       	add	r30, r16
    1afc:	f1 1f       	adc	r31, r17
    1afe:	10 82       	st	Z, r1
    1b00:	2e 96       	adiw	r28, 0x0e	; 14
    1b02:	e4 e0       	ldi	r30, 0x04	; 4
    1b04:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__epilogue_restores__+0x1c>

00001b08 <vfprintf>:
    1b08:	ab e0       	ldi	r26, 0x0B	; 11
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e8       	ldi	r30, 0x8A	; 138
    1b0e:	fd e0       	ldi	r31, 0x0D	; 13
    1b10:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__>
    1b14:	6c 01       	movw	r12, r24
    1b16:	7b 01       	movw	r14, r22
    1b18:	8a 01       	movw	r16, r20
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	17 82       	std	Z+7, r1	; 0x07
    1b1e:	16 82       	std	Z+6, r1	; 0x06
    1b20:	83 81       	ldd	r24, Z+3	; 0x03
    1b22:	81 ff       	sbrs	r24, 1
    1b24:	cc c1       	rjmp	.+920    	; 0x1ebe <vfprintf+0x3b6>
    1b26:	ce 01       	movw	r24, r28
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	3c 01       	movw	r6, r24
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	f7 01       	movw	r30, r14
    1b32:	93 fd       	sbrc	r25, 3
    1b34:	85 91       	lpm	r24, Z+
    1b36:	93 ff       	sbrs	r25, 3
    1b38:	81 91       	ld	r24, Z+
    1b3a:	7f 01       	movw	r14, r30
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <vfprintf+0x3a>
    1b40:	ba c1       	rjmp	.+884    	; 0x1eb6 <vfprintf+0x3ae>
    1b42:	85 32       	cpi	r24, 0x25	; 37
    1b44:	39 f4       	brne	.+14     	; 0x1b54 <vfprintf+0x4c>
    1b46:	93 fd       	sbrc	r25, 3
    1b48:	85 91       	lpm	r24, Z+
    1b4a:	93 ff       	sbrs	r25, 3
    1b4c:	81 91       	ld	r24, Z+
    1b4e:	7f 01       	movw	r14, r30
    1b50:	85 32       	cpi	r24, 0x25	; 37
    1b52:	29 f4       	brne	.+10     	; 0x1b5e <vfprintf+0x56>
    1b54:	b6 01       	movw	r22, r12
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1b5c:	e7 cf       	rjmp	.-50     	; 0x1b2c <vfprintf+0x24>
    1b5e:	91 2c       	mov	r9, r1
    1b60:	21 2c       	mov	r2, r1
    1b62:	31 2c       	mov	r3, r1
    1b64:	ff e1       	ldi	r31, 0x1F	; 31
    1b66:	f3 15       	cp	r31, r3
    1b68:	d8 f0       	brcs	.+54     	; 0x1ba0 <vfprintf+0x98>
    1b6a:	8b 32       	cpi	r24, 0x2B	; 43
    1b6c:	79 f0       	breq	.+30     	; 0x1b8c <vfprintf+0x84>
    1b6e:	38 f4       	brcc	.+14     	; 0x1b7e <vfprintf+0x76>
    1b70:	80 32       	cpi	r24, 0x20	; 32
    1b72:	79 f0       	breq	.+30     	; 0x1b92 <vfprintf+0x8a>
    1b74:	83 32       	cpi	r24, 0x23	; 35
    1b76:	a1 f4       	brne	.+40     	; 0x1ba0 <vfprintf+0x98>
    1b78:	23 2d       	mov	r18, r3
    1b7a:	20 61       	ori	r18, 0x10	; 16
    1b7c:	1d c0       	rjmp	.+58     	; 0x1bb8 <vfprintf+0xb0>
    1b7e:	8d 32       	cpi	r24, 0x2D	; 45
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <vfprintf+0x92>
    1b82:	80 33       	cpi	r24, 0x30	; 48
    1b84:	69 f4       	brne	.+26     	; 0x1ba0 <vfprintf+0x98>
    1b86:	23 2d       	mov	r18, r3
    1b88:	21 60       	ori	r18, 0x01	; 1
    1b8a:	16 c0       	rjmp	.+44     	; 0x1bb8 <vfprintf+0xb0>
    1b8c:	83 2d       	mov	r24, r3
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	38 2e       	mov	r3, r24
    1b92:	e3 2d       	mov	r30, r3
    1b94:	e4 60       	ori	r30, 0x04	; 4
    1b96:	3e 2e       	mov	r3, r30
    1b98:	2a c0       	rjmp	.+84     	; 0x1bee <vfprintf+0xe6>
    1b9a:	f3 2d       	mov	r31, r3
    1b9c:	f8 60       	ori	r31, 0x08	; 8
    1b9e:	1d c0       	rjmp	.+58     	; 0x1bda <vfprintf+0xd2>
    1ba0:	37 fc       	sbrc	r3, 7
    1ba2:	2d c0       	rjmp	.+90     	; 0x1bfe <vfprintf+0xf6>
    1ba4:	20 ed       	ldi	r18, 0xD0	; 208
    1ba6:	28 0f       	add	r18, r24
    1ba8:	2a 30       	cpi	r18, 0x0A	; 10
    1baa:	40 f0       	brcs	.+16     	; 0x1bbc <vfprintf+0xb4>
    1bac:	8e 32       	cpi	r24, 0x2E	; 46
    1bae:	b9 f4       	brne	.+46     	; 0x1bde <vfprintf+0xd6>
    1bb0:	36 fc       	sbrc	r3, 6
    1bb2:	81 c1       	rjmp	.+770    	; 0x1eb6 <vfprintf+0x3ae>
    1bb4:	23 2d       	mov	r18, r3
    1bb6:	20 64       	ori	r18, 0x40	; 64
    1bb8:	32 2e       	mov	r3, r18
    1bba:	19 c0       	rjmp	.+50     	; 0x1bee <vfprintf+0xe6>
    1bbc:	36 fe       	sbrs	r3, 6
    1bbe:	06 c0       	rjmp	.+12     	; 0x1bcc <vfprintf+0xc4>
    1bc0:	8a e0       	ldi	r24, 0x0A	; 10
    1bc2:	98 9e       	mul	r9, r24
    1bc4:	20 0d       	add	r18, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	92 2e       	mov	r9, r18
    1bca:	11 c0       	rjmp	.+34     	; 0x1bee <vfprintf+0xe6>
    1bcc:	ea e0       	ldi	r30, 0x0A	; 10
    1bce:	2e 9e       	mul	r2, r30
    1bd0:	20 0d       	add	r18, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	22 2e       	mov	r2, r18
    1bd6:	f3 2d       	mov	r31, r3
    1bd8:	f0 62       	ori	r31, 0x20	; 32
    1bda:	3f 2e       	mov	r3, r31
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <vfprintf+0xe6>
    1bde:	8c 36       	cpi	r24, 0x6C	; 108
    1be0:	21 f4       	brne	.+8      	; 0x1bea <vfprintf+0xe2>
    1be2:	83 2d       	mov	r24, r3
    1be4:	80 68       	ori	r24, 0x80	; 128
    1be6:	38 2e       	mov	r3, r24
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <vfprintf+0xe6>
    1bea:	88 36       	cpi	r24, 0x68	; 104
    1bec:	41 f4       	brne	.+16     	; 0x1bfe <vfprintf+0xf6>
    1bee:	f7 01       	movw	r30, r14
    1bf0:	93 fd       	sbrc	r25, 3
    1bf2:	85 91       	lpm	r24, Z+
    1bf4:	93 ff       	sbrs	r25, 3
    1bf6:	81 91       	ld	r24, Z+
    1bf8:	7f 01       	movw	r14, r30
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	b3 cf       	rjmp	.-154    	; 0x1b64 <vfprintf+0x5c>
    1bfe:	98 2f       	mov	r25, r24
    1c00:	9f 7d       	andi	r25, 0xDF	; 223
    1c02:	95 54       	subi	r25, 0x45	; 69
    1c04:	93 30       	cpi	r25, 0x03	; 3
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <vfprintf+0x10a>
    1c08:	0c 5f       	subi	r16, 0xFC	; 252
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	9f e3       	ldi	r25, 0x3F	; 63
    1c0e:	99 83       	std	Y+1, r25	; 0x01
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <vfprintf+0x124>
    1c12:	83 36       	cpi	r24, 0x63	; 99
    1c14:	31 f0       	breq	.+12     	; 0x1c22 <vfprintf+0x11a>
    1c16:	83 37       	cpi	r24, 0x73	; 115
    1c18:	71 f0       	breq	.+28     	; 0x1c36 <vfprintf+0x12e>
    1c1a:	83 35       	cpi	r24, 0x53	; 83
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <vfprintf+0x118>
    1c1e:	59 c0       	rjmp	.+178    	; 0x1cd2 <vfprintf+0x1ca>
    1c20:	21 c0       	rjmp	.+66     	; 0x1c64 <vfprintf+0x15c>
    1c22:	f8 01       	movw	r30, r16
    1c24:	80 81       	ld	r24, Z
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	0e 5f       	subi	r16, 0xFE	; 254
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	88 24       	eor	r8, r8
    1c2e:	83 94       	inc	r8
    1c30:	91 2c       	mov	r9, r1
    1c32:	53 01       	movw	r10, r6
    1c34:	13 c0       	rjmp	.+38     	; 0x1c5c <vfprintf+0x154>
    1c36:	28 01       	movw	r4, r16
    1c38:	f2 e0       	ldi	r31, 0x02	; 2
    1c3a:	4f 0e       	add	r4, r31
    1c3c:	51 1c       	adc	r5, r1
    1c3e:	f8 01       	movw	r30, r16
    1c40:	a0 80       	ld	r10, Z
    1c42:	b1 80       	ldd	r11, Z+1	; 0x01
    1c44:	36 fe       	sbrs	r3, 6
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <vfprintf+0x146>
    1c48:	69 2d       	mov	r22, r9
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfprintf+0x14a>
    1c4e:	6f ef       	ldi	r22, 0xFF	; 255
    1c50:	7f ef       	ldi	r23, 0xFF	; 255
    1c52:	c5 01       	movw	r24, r10
    1c54:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <strnlen>
    1c58:	4c 01       	movw	r8, r24
    1c5a:	82 01       	movw	r16, r4
    1c5c:	f3 2d       	mov	r31, r3
    1c5e:	ff 77       	andi	r31, 0x7F	; 127
    1c60:	3f 2e       	mov	r3, r31
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <vfprintf+0x188>
    1c64:	28 01       	movw	r4, r16
    1c66:	22 e0       	ldi	r18, 0x02	; 2
    1c68:	42 0e       	add	r4, r18
    1c6a:	51 1c       	adc	r5, r1
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	a0 80       	ld	r10, Z
    1c70:	b1 80       	ldd	r11, Z+1	; 0x01
    1c72:	36 fe       	sbrs	r3, 6
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <vfprintf+0x174>
    1c76:	69 2d       	mov	r22, r9
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0x178>
    1c7c:	6f ef       	ldi	r22, 0xFF	; 255
    1c7e:	7f ef       	ldi	r23, 0xFF	; 255
    1c80:	c5 01       	movw	r24, r10
    1c82:	0e 94 65 0f 	call	0x1eca	; 0x1eca <strnlen_P>
    1c86:	4c 01       	movw	r8, r24
    1c88:	f3 2d       	mov	r31, r3
    1c8a:	f0 68       	ori	r31, 0x80	; 128
    1c8c:	3f 2e       	mov	r3, r31
    1c8e:	82 01       	movw	r16, r4
    1c90:	33 fc       	sbrc	r3, 3
    1c92:	1b c0       	rjmp	.+54     	; 0x1cca <vfprintf+0x1c2>
    1c94:	82 2d       	mov	r24, r2
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	88 16       	cp	r8, r24
    1c9a:	99 06       	cpc	r9, r25
    1c9c:	b0 f4       	brcc	.+44     	; 0x1cca <vfprintf+0x1c2>
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	80 e2       	ldi	r24, 0x20	; 32
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1ca8:	2a 94       	dec	r2
    1caa:	f4 cf       	rjmp	.-24     	; 0x1c94 <vfprintf+0x18c>
    1cac:	f5 01       	movw	r30, r10
    1cae:	37 fc       	sbrc	r3, 7
    1cb0:	85 91       	lpm	r24, Z+
    1cb2:	37 fe       	sbrs	r3, 7
    1cb4:	81 91       	ld	r24, Z+
    1cb6:	5f 01       	movw	r10, r30
    1cb8:	b6 01       	movw	r22, r12
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1cc0:	21 10       	cpse	r2, r1
    1cc2:	2a 94       	dec	r2
    1cc4:	21 e0       	ldi	r18, 0x01	; 1
    1cc6:	82 1a       	sub	r8, r18
    1cc8:	91 08       	sbc	r9, r1
    1cca:	81 14       	cp	r8, r1
    1ccc:	91 04       	cpc	r9, r1
    1cce:	71 f7       	brne	.-36     	; 0x1cac <vfprintf+0x1a4>
    1cd0:	e8 c0       	rjmp	.+464    	; 0x1ea2 <vfprintf+0x39a>
    1cd2:	84 36       	cpi	r24, 0x64	; 100
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <vfprintf+0x1d2>
    1cd6:	89 36       	cpi	r24, 0x69	; 105
    1cd8:	41 f5       	brne	.+80     	; 0x1d2a <vfprintf+0x222>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	37 fe       	sbrs	r3, 7
    1cde:	07 c0       	rjmp	.+14     	; 0x1cee <vfprintf+0x1e6>
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0c 5f       	subi	r16, 0xFC	; 252
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <vfprintf+0x1f6>
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	07 2e       	mov	r0, r23
    1cf4:	00 0c       	add	r0, r0
    1cf6:	88 0b       	sbc	r24, r24
    1cf8:	99 0b       	sbc	r25, r25
    1cfa:	0e 5f       	subi	r16, 0xFE	; 254
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	f3 2d       	mov	r31, r3
    1d00:	ff 76       	andi	r31, 0x6F	; 111
    1d02:	3f 2e       	mov	r3, r31
    1d04:	97 ff       	sbrs	r25, 7
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <vfprintf+0x212>
    1d08:	90 95       	com	r25
    1d0a:	80 95       	com	r24
    1d0c:	70 95       	com	r23
    1d0e:	61 95       	neg	r22
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	8f 4f       	sbci	r24, 0xFF	; 255
    1d14:	9f 4f       	sbci	r25, 0xFF	; 255
    1d16:	f0 68       	ori	r31, 0x80	; 128
    1d18:	3f 2e       	mov	r3, r31
    1d1a:	2a e0       	ldi	r18, 0x0A	; 10
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	a3 01       	movw	r20, r6
    1d20:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__ultoa_invert>
    1d24:	88 2e       	mov	r8, r24
    1d26:	86 18       	sub	r8, r6
    1d28:	45 c0       	rjmp	.+138    	; 0x1db4 <vfprintf+0x2ac>
    1d2a:	85 37       	cpi	r24, 0x75	; 117
    1d2c:	31 f4       	brne	.+12     	; 0x1d3a <vfprintf+0x232>
    1d2e:	23 2d       	mov	r18, r3
    1d30:	2f 7e       	andi	r18, 0xEF	; 239
    1d32:	b2 2e       	mov	r11, r18
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	25 c0       	rjmp	.+74     	; 0x1d84 <vfprintf+0x27c>
    1d3a:	93 2d       	mov	r25, r3
    1d3c:	99 7f       	andi	r25, 0xF9	; 249
    1d3e:	b9 2e       	mov	r11, r25
    1d40:	8f 36       	cpi	r24, 0x6F	; 111
    1d42:	c1 f0       	breq	.+48     	; 0x1d74 <vfprintf+0x26c>
    1d44:	18 f4       	brcc	.+6      	; 0x1d4c <vfprintf+0x244>
    1d46:	88 35       	cpi	r24, 0x58	; 88
    1d48:	79 f0       	breq	.+30     	; 0x1d68 <vfprintf+0x260>
    1d4a:	b5 c0       	rjmp	.+362    	; 0x1eb6 <vfprintf+0x3ae>
    1d4c:	80 37       	cpi	r24, 0x70	; 112
    1d4e:	19 f0       	breq	.+6      	; 0x1d56 <vfprintf+0x24e>
    1d50:	88 37       	cpi	r24, 0x78	; 120
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <vfprintf+0x254>
    1d54:	b0 c0       	rjmp	.+352    	; 0x1eb6 <vfprintf+0x3ae>
    1d56:	e9 2f       	mov	r30, r25
    1d58:	e0 61       	ori	r30, 0x10	; 16
    1d5a:	be 2e       	mov	r11, r30
    1d5c:	b4 fe       	sbrs	r11, 4
    1d5e:	0d c0       	rjmp	.+26     	; 0x1d7a <vfprintf+0x272>
    1d60:	fb 2d       	mov	r31, r11
    1d62:	f4 60       	ori	r31, 0x04	; 4
    1d64:	bf 2e       	mov	r11, r31
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <vfprintf+0x272>
    1d68:	34 fe       	sbrs	r3, 4
    1d6a:	0a c0       	rjmp	.+20     	; 0x1d80 <vfprintf+0x278>
    1d6c:	29 2f       	mov	r18, r25
    1d6e:	26 60       	ori	r18, 0x06	; 6
    1d70:	b2 2e       	mov	r11, r18
    1d72:	06 c0       	rjmp	.+12     	; 0x1d80 <vfprintf+0x278>
    1d74:	28 e0       	ldi	r18, 0x08	; 8
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <vfprintf+0x27c>
    1d7a:	20 e1       	ldi	r18, 0x10	; 16
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <vfprintf+0x27c>
    1d80:	20 e1       	ldi	r18, 0x10	; 16
    1d82:	32 e0       	ldi	r19, 0x02	; 2
    1d84:	f8 01       	movw	r30, r16
    1d86:	b7 fe       	sbrs	r11, 7
    1d88:	07 c0       	rjmp	.+14     	; 0x1d98 <vfprintf+0x290>
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	0c 5f       	subi	r16, 0xFC	; 252
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <vfprintf+0x29c>
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 5f       	subi	r16, 0xFE	; 254
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	a3 01       	movw	r20, r6
    1da6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__ultoa_invert>
    1daa:	88 2e       	mov	r8, r24
    1dac:	86 18       	sub	r8, r6
    1dae:	fb 2d       	mov	r31, r11
    1db0:	ff 77       	andi	r31, 0x7F	; 127
    1db2:	3f 2e       	mov	r3, r31
    1db4:	36 fe       	sbrs	r3, 6
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <vfprintf+0x2ca>
    1db8:	23 2d       	mov	r18, r3
    1dba:	2e 7f       	andi	r18, 0xFE	; 254
    1dbc:	a2 2e       	mov	r10, r18
    1dbe:	89 14       	cp	r8, r9
    1dc0:	58 f4       	brcc	.+22     	; 0x1dd8 <vfprintf+0x2d0>
    1dc2:	34 fe       	sbrs	r3, 4
    1dc4:	0b c0       	rjmp	.+22     	; 0x1ddc <vfprintf+0x2d4>
    1dc6:	32 fc       	sbrc	r3, 2
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <vfprintf+0x2d4>
    1dca:	83 2d       	mov	r24, r3
    1dcc:	8e 7e       	andi	r24, 0xEE	; 238
    1dce:	a8 2e       	mov	r10, r24
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <vfprintf+0x2d4>
    1dd2:	b8 2c       	mov	r11, r8
    1dd4:	a3 2c       	mov	r10, r3
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <vfprintf+0x2d6>
    1dd8:	b8 2c       	mov	r11, r8
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <vfprintf+0x2d6>
    1ddc:	b9 2c       	mov	r11, r9
    1dde:	a4 fe       	sbrs	r10, 4
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <vfprintf+0x2f8>
    1de2:	fe 01       	movw	r30, r28
    1de4:	e8 0d       	add	r30, r8
    1de6:	f1 1d       	adc	r31, r1
    1de8:	80 81       	ld	r24, Z
    1dea:	80 33       	cpi	r24, 0x30	; 48
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <vfprintf+0x2ee>
    1dee:	9a 2d       	mov	r25, r10
    1df0:	99 7e       	andi	r25, 0xE9	; 233
    1df2:	a9 2e       	mov	r10, r25
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <vfprintf+0x300>
    1df6:	a2 fe       	sbrs	r10, 2
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0x2fe>
    1dfa:	b3 94       	inc	r11
    1dfc:	b3 94       	inc	r11
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <vfprintf+0x300>
    1e00:	8a 2d       	mov	r24, r10
    1e02:	86 78       	andi	r24, 0x86	; 134
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <vfprintf+0x300>
    1e06:	b3 94       	inc	r11
    1e08:	a3 fc       	sbrc	r10, 3
    1e0a:	11 c0       	rjmp	.+34     	; 0x1e2e <vfprintf+0x326>
    1e0c:	a0 fe       	sbrs	r10, 0
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <vfprintf+0x314>
    1e10:	b2 14       	cp	r11, r2
    1e12:	88 f4       	brcc	.+34     	; 0x1e36 <vfprintf+0x32e>
    1e14:	28 0c       	add	r2, r8
    1e16:	92 2c       	mov	r9, r2
    1e18:	9b 18       	sub	r9, r11
    1e1a:	0e c0       	rjmp	.+28     	; 0x1e38 <vfprintf+0x330>
    1e1c:	b2 14       	cp	r11, r2
    1e1e:	60 f4       	brcc	.+24     	; 0x1e38 <vfprintf+0x330>
    1e20:	b6 01       	movw	r22, r12
    1e22:	80 e2       	ldi	r24, 0x20	; 32
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1e2a:	b3 94       	inc	r11
    1e2c:	f7 cf       	rjmp	.-18     	; 0x1e1c <vfprintf+0x314>
    1e2e:	b2 14       	cp	r11, r2
    1e30:	18 f4       	brcc	.+6      	; 0x1e38 <vfprintf+0x330>
    1e32:	2b 18       	sub	r2, r11
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vfprintf+0x332>
    1e36:	98 2c       	mov	r9, r8
    1e38:	21 2c       	mov	r2, r1
    1e3a:	a4 fe       	sbrs	r10, 4
    1e3c:	10 c0       	rjmp	.+32     	; 0x1e5e <vfprintf+0x356>
    1e3e:	b6 01       	movw	r22, r12
    1e40:	80 e3       	ldi	r24, 0x30	; 48
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1e48:	a2 fe       	sbrs	r10, 2
    1e4a:	17 c0       	rjmp	.+46     	; 0x1e7a <vfprintf+0x372>
    1e4c:	a1 fc       	sbrc	r10, 1
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <vfprintf+0x34e>
    1e50:	88 e7       	ldi	r24, 0x78	; 120
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x352>
    1e56:	88 e5       	ldi	r24, 0x58	; 88
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	b6 01       	movw	r22, r12
    1e5c:	0c c0       	rjmp	.+24     	; 0x1e76 <vfprintf+0x36e>
    1e5e:	8a 2d       	mov	r24, r10
    1e60:	86 78       	andi	r24, 0x86	; 134
    1e62:	59 f0       	breq	.+22     	; 0x1e7a <vfprintf+0x372>
    1e64:	a1 fe       	sbrs	r10, 1
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <vfprintf+0x364>
    1e68:	8b e2       	ldi	r24, 0x2B	; 43
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <vfprintf+0x366>
    1e6c:	80 e2       	ldi	r24, 0x20	; 32
    1e6e:	a7 fc       	sbrc	r10, 7
    1e70:	8d e2       	ldi	r24, 0x2D	; 45
    1e72:	b6 01       	movw	r22, r12
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1e7a:	89 14       	cp	r8, r9
    1e7c:	38 f4       	brcc	.+14     	; 0x1e8c <vfprintf+0x384>
    1e7e:	b6 01       	movw	r22, r12
    1e80:	80 e3       	ldi	r24, 0x30	; 48
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1e88:	9a 94       	dec	r9
    1e8a:	f7 cf       	rjmp	.-18     	; 0x1e7a <vfprintf+0x372>
    1e8c:	8a 94       	dec	r8
    1e8e:	f3 01       	movw	r30, r6
    1e90:	e8 0d       	add	r30, r8
    1e92:	f1 1d       	adc	r31, r1
    1e94:	80 81       	ld	r24, Z
    1e96:	b6 01       	movw	r22, r12
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1e9e:	81 10       	cpse	r8, r1
    1ea0:	f5 cf       	rjmp	.-22     	; 0x1e8c <vfprintf+0x384>
    1ea2:	22 20       	and	r2, r2
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <vfprintf+0x3a0>
    1ea6:	42 ce       	rjmp	.-892    	; 0x1b2c <vfprintf+0x24>
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	80 e2       	ldi	r24, 0x20	; 32
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <fputc>
    1eb2:	2a 94       	dec	r2
    1eb4:	f6 cf       	rjmp	.-20     	; 0x1ea2 <vfprintf+0x39a>
    1eb6:	f6 01       	movw	r30, r12
    1eb8:	86 81       	ldd	r24, Z+6	; 0x06
    1eba:	97 81       	ldd	r25, Z+7	; 0x07
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <vfprintf+0x3ba>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	2b 96       	adiw	r28, 0x0b	; 11
    1ec4:	e2 e1       	ldi	r30, 0x12	; 18
    1ec6:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__>

00001eca <strnlen_P>:
    1eca:	fc 01       	movw	r30, r24
    1ecc:	05 90       	lpm	r0, Z+
    1ece:	61 50       	subi	r22, 0x01	; 1
    1ed0:	70 40       	sbci	r23, 0x00	; 0
    1ed2:	01 10       	cpse	r0, r1
    1ed4:	d8 f7       	brcc	.-10     	; 0x1ecc <strnlen_P+0x2>
    1ed6:	80 95       	com	r24
    1ed8:	90 95       	com	r25
    1eda:	8e 0f       	add	r24, r30
    1edc:	9f 1f       	adc	r25, r31
    1ede:	08 95       	ret

00001ee0 <strnlen>:
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	61 50       	subi	r22, 0x01	; 1
    1ee4:	70 40       	sbci	r23, 0x00	; 0
    1ee6:	01 90       	ld	r0, Z+
    1ee8:	01 10       	cpse	r0, r1
    1eea:	d8 f7       	brcc	.-10     	; 0x1ee2 <strnlen+0x2>
    1eec:	80 95       	com	r24
    1eee:	90 95       	com	r25
    1ef0:	8e 0f       	add	r24, r30
    1ef2:	9f 1f       	adc	r25, r31
    1ef4:	08 95       	ret

00001ef6 <fputc>:
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	fb 01       	movw	r30, r22
    1f00:	23 81       	ldd	r18, Z+3	; 0x03
    1f02:	21 fd       	sbrc	r18, 1
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <fputc+0x16>
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	9f ef       	ldi	r25, 0xFF	; 255
    1f0a:	2c c0       	rjmp	.+88     	; 0x1f64 <fputc+0x6e>
    1f0c:	22 ff       	sbrs	r18, 2
    1f0e:	16 c0       	rjmp	.+44     	; 0x1f3c <fputc+0x46>
    1f10:	46 81       	ldd	r20, Z+6	; 0x06
    1f12:	57 81       	ldd	r21, Z+7	; 0x07
    1f14:	24 81       	ldd	r18, Z+4	; 0x04
    1f16:	35 81       	ldd	r19, Z+5	; 0x05
    1f18:	42 17       	cp	r20, r18
    1f1a:	53 07       	cpc	r21, r19
    1f1c:	44 f4       	brge	.+16     	; 0x1f2e <fputc+0x38>
    1f1e:	a0 81       	ld	r26, Z
    1f20:	b1 81       	ldd	r27, Z+1	; 0x01
    1f22:	9d 01       	movw	r18, r26
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	31 83       	std	Z+1, r19	; 0x01
    1f2a:	20 83       	st	Z, r18
    1f2c:	8c 93       	st	X, r24
    1f2e:	26 81       	ldd	r18, Z+6	; 0x06
    1f30:	37 81       	ldd	r19, Z+7	; 0x07
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	37 83       	std	Z+7, r19	; 0x07
    1f38:	26 83       	std	Z+6, r18	; 0x06
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <fputc+0x6e>
    1f3c:	8b 01       	movw	r16, r22
    1f3e:	ec 01       	movw	r28, r24
    1f40:	fb 01       	movw	r30, r22
    1f42:	00 84       	ldd	r0, Z+8	; 0x08
    1f44:	f1 85       	ldd	r31, Z+9	; 0x09
    1f46:	e0 2d       	mov	r30, r0
    1f48:	09 95       	icall
    1f4a:	89 2b       	or	r24, r25
    1f4c:	e1 f6       	brne	.-72     	; 0x1f06 <fputc+0x10>
    1f4e:	d8 01       	movw	r26, r16
    1f50:	16 96       	adiw	r26, 0x06	; 6
    1f52:	8d 91       	ld	r24, X+
    1f54:	9c 91       	ld	r25, X
    1f56:	17 97       	sbiw	r26, 0x07	; 7
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	17 96       	adiw	r26, 0x07	; 7
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
    1f60:	16 97       	sbiw	r26, 0x06	; 6
    1f62:	ce 01       	movw	r24, r28
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <__ultoa_invert>:
    1f6e:	fa 01       	movw	r30, r20
    1f70:	aa 27       	eor	r26, r26
    1f72:	28 30       	cpi	r18, 0x08	; 8
    1f74:	51 f1       	breq	.+84     	; 0x1fca <__ultoa_invert+0x5c>
    1f76:	20 31       	cpi	r18, 0x10	; 16
    1f78:	81 f1       	breq	.+96     	; 0x1fda <__ultoa_invert+0x6c>
    1f7a:	e8 94       	clt
    1f7c:	6f 93       	push	r22
    1f7e:	6e 7f       	andi	r22, 0xFE	; 254
    1f80:	6e 5f       	subi	r22, 0xFE	; 254
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	af 4f       	sbci	r26, 0xFF	; 255
    1f8a:	b1 e0       	ldi	r27, 0x01	; 1
    1f8c:	3e d0       	rcall	.+124    	; 0x200a <__ultoa_invert+0x9c>
    1f8e:	b4 e0       	ldi	r27, 0x04	; 4
    1f90:	3c d0       	rcall	.+120    	; 0x200a <__ultoa_invert+0x9c>
    1f92:	67 0f       	add	r22, r23
    1f94:	78 1f       	adc	r23, r24
    1f96:	89 1f       	adc	r24, r25
    1f98:	9a 1f       	adc	r25, r26
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	68 0f       	add	r22, r24
    1f9e:	79 1f       	adc	r23, r25
    1fa0:	8a 1f       	adc	r24, r26
    1fa2:	91 1d       	adc	r25, r1
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	6a 0f       	add	r22, r26
    1fa8:	71 1d       	adc	r23, r1
    1faa:	81 1d       	adc	r24, r1
    1fac:	91 1d       	adc	r25, r1
    1fae:	a1 1d       	adc	r26, r1
    1fb0:	20 d0       	rcall	.+64     	; 0x1ff2 <__ultoa_invert+0x84>
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <__ultoa_invert+0x48>
    1fb4:	68 94       	set
    1fb6:	3f 91       	pop	r19
    1fb8:	2a e0       	ldi	r18, 0x0A	; 10
    1fba:	26 9f       	mul	r18, r22
    1fbc:	11 24       	eor	r1, r1
    1fbe:	30 19       	sub	r19, r0
    1fc0:	30 5d       	subi	r19, 0xD0	; 208
    1fc2:	31 93       	st	Z+, r19
    1fc4:	de f6       	brtc	.-74     	; 0x1f7c <__ultoa_invert+0xe>
    1fc6:	cf 01       	movw	r24, r30
    1fc8:	08 95       	ret
    1fca:	46 2f       	mov	r20, r22
    1fcc:	47 70       	andi	r20, 0x07	; 7
    1fce:	40 5d       	subi	r20, 0xD0	; 208
    1fd0:	41 93       	st	Z+, r20
    1fd2:	b3 e0       	ldi	r27, 0x03	; 3
    1fd4:	0f d0       	rcall	.+30     	; 0x1ff4 <__ultoa_invert+0x86>
    1fd6:	c9 f7       	brne	.-14     	; 0x1fca <__ultoa_invert+0x5c>
    1fd8:	f6 cf       	rjmp	.-20     	; 0x1fc6 <__ultoa_invert+0x58>
    1fda:	46 2f       	mov	r20, r22
    1fdc:	4f 70       	andi	r20, 0x0F	; 15
    1fde:	40 5d       	subi	r20, 0xD0	; 208
    1fe0:	4a 33       	cpi	r20, 0x3A	; 58
    1fe2:	18 f0       	brcs	.+6      	; 0x1fea <__ultoa_invert+0x7c>
    1fe4:	49 5d       	subi	r20, 0xD9	; 217
    1fe6:	31 fd       	sbrc	r19, 1
    1fe8:	40 52       	subi	r20, 0x20	; 32
    1fea:	41 93       	st	Z+, r20
    1fec:	02 d0       	rcall	.+4      	; 0x1ff2 <__ultoa_invert+0x84>
    1fee:	a9 f7       	brne	.-22     	; 0x1fda <__ultoa_invert+0x6c>
    1ff0:	ea cf       	rjmp	.-44     	; 0x1fc6 <__ultoa_invert+0x58>
    1ff2:	b4 e0       	ldi	r27, 0x04	; 4
    1ff4:	a6 95       	lsr	r26
    1ff6:	97 95       	ror	r25
    1ff8:	87 95       	ror	r24
    1ffa:	77 95       	ror	r23
    1ffc:	67 95       	ror	r22
    1ffe:	ba 95       	dec	r27
    2000:	c9 f7       	brne	.-14     	; 0x1ff4 <__ultoa_invert+0x86>
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	61 05       	cpc	r22, r1
    2006:	71 05       	cpc	r23, r1
    2008:	08 95       	ret
    200a:	9b 01       	movw	r18, r22
    200c:	ac 01       	movw	r20, r24
    200e:	0a 2e       	mov	r0, r26
    2010:	06 94       	lsr	r0
    2012:	57 95       	ror	r21
    2014:	47 95       	ror	r20
    2016:	37 95       	ror	r19
    2018:	27 95       	ror	r18
    201a:	ba 95       	dec	r27
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__ultoa_invert+0xa2>
    201e:	62 0f       	add	r22, r18
    2020:	73 1f       	adc	r23, r19
    2022:	84 1f       	adc	r24, r20
    2024:	95 1f       	adc	r25, r21
    2026:	a0 1d       	adc	r26, r0
    2028:	08 95       	ret

0000202a <__prologue_saves__>:
    202a:	2f 92       	push	r2
    202c:	3f 92       	push	r3
    202e:	4f 92       	push	r4
    2030:	5f 92       	push	r5
    2032:	6f 92       	push	r6
    2034:	7f 92       	push	r7
    2036:	8f 92       	push	r8
    2038:	9f 92       	push	r9
    203a:	af 92       	push	r10
    203c:	bf 92       	push	r11
    203e:	cf 92       	push	r12
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	ca 1b       	sub	r28, r26
    2054:	db 0b       	sbc	r29, r27
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	09 94       	ijmp

00002062 <__epilogue_restores__>:
    2062:	2a 88       	ldd	r2, Y+18	; 0x12
    2064:	39 88       	ldd	r3, Y+17	; 0x11
    2066:	48 88       	ldd	r4, Y+16	; 0x10
    2068:	5f 84       	ldd	r5, Y+15	; 0x0f
    206a:	6e 84       	ldd	r6, Y+14	; 0x0e
    206c:	7d 84       	ldd	r7, Y+13	; 0x0d
    206e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2070:	9b 84       	ldd	r9, Y+11	; 0x0b
    2072:	aa 84       	ldd	r10, Y+10	; 0x0a
    2074:	b9 84       	ldd	r11, Y+9	; 0x09
    2076:	c8 84       	ldd	r12, Y+8	; 0x08
    2078:	df 80       	ldd	r13, Y+7	; 0x07
    207a:	ee 80       	ldd	r14, Y+6	; 0x06
    207c:	fd 80       	ldd	r15, Y+5	; 0x05
    207e:	0c 81       	ldd	r16, Y+4	; 0x04
    2080:	1b 81       	ldd	r17, Y+3	; 0x03
    2082:	aa 81       	ldd	r26, Y+2	; 0x02
    2084:	b9 81       	ldd	r27, Y+1	; 0x01
    2086:	ce 0f       	add	r28, r30
    2088:	d1 1d       	adc	r29, r1
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	ed 01       	movw	r28, r26
    2096:	08 95       	ret

00002098 <_exit>:
    2098:	f8 94       	cli

0000209a <__stop_program>:
    209a:	ff cf       	rjmp	.-2      	; 0x209a <__stop_program>
