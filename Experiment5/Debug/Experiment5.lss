
Experiment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00002114  000021a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  0080020a  0080020a  000022b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041e7  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015e0  00000000  00000000  0000674f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a9f  00000000  00000000  00007d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  000097d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf6  00000000  00000000  00009ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ae0  00000000  00000000  0000abbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000d69e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	76 0c       	add	r7, r6
      ce:	7e 0c       	add	r7, r14
      d0:	6e 0c       	add	r6, r14
      d2:	66 0c       	add	r6, r6
      d4:	5e 0c       	add	r5, r14
      d6:	56 0c       	add	r5, r6
      d8:	4e 0c       	add	r4, r14
      da:	46 0c       	add	r4, r6
      dc:	3e 0c       	add	r3, r14
      de:	36 0c       	add	r3, r6
      e0:	2e 0c       	add	r2, r14
      e2:	26 0c       	add	r2, r6

000000e4 <Prnt_bytes_prnt>:
      e4:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      f4:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
     104:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
     114:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e4 e1       	ldi	r30, 0x14	; 20
     138:	f1 e2       	ldi	r31, 0x21	; 33
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	aa 30       	cpi	r26, 0x0A	; 10
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	aa e0       	ldi	r26, 0x0A	; 10
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a8 38       	cpi	r26, 0x88	; 136
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 b4 03 	call	0x768	; 0x768 <main>
     15a:	0c 94 88 10 	jmp	0x2110	; 0x2110 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <export_drive_values>:
************************************************************************/

FS_values_t * export_drive_values(void)
{
   return &Drive_values;
}
     162:	8a e5       	ldi	r24, 0x5A	; 90
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	08 95       	ret

00000168 <print_directory>:
************************************************************************/



uint16_t  print_directory(uint32_t Sector_num, uint8_t * array_in)
{ 
     168:	2f 92       	push	r2
     16a:	3f 92       	push	r3
     16c:	4f 92       	push	r4
     16e:	5f 92       	push	r5
     170:	6f 92       	push	r6
     172:	7f 92       	push	r7
     174:	8f 92       	push	r8
     176:	9f 92       	push	r9
     178:	af 92       	push	r10
     17a:	bf 92       	push	r11
     17c:	cf 92       	push	r12
     17e:	df 92       	push	r13
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	27 97       	sbiw	r28, 0x07	; 7
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	4b 01       	movw	r8, r22
     19e:	5c 01       	movw	r10, r24
     1a0:	5a 83       	std	Y+2, r21	; 0x02
     1a2:	49 83       	std	Y+1, r20	; 0x01
   uint16_t i, entries;
   uint8_t temp8, j, attr, out_val, error_flag;
   uint8_t * values;
   char *prnt_bffr;

   prnt_bffr=export_print_buffer();
     1a4:	0e 94 a6 0c 	call	0x194c	; 0x194c <export_print_buffer>
     1a8:	8c 83       	std	Y+4, r24	; 0x04
     1aa:	9d 83       	std	Y+5, r25	; 0x05
   
   values=array_in;
   entries=0;
   i=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
     1ac:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Drive_values+0x1>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	49 f4       	brne	.+18     	; 0x1c6 <print_directory+0x5e>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
     1b4:	40 90 6c 02 	lds	r4, 0x026C	; 0x80026c <Drive_values+0x12>
     1b8:	50 90 6d 02 	lds	r5, 0x026D	; 0x80026d <Drive_values+0x13>
     1bc:	60 90 6e 02 	lds	r6, 0x026E	; 0x80026e <Drive_values+0x14>
     1c0:	70 90 6f 02 	lds	r7, 0x026F	; 0x80026f <Drive_values+0x15>
     1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <print_directory+0x68>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
     1c6:	40 90 5a 02 	lds	r4, 0x025A	; 0x80025a <Drive_values>
     1ca:	51 2c       	mov	r5, r1
     1cc:	61 2c       	mov	r6, r1
     1ce:	71 2c       	mov	r7, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     1d0:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <Drive_values+0x4>
     1d4:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <Drive_values+0x5>
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	3a 81       	ldd	r19, Y+2	; 0x02
     1dc:	c5 01       	movw	r24, r10
     1de:	b4 01       	movw	r22, r8
     1e0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
   if(error_flag==no_errors)
     1e4:	81 11       	cpse	r24, r1
     1e6:	cd c0       	rjmp	.+410    	; 0x382 <print_directory+0x21a>
     1e8:	75 01       	movw	r14, r10
     1ea:	64 01       	movw	r12, r8
     1ec:	00 e0       	ldi	r16, 0x00	; 0
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	1f 82       	std	Y+7, r1	; 0x07
     1f2:	1e 82       	std	Y+6, r1	; 0x06
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
     1f4:	69 81       	ldd	r22, Y+1	; 0x01
     1f6:	7a 81       	ldd	r23, Y+2	; 0x02
     1f8:	8e 81       	ldd	r24, Y+6	; 0x06
     1fa:	9f 81       	ldd	r25, Y+7	; 0x07
     1fc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     200:	38 2e       	mov	r3, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
     202:	25 ee       	ldi	r18, 0xE5	; 229
     204:	82 17       	cp	r24, r18
     206:	09 f4       	brne	.+2      	; 0x20a <print_directory+0xa2>
     208:	8a c0       	rjmp	.+276    	; 0x31e <print_directory+0x1b6>
     20a:	88 23       	and	r24, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <print_directory+0xa8>
     20e:	87 c0       	rjmp	.+270    	; 0x31e <print_directory+0x1b6>
	    {  
	       attr=read_value_8(0x0b+i,values);
     210:	69 81       	ldd	r22, Y+1	; 0x01
     212:	7a 81       	ldd	r23, Y+2	; 0x02
     214:	8e 81       	ldd	r24, Y+6	; 0x06
     216:	9f 81       	ldd	r25, Y+7	; 0x07
     218:	0b 96       	adiw	r24, 0x0b	; 11
     21a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     21e:	8b 83       	std	Y+3, r24	; 0x03
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
     220:	8e 70       	andi	r24, 0x0E	; 14
     222:	09 f0       	breq	.+2      	; 0x226 <print_directory+0xbe>
     224:	7c c0       	rjmp	.+248    	; 0x31e <print_directory+0x1b6>
		   {
		      entries++;
     226:	0f 5f       	subi	r16, 0xFF	; 255
     228:	1f 4f       	sbci	r17, 0xFF	; 255
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
     22a:	1f 93       	push	r17
     22c:	0f 93       	push	r16
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	8f 93       	push	r24
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	9f 93       	push	r25
     23e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <sprintf>
		      UART_transmit_string(UART1,prnt_bffr,0);
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	6c 81       	ldd	r22, Y+4	; 0x04
     246:	7d 81       	ldd	r23, Y+5	; 0x05
     248:	88 ec       	ldi	r24, 0xC8	; 200
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			  for(j=0;j<8;j++)
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	21 2c       	mov	r2, r1
     25e:	0e c0       	rjmp	.+28     	; 0x27c <print_directory+0x114>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
     260:	69 81       	ldd	r22, Y+1	; 0x01
     262:	7a 81       	ldd	r23, Y+2	; 0x02
     264:	8e 81       	ldd	r24, Y+6	; 0x06
     266:	9f 81       	ldd	r25, Y+7	; 0x07
     268:	82 0d       	add	r24, r2
     26a:	91 1d       	adc	r25, r1
     26c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
			     UART_transmit(UART1,out_val);
     270:	68 2f       	mov	r22, r24
     272:	88 ec       	ldi	r24, 0xC8	; 200
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
		   {
		      entries++;
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
		      UART_transmit_string(UART1,prnt_bffr,0);
			  for(j=0;j<8;j++)
     27a:	23 94       	inc	r2
     27c:	27 e0       	ldi	r18, 0x07	; 7
     27e:	22 15       	cp	r18, r2
     280:	78 f7       	brcc	.-34     	; 0x260 <print_directory+0xf8>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	84 fd       	sbrc	r24, 4
     286:	10 c0       	rjmp	.+32     	; 0x2a8 <print_directory+0x140>
     288:	26 c0       	rjmp	.+76     	; 0x2d6 <print_directory+0x16e>
			  {
			     for(j=8;j<11;j++)
			     {
			        out_val=read_value_8(i+j,values);
     28a:	69 81       	ldd	r22, Y+1	; 0x01
     28c:	7a 81       	ldd	r23, Y+2	; 0x02
     28e:	8e 81       	ldd	r24, Y+6	; 0x06
     290:	9f 81       	ldd	r25, Y+7	; 0x07
     292:	82 0d       	add	r24, r2
     294:	91 1d       	adc	r25, r1
     296:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
			        UART_transmit(UART1,out_val);
     29a:	68 2f       	mov	r22, r24
     29c:	88 ec       	ldi	r24, 0xC8	; 200
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
			  {
			     for(j=8;j<11;j++)
     2a4:	23 94       	inc	r2
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <print_directory+0x146>
     2a8:	68 94       	set
     2aa:	22 24       	eor	r2, r2
     2ac:	23 f8       	bld	r2, 3
     2ae:	9a e0       	ldi	r25, 0x0A	; 10
     2b0:	92 15       	cp	r25, r2
     2b2:	58 f7       	brcc	.-42     	; 0x28a <print_directory+0x122>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     sprintf(prnt_bffr,"[DIR]\r\n");
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	e6 e0       	ldi	r30, 0x06	; 6
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	ac 81       	ldd	r26, Y+4	; 0x04
     2bc:	bd 81       	ldd	r27, Y+5	; 0x05
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	8a 95       	dec	r24
     2c4:	e1 f7       	brne	.-8      	; 0x2be <print_directory+0x156>
				 UART_transmit_string(UART1,prnt_bffr,0);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	6c 81       	ldd	r22, Y+4	; 0x04
     2ca:	7d 81       	ldd	r23, Y+5	; 0x05
     2cc:	88 ec       	ldi	r24, 0xC8	; 200
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
     2d4:	24 c0       	rjmp	.+72     	; 0x31e <print_directory+0x1b6>
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
     2d6:	6e e2       	ldi	r22, 0x2E	; 46
     2d8:	88 ec       	ldi	r24, 0xC8	; 200
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			     for(j=8;j<11;j++)
     2e0:	68 94       	set
     2e2:	22 24       	eor	r2, r2
     2e4:	23 f8       	bld	r2, 3
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <print_directory+0x19c>
			     {
			        out_val=read_value_8(i+j,values);
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	7a 81       	ldd	r23, Y+2	; 0x02
     2ec:	8e 81       	ldd	r24, Y+6	; 0x06
     2ee:	9f 81       	ldd	r25, Y+7	; 0x07
     2f0:	82 0d       	add	r24, r2
     2f2:	91 1d       	adc	r25, r1
     2f4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
			        UART_transmit(UART1,out_val);
     2f8:	68 2f       	mov	r22, r24
     2fa:	88 ec       	ldi	r24, 0xC8	; 200
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
				 UART_transmit_string(UART1,prnt_bffr,0);
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
			     for(j=8;j<11;j++)
     302:	23 94       	inc	r2
     304:	2a e0       	ldi	r18, 0x0A	; 10
     306:	22 15       	cp	r18, r2
     308:	78 f7       	brcc	.-34     	; 0x2e8 <print_directory+0x180>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     UART_transmit(UART1,CR);
     30a:	6d e0       	ldi	r22, 0x0D	; 13
     30c:	88 ec       	ldi	r24, 0xC8	; 200
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
                 UART_transmit(UART1,LF);
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	88 ec       	ldi	r24, 0xC8	; 200
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			  }
		    }
		}
		    i=i+32;  // next entry
     31e:	8e 81       	ldd	r24, Y+6	; 0x06
     320:	9f 81       	ldd	r25, Y+7	; 0x07
     322:	80 96       	adiw	r24, 0x20	; 32
     324:	9f 83       	std	Y+7, r25	; 0x07
     326:	8e 83       	std	Y+6, r24	; 0x06
		    if(i>510)
     328:	8f 3f       	cpi	r24, 0xFF	; 255
     32a:	91 40       	sbci	r25, 0x01	; 1
     32c:	38 f1       	brcs	.+78     	; 0x37c <print_directory+0x214>
		    {
			  Sector++;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	c8 1a       	sub	r12, r24
     332:	d8 0a       	sbc	r13, r24
     334:	e8 0a       	sbc	r14, r24
     336:	f8 0a       	sbc	r15, r24
              if((Sector-Sector_num)<max_sectors)
     338:	d7 01       	movw	r26, r14
     33a:	c6 01       	movw	r24, r12
     33c:	88 19       	sub	r24, r8
     33e:	99 09       	sbc	r25, r9
     340:	aa 09       	sbc	r26, r10
     342:	bb 09       	sbc	r27, r11
     344:	84 15       	cp	r24, r4
     346:	95 05       	cpc	r25, r5
     348:	a6 05       	cpc	r26, r6
     34a:	b7 05       	cpc	r27, r7
     34c:	78 f4       	brcc	.+30     	; 0x36c <print_directory+0x204>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     34e:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <Drive_values+0x4>
     352:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <Drive_values+0x5>
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	3a 81       	ldd	r19, Y+2	; 0x02
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
			     if(error_flag!=no_errors)
     362:	81 11       	cpse	r24, r1
     364:	06 c0       	rjmp	.+12     	; 0x372 <print_directory+0x20a>
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
			     }
                 i=0;
     366:	1f 82       	std	Y+7, r1	; 0x07
     368:	1e 82       	std	Y+6, r1	; 0x06
     36a:	08 c0       	rjmp	.+16     	; 0x37c <print_directory+0x214>
			  }
			  else
			  {
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
     36c:	10 68       	ori	r17, 0x80	; 128
			     temp8=0;                       // forces a function exit
     36e:	31 2c       	mov	r3, r1
     370:	05 c0       	rjmp	.+10     	; 0x37c <print_directory+0x214>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
     372:	31 2c       	mov	r3, r1
              if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	10 e0       	ldi	r17, 0x00	; 0
				    temp8=0;     // forces a function exit
			     }
                 i=0;
     378:	1f 82       	std	Y+7, r1	; 0x07
     37a:	1e 82       	std	Y+6, r1	; 0x06
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
     37c:	31 10       	cpse	r3, r1
     37e:	3a cf       	rjmp	.-396    	; 0x1f4 <print_directory+0x8c>
     380:	02 c0       	rjmp	.+4      	; 0x386 <print_directory+0x21e>
	}
	else
	{
	   entries=0;    // no entries found indicates disk read error
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
	}
   return entries;
 }
     386:	c8 01       	movw	r24, r16
     388:	27 96       	adiw	r28, 0x07	; 7
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	3f 90       	pop	r3
     3b6:	2f 90       	pop	r2
     3b8:	08 95       	ret

000003ba <read_dir_entry>:
         a directory entry, clear for a file.  Bit 31 set for error.
CAUTION: 
************************************************************************/

uint32_t read_dir_entry(uint32_t Sector_num, uint16_t Entry, uint8_t * array_in)
{ 
     3ba:	2f 92       	push	r2
     3bc:	3f 92       	push	r3
     3be:	4f 92       	push	r4
     3c0:	5f 92       	push	r5
     3c2:	6f 92       	push	r6
     3c4:	7f 92       	push	r7
     3c6:	8f 92       	push	r8
     3c8:	9f 92       	push	r9
     3ca:	af 92       	push	r10
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	2c 97       	sbiw	r28, 0x0c	; 12
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	6b 01       	movw	r12, r22
     3ee:	7c 01       	movw	r14, r24
     3f0:	5a 87       	std	Y+10, r21	; 0x0a
     3f2:	49 87       	std	Y+9, r20	; 0x09
     3f4:	19 01       	movw	r2, r18

   values=array_in;
   entries=0;
   i=0;
   return_clus=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
     3f6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Drive_values+0x1>
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	49 f4       	brne	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
     3fe:	80 90 6c 02 	lds	r8, 0x026C	; 0x80026c <Drive_values+0x12>
     402:	90 90 6d 02 	lds	r9, 0x026D	; 0x80026d <Drive_values+0x13>
     406:	a0 90 6e 02 	lds	r10, 0x026E	; 0x80026e <Drive_values+0x14>
     40a:	b0 90 6f 02 	lds	r11, 0x026F	; 0x80026f <Drive_values+0x15>
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
     410:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Drive_values>
     414:	88 2e       	mov	r8, r24
     416:	91 2c       	mov	r9, r1
     418:	a1 2c       	mov	r10, r1
     41a:	b1 2c       	mov	r11, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     41c:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <Drive_values+0x4>
     420:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <Drive_values+0x5>
     424:	91 01       	movw	r18, r2
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
   if(error_flag==no_errors)
     42e:	81 11       	cpse	r24, r1
     430:	c7 c0       	rjmp	.+398    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     432:	26 01       	movw	r4, r12
     434:	37 01       	movw	r6, r14
     436:	18 86       	std	Y+8, r1	; 0x08
     438:	1f 82       	std	Y+7, r1	; 0x07
     43a:	19 82       	std	Y+1, r1	; 0x01
     43c:	1a 82       	std	Y+2, r1	; 0x02
     43e:	1b 82       	std	Y+3, r1	; 0x03
     440:	1c 82       	std	Y+4, r1	; 0x04
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	3c 87       	std	Y+12, r19	; 0x0c
     448:	2b 87       	std	Y+11, r18	; 0x0b
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
     44a:	b1 01       	movw	r22, r2
     44c:	8b 85       	ldd	r24, Y+11	; 0x0b
     44e:	9c 85       	ldd	r25, Y+12	; 0x0c
     450:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     454:	18 2f       	mov	r17, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
     456:	85 3e       	cpi	r24, 0xE5	; 229
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	7c c0       	rjmp	.+248    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	79 c0       	rjmp	.+242    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
	    {  
	       attr=read_value_8(0x0b+i,values);
     462:	4b 85       	ldd	r20, Y+11	; 0x0b
     464:	5c 85       	ldd	r21, Y+12	; 0x0c
     466:	45 5f       	subi	r20, 0xF5	; 245
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	5e 83       	std	Y+6, r21	; 0x06
     46c:	4d 83       	std	Y+5, r20	; 0x05
     46e:	b1 01       	movw	r22, r2
     470:	ca 01       	movw	r24, r20
     472:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
		   if((attr&0x0E)==0)    // if hidden do not print
     476:	8e 70       	andi	r24, 0x0E	; 14
     478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	6c c0       	rjmp	.+216    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
		   {
		      entries++;
     47c:	8f 81       	ldd	r24, Y+7	; 0x07
     47e:	98 85       	ldd	r25, Y+8	; 0x08
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	98 87       	std	Y+8, r25	; 0x08
     484:	8f 83       	std	Y+7, r24	; 0x07
              if(entries==Entry)
     486:	a9 85       	ldd	r26, Y+9	; 0x09
     488:	ba 85       	ldd	r27, Y+10	; 0x0a
     48a:	8a 17       	cp	r24, r26
     48c:	9b 07       	cpc	r25, r27
     48e:	09 f0       	breq	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	61 c0       	rjmp	.+194    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
              {
			    if(Drive_values.FATtype==FAT32)
     492:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Drive_values+0x1>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	31 f5       	brne	.+76     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
                {
                   return_clus=read_value_8(21+i,values);
     49a:	b1 01       	movw	r22, r2
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	45 96       	adiw	r24, 0x15	; 21
     4a2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
				   return_clus=return_clus<<8;
     4ac:	22 27       	eor	r18, r18
     4ae:	38 2f       	mov	r19, r24
     4b0:	49 2f       	mov	r20, r25
     4b2:	5a 2f       	mov	r21, r26
     4b4:	29 83       	std	Y+1, r18	; 0x01
     4b6:	3a 83       	std	Y+2, r19	; 0x02
     4b8:	4b 83       	std	Y+3, r20	; 0x03
     4ba:	5c 83       	std	Y+4, r21	; 0x04
                   return_clus|=read_value_8(20+i,values);
     4bc:	b1 01       	movw	r22, r2
     4be:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4c2:	44 96       	adiw	r24, 0x14	; 20
     4c4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     4c8:	29 81       	ldd	r18, Y+1	; 0x01
     4ca:	3a 81       	ldd	r19, Y+2	; 0x02
     4cc:	4b 81       	ldd	r20, Y+3	; 0x03
     4ce:	5c 81       	ldd	r21, Y+4	; 0x04
     4d0:	28 2b       	or	r18, r24
     4d2:	da 01       	movw	r26, r20
     4d4:	c9 01       	movw	r24, r18
                   return_clus=return_clus<<8;
     4d6:	22 27       	eor	r18, r18
     4d8:	38 2f       	mov	r19, r24
     4da:	49 2f       	mov	r20, r25
     4dc:	5a 2f       	mov	r21, r26
     4de:	29 83       	std	Y+1, r18	; 0x01
     4e0:	3a 83       	std	Y+2, r19	; 0x02
     4e2:	4b 83       	std	Y+3, r20	; 0x03
     4e4:	5c 83       	std	Y+4, r21	; 0x04
                }
                return_clus|=read_value_8(27+i,values);
     4e6:	b1 01       	movw	r22, r2
     4e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ec:	4b 96       	adiw	r24, 0x1b	; 27
     4ee:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	4b 81       	ldd	r20, Y+3	; 0x03
     4f8:	5c 81       	ldd	r21, Y+4	; 0x04
     4fa:	28 2b       	or	r18, r24
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
			    return_clus=return_clus<<8;
     500:	22 27       	eor	r18, r18
     502:	38 2f       	mov	r19, r24
     504:	49 2f       	mov	r20, r25
     506:	5a 2f       	mov	r21, r26
     508:	29 83       	std	Y+1, r18	; 0x01
     50a:	3a 83       	std	Y+2, r19	; 0x02
     50c:	4b 83       	std	Y+3, r20	; 0x03
     50e:	5c 83       	std	Y+4, r21	; 0x04
                return_clus|=read_value_8(26+i,values);
     510:	b1 01       	movw	r22, r2
     512:	8b 85       	ldd	r24, Y+11	; 0x0b
     514:	9c 85       	ldd	r25, Y+12	; 0x0c
     516:	4a 96       	adiw	r24, 0x1a	; 26
     518:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
     51c:	29 81       	ldd	r18, Y+1	; 0x01
     51e:	3a 81       	ldd	r19, Y+2	; 0x02
     520:	4b 81       	ldd	r20, Y+3	; 0x03
     522:	5c 81       	ldd	r21, Y+4	; 0x04
     524:	28 2b       	or	r18, r24
     526:	29 83       	std	Y+1, r18	; 0x01
     528:	3a 83       	std	Y+2, r19	; 0x02
     52a:	4b 83       	std	Y+3, r20	; 0x03
     52c:	5c 83       	std	Y+4, r21	; 0x04
			    attr=read_value_8(0x0b+i,values);
     52e:	b1 01       	movw	r22, r2
     530:	8d 81       	ldd	r24, Y+5	; 0x05
     532:	9e 81       	ldd	r25, Y+6	; 0x06
     534:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
			    if(attr&0x10) return_clus|=directory_bit;
     538:	84 ff       	sbrs	r24, 4
     53a:	0b c0       	rjmp	.+22     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	ab 81       	ldd	r26, Y+3	; 0x03
     542:	bc 81       	ldd	r27, Y+4	; 0x04
     544:	b0 61       	ori	r27, 0x10	; 16
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	ab 83       	std	Y+3, r26	; 0x03
     54c:	bc 83       	std	Y+4, r27	; 0x04
                temp8=0;    // forces a function exit
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	01 c0       	rjmp	.+2      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     552:	10 e0       	ldi	r17, 0x00	; 0
              }
              
		    }
		}
		    i=i+32;  // next entry
     554:	ab 85       	ldd	r26, Y+11	; 0x0b
     556:	bc 85       	ldd	r27, Y+12	; 0x0c
     558:	90 96       	adiw	r26, 0x20	; 32
     55a:	bc 87       	std	Y+12, r27	; 0x0c
     55c:	ab 87       	std	Y+11, r26	; 0x0b
		    if(i>510)
     55e:	af 3f       	cpi	r26, 0xFF	; 255
     560:	b1 40       	sbci	r27, 0x01	; 1
     562:	58 f1       	brcs	.+86     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
		    {
			  Sector++;
     564:	3f ef       	ldi	r19, 0xFF	; 255
     566:	43 1a       	sub	r4, r19
     568:	53 0a       	sbc	r5, r19
     56a:	63 0a       	sbc	r6, r19
     56c:	73 0a       	sbc	r7, r19
			  if((Sector-Sector_num)<max_sectors)
     56e:	d3 01       	movw	r26, r6
     570:	c2 01       	movw	r24, r4
     572:	8c 19       	sub	r24, r12
     574:	9d 09       	sbc	r25, r13
     576:	ae 09       	sbc	r26, r14
     578:	bf 09       	sbc	r27, r15
     57a:	88 15       	cp	r24, r8
     57c:	99 05       	cpc	r25, r9
     57e:	aa 05       	cpc	r26, r10
     580:	bb 05       	cpc	r27, r11
     582:	70 f4       	brcc	.+28     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
     584:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <Drive_values+0x4>
     588:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <Drive_values+0x5>
     58c:	91 01       	movw	r18, r2
     58e:	c3 01       	movw	r24, r6
     590:	b2 01       	movw	r22, r4
     592:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
			     if(error_flag!=no_errors)
     596:	81 11       	cpse	r24, r1
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
			     }
			     i=0;
     59a:	1c 86       	std	Y+12, r1	; 0x0c
     59c:	1b 86       	std	Y+11, r1	; 0x0b
     59e:	0d c0       	rjmp	.+26     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			  }
			  else
			  {
			     temp8=0;                       // forces a function exit
     5a0:	10 e0       	ldi	r17, 0x00	; 0
     5a2:	0b c0       	rjmp	.+22     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
     5a4:	10 e0       	ldi	r17, 0x00	; 0
			     }
			     i=0;
     5a6:	1c 86       	std	Y+12, r1	; 0x0c
     5a8:	1b 86       	std	Y+11, r1	; 0x0b
			  if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e8       	ldi	r27, 0x80	; 128
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	9a 83       	std	Y+2, r25	; 0x02
     5b6:	ab 83       	std	Y+3, r26	; 0x03
     5b8:	bc 83       	std	Y+4, r27	; 0x04
			  {
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
     5ba:	11 11       	cpse	r17, r1
     5bc:	46 cf       	rjmp	.-372    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
	}
	else
	{
	   return_clus=no_entry_found;
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e8       	ldi	r21, 0x80	; 128
     5c8:	29 83       	std	Y+1, r18	; 0x01
     5ca:	3a 83       	std	Y+2, r19	; 0x02
     5cc:	4b 83       	std	Y+3, r20	; 0x03
     5ce:	5c 83       	std	Y+4, r21	; 0x04
	}
	if(return_clus==0) return_clus=no_entry_found;
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	ab 81       	ldd	r26, Y+3	; 0x03
     5d6:	bc 81       	ldd	r27, Y+4	; 0x04
     5d8:	89 2b       	or	r24, r25
     5da:	8a 2b       	or	r24, r26
     5dc:	8b 2b       	or	r24, r27
     5de:	41 f4       	brne	.+16     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e8       	ldi	r21, 0x80	; 128
     5e8:	29 83       	std	Y+1, r18	; 0x01
     5ea:	3a 83       	std	Y+2, r19	; 0x02
     5ec:	4b 83       	std	Y+3, r20	; 0x03
     5ee:	5c 83       	std	Y+4, r21	; 0x04
   return return_clus;
 }
     5f0:	69 81       	ldd	r22, Y+1	; 0x01
     5f2:	7a 81       	ldd	r23, Y+2	; 0x02
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	2c 96       	adiw	r28, 0x0c	; 12
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	4f 90       	pop	r4
     622:	3f 90       	pop	r3
     624:	2f 90       	pop	r2
     626:	08 95       	ret

00000628 <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
     628:	fc 01       	movw	r30, r24
     62a:	21 81       	ldd	r18, Z+1	; 0x01
     62c:	62 2b       	or	r22, r18
     62e:	61 83       	std	Z+1, r22	; 0x01
     630:	08 95       	ret

00000632 <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
     632:	fc 01       	movw	r30, r24
     634:	22 81       	ldd	r18, Z+2	; 0x02
     636:	62 2b       	or	r22, r18
     638:	62 83       	std	Z+2, r22	; 0x02
     63a:	08 95       	ret

0000063c <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
     63c:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
     63e:	92 81       	ldd	r25, Z+2	; 0x02
     640:	60 95       	com	r22
     642:	69 23       	and	r22, r25
     644:	62 83       	std	Z+2, r22	; 0x02
     646:	08 95       	ret

00000648 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(volatile UART_t * UART_addr)
{
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	2b 97       	sbiw	r28, 0x0b	; 11
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 c0       	rjmp	.+16     	; 0x682 <long_serial_input+0x3a>
      {
        input_values[index]=0;
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ec 0f       	add	r30, r28
     678:	fd 1f       	adc	r31, r29
     67a:	e8 0f       	add	r30, r24
     67c:	f1 1d       	adc	r31, r1
     67e:	10 82       	st	Z, r1
uint32_t long_serial_input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	8b 30       	cpi	r24, 0x0B	; 11
     684:	b0 f3       	brcs	.-20     	; 0x672 <long_serial_input+0x2a>
     686:	88 24       	eor	r8, r8
     688:	8a 94       	dec	r8
     68a:	98 2c       	mov	r9, r8
     68c:	54 01       	movw	r10, r8
     68e:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_receive(UART_addr);
     690:	c7 01       	movw	r24, r14
     692:	0e 94 a0 0c 	call	0x1940	; 0x1940 <UART_receive>
     696:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
     698:	80 ed       	ldi	r24, 0xD0	; 208
     69a:	81 0f       	add	r24, r17
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	68 f4       	brcc	.+26     	; 0x6ba <long_serial_input+0x72>
         {
           UART_transmit(UART_addr,input);    // echo valid inputs only
     6a0:	61 2f       	mov	r22, r17
     6a2:	c7 01       	movw	r24, r14
     6a4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
		   input_values[index]=input;
     6a8:	e1 e0       	ldi	r30, 0x01	; 1
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	ec 0f       	add	r30, r28
     6ae:	fd 1f       	adc	r31, r29
     6b0:	e0 0f       	add	r30, r16
     6b2:	f1 1d       	adc	r31, r1
     6b4:	10 83       	st	Z, r17
           index++;
     6b6:	0f 5f       	subi	r16, 0xFF	; 255
     6b8:	2d c0       	rjmp	.+90     	; 0x714 <long_serial_input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
     6ba:	18 30       	cpi	r17, 0x08	; 8
     6bc:	11 f0       	breq	.+4      	; 0x6c2 <long_serial_input+0x7a>
     6be:	1f 37       	cpi	r17, 0x7F	; 127
     6c0:	a9 f4       	brne	.+42     	; 0x6ec <long_serial_input+0xa4>
         {
           index--;
     6c2:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
     6c4:	e1 e0       	ldi	r30, 0x01	; 1
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ec 0f       	add	r30, r28
     6ca:	fd 1f       	adc	r31, r29
     6cc:	e0 0f       	add	r30, r16
     6ce:	f1 1d       	adc	r31, r1
     6d0:	10 82       	st	Z, r1
		   UART_transmit(UART_addr,BS);
     6d2:	68 e0       	ldi	r22, 0x08	; 8
     6d4:	c7 01       	movw	r24, r14
     6d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
           UART_transmit(UART_addr,space);
     6da:	60 e2       	ldi	r22, 0x20	; 32
     6dc:	c7 01       	movw	r24, r14
     6de:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
           UART_transmit(UART_addr,BS);
     6e2:	68 e0       	ldi	r22, 0x08	; 8
     6e4:	c7 01       	movw	r24, r14
     6e6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
     6ea:	14 c0       	rjmp	.+40     	; 0x714 <long_serial_input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
     6ec:	1d 30       	cpi	r17, 0x0D	; 13
     6ee:	21 f0       	breq	.+8      	; 0x6f8 <long_serial_input+0xb0>
     6f0:	1a 30       	cpi	r17, 0x0A	; 10
     6f2:	11 f0       	breq	.+4      	; 0x6f8 <long_serial_input+0xb0>
     6f4:	1e 32       	cpi	r17, 0x2E	; 46
     6f6:	71 f4       	brne	.+28     	; 0x714 <long_serial_input+0xcc>
         {
            output_value=atol(input_values);
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <atol>
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     704:	6d e0       	ldi	r22, 0x0D	; 13
     706:	c7 01       	movw	r24, r14
     708:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			UART_transmit(UART_addr,LF);
     70c:	6a e0       	ldi	r22, 0x0A	; 10
     70e:	c7 01       	movw	r24, r14
     710:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
         }
         if(index==10)
     714:	0a 30       	cpi	r16, 0x0A	; 10
     716:	71 f4       	brne	.+28     	; 0x734 <long_serial_input+0xec>
         {
            output_value=atol(input_values);
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <atol>
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     724:	6d e0       	ldi	r22, 0x0D	; 13
     726:	c7 01       	movw	r24, r14
     728:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			UART_transmit(UART_addr,LF);
     72c:	6a e0       	ldi	r22, 0x0A	; 10
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
         }
      }while(output_value==0xffffffff);
     734:	8f ef       	ldi	r24, 0xFF	; 255
     736:	88 16       	cp	r8, r24
     738:	98 06       	cpc	r9, r24
     73a:	a8 06       	cpc	r10, r24
     73c:	b8 06       	cpc	r11, r24
     73e:	09 f4       	brne	.+2      	; 0x742 <long_serial_input+0xfa>
     740:	a7 cf       	rjmp	.-178    	; 0x690 <long_serial_input+0x48>

return output_value;
}
     742:	c5 01       	movw	r24, r10
     744:	b4 01       	movw	r22, r8
     746:	2b 96       	adiw	r28, 0x0b	; 11
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <main>:
#include "UART_Print.h"
#include "Long_Serial_In.h"
#include "sd_read.h"

int main(void)
{
     768:	4f 92       	push	r4
     76a:	5f 92       	push	r5
     76c:	6f 92       	push	r6
     76e:	7f 92       	push	r7
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	c3 56       	subi	r28, 0x63	; 99
     78e:	d2 40       	sbci	r29, 0x02	; 2
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
	*
	* Experiment 2 Initializations
	*
	***********************************/
	//UART_init(UART0, BAUD_RATE);
	UART_init(UART1, BAUD_RATE);
     79a:	60 e8       	ldi	r22, 0x80	; 128
     79c:	75 e2       	ldi	r23, 0x25	; 37
     79e:	88 ec       	ldi	r24, 0xC8	; 200
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 8e 0c 	call	0x191c	; 0x191c <UART_init>
	* Experiment 3 Initializations
	*
	***********************************/
	
	// 400KHz used for the first init, which is the max hz for now.
	SPI_master_init(SPI0, 400000U); // port 0 is used for SD card, OLED, MP3
     7a6:	40 e8       	ldi	r20, 0x80	; 128
     7a8:	5a e1       	ldi	r21, 0x1A	; 26
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	8c e4       	ldi	r24, 0x4C	; 76
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 6d 0b 	call	0x16da	; 0x16da <SPI_master_init>
	uint32_t mem_block_num;
	uint8_t mem_block[512];
	enum ErrorTypes typederror = 0;
	
	// debug strings
	char start[] = "Start\n";
     7b6:	87 e0       	ldi	r24, 0x07	; 7
     7b8:	e2 e6       	ldi	r30, 0x62	; 98
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	de 01       	movw	r26, r28
     7be:	af 5f       	subi	r26, 0xFF	; 255
     7c0:	bd 4f       	sbci	r27, 0xFD	; 253
     7c2:	01 90       	ld	r0, Z+
     7c4:	0d 92       	st	X+, r0
     7c6:	8a 95       	dec	r24
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <main+0x5a>
	char stop[] = "Stop\n";
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	e9 e6       	ldi	r30, 0x69	; 105
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	de 01       	movw	r26, r28
     7d2:	a8 5f       	subi	r26, 0xF8	; 248
     7d4:	bd 4f       	sbci	r27, 0xFD	; 253
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <main+0x6e>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
     7de:	60 e1       	ldi	r22, 0x10	; 16
     7e0:	83 e2       	ldi	r24, 0x23	; 35
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
     7e8:	46 e0       	ldi	r20, 0x06	; 6
     7ea:	be 01       	movw	r22, r28
     7ec:	6f 5f       	subi	r22, 0xFF	; 255
     7ee:	7d 4f       	sbci	r23, 0xFD	; 253
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
	
	do
	{
		typederror = SD_init(SPI0);
     7f8:	8c e4       	ldi	r24, 0x4C	; 76
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 26 06 	call	0xc4c	; 0xc4c <SD_init>
     800:	18 2f       	mov	r17, r24
		if (typederror != 0)
     802:	88 23       	and	r24, r24
     804:	29 f0       	breq	.+10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		{
			display_error(UART1, typederror);
     806:	68 2f       	mov	r22, r24
     808:	88 ec       	ldi	r24, 0xC8	; 200
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 19 0c 	call	0x1832	; 0x1832 <display_error>
		}
	}while(typederror != 0);
     810:	11 11       	cpse	r17, r1
     812:	f2 cf       	rjmp	.-28     	; 0x7f8 <main+0x90>
	
	FS_values_t* accessor_fileSystem = export_drive_values();
     814:	0e 94 b1 00 	call	0x162	; 0x162 <export_drive_values>
     818:	8c 01       	movw	r16, r24
	FS_values_t file_system;
	mount_drive(&file_system);
     81a:	ce 01       	movw	r24, r28
     81c:	82 5f       	subi	r24, 0xF2	; 242
     81e:	9d 4f       	sbci	r25, 0xFD	; 253
     820:	0e 94 fb 07 	call	0xff6	; 0xff6 <mount_drive>
	
	*accessor_fileSystem = file_system;
     824:	86 e1       	ldi	r24, 0x16	; 22
     826:	fe 01       	movw	r30, r28
     828:	e2 5f       	subi	r30, 0xF2	; 242
     82a:	fd 4f       	sbci	r31, 0xFD	; 253
     82c:	d8 01       	movw	r26, r16
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	8a 95       	dec	r24
     834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	
	uint32_t FirstRootDirSector = first_sector(0);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cb 01       	movw	r24, r22
     83c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <first_sector>
     840:	86 2e       	mov	r8, r22
     842:	97 2e       	mov	r9, r23
     844:	a8 2e       	mov	r10, r24
     846:	b9 2e       	mov	r11, r25
	

	
	//SPI can be reinitialized at a faster freq, now that the SD has been initialized.
	SPI_master_init(SPI0, 8000000U);
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	52 e1       	ldi	r21, 0x12	; 18
     84c:	6a e7       	ldi	r22, 0x7A	; 122
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	8c e4       	ldi	r24, 0x4C	; 76
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 6d 0b 	call	0x16da	; 0x16da <SPI_master_init>
	
	UART_transmit_string(UART1, "SD initialized\n", 15);
     858:	4f e0       	ldi	r20, 0x0F	; 15
     85a:	6e e0       	ldi	r22, 0x0E	; 14
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	88 ec       	ldi	r24, 0xC8	; 200
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
		//UART_transmit_string(UART1, "Input Block Number:\n", 21);
		//mem_block_num = long_serial_input(UART1);
		//UART_transmit_string(UART1, "Reading Block...\n", 18);
		//typederror = read_sector(mem_block_num, 512, mem_block);
		
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
     866:	9e 01       	movw	r18, r28
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	52 e0       	ldi	r21, 0x02	; 2
     870:	68 2d       	mov	r22, r8
     872:	79 2d       	mov	r23, r9
     874:	8a 2d       	mov	r24, r10
     876:	9b 2d       	mov	r25, r11
     878:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
		
		if(typederror != 0)
     87c:	81 11       	cpse	r24, r1
     87e:	68 c0       	rjmp	.+208    	; 0x950 <__stack+0x51>
     880:	c8 2c       	mov	r12, r8
     882:	d9 2c       	mov	r13, r9
     884:	ea 2c       	mov	r14, r10
     886:	fb 2c       	mov	r15, r11
		//sprintf(str, "test: %lX\n", temp32);
		//UART_transmit_string(UART1, str, 64);
		userDirNum = FirstRootDirSector;
		while(1)
		{
			numEntries = print_directory(userDirNum, mem_block);
     888:	ae 01       	movw	r20, r28
     88a:	4f 5f       	subi	r20, 0xFF	; 255
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 b4 00 	call	0x168	; 0x168 <print_directory>
     896:	18 2f       	mov	r17, r24
			UART_transmit_string(UART1, "Entry Number:\n", 14);
     898:	4e e0       	ldi	r20, 0x0E	; 14
     89a:	6e e1       	ldi	r22, 0x1E	; 30
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	88 ec       	ldi	r24, 0xC8	; 200
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			userDirNum = long_serial_input(UART1);
     8a6:	88 ec       	ldi	r24, 0xC8	; 200
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
     8ae:	6b 01       	movw	r12, r22
     8b0:	7c 01       	movw	r14, r24
			
			while(userDirNum > numEntries)
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
     8b4:	49 e2       	ldi	r20, 0x29	; 41
     8b6:	6d e2       	ldi	r22, 0x2D	; 45
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	88 ec       	ldi	r24, 0xC8	; 200
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
				userDirNum = long_serial_input(UART1);
     8c2:	88 ec       	ldi	r24, 0xC8	; 200
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
     8ca:	6b 01       	movw	r12, r22
     8cc:	7c 01       	movw	r14, r24
		{
			numEntries = print_directory(userDirNum, mem_block);
			UART_transmit_string(UART1, "Entry Number:\n", 14);
			userDirNum = long_serial_input(UART1);
			
			while(userDirNum > numEntries)
     8ce:	81 2f       	mov	r24, r17
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	8c 15       	cp	r24, r12
     8d8:	9d 05       	cpc	r25, r13
     8da:	ae 05       	cpc	r26, r14
     8dc:	bf 05       	cpc	r27, r15
     8de:	50 f3       	brcs	.-44     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
				userDirNum = long_serial_input(UART1);
			}
			
			userClusNum = read_dir_entry(FirstRootDirSector, userDirNum, mem_block);
     8e0:	9e 01       	movw	r18, r28
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	a6 01       	movw	r20, r12
     8e8:	68 2d       	mov	r22, r8
     8ea:	79 2d       	mov	r23, r9
     8ec:	8a 2d       	mov	r24, r10
     8ee:	9b 2d       	mov	r25, r11
     8f0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <read_dir_entry>
     8f4:	2b 01       	movw	r4, r22
     8f6:	3c 01       	movw	r6, r24
			char str[64];
			sprintf(str, "test: %lX\n", userClusNum);
     8f8:	7f 92       	push	r7
     8fa:	6f 92       	push	r6
     8fc:	5f 92       	push	r5
     8fe:	6f 93       	push	r22
     900:	87 e5       	ldi	r24, 0x57	; 87
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	8e 01       	movw	r16, r28
     90a:	0c 5d       	subi	r16, 0xDC	; 220
     90c:	1d 4f       	sbci	r17, 0xFD	; 253
     90e:	1f 93       	push	r17
     910:	0f 93       	push	r16
     912:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <sprintf>
			UART_transmit_string(UART1, str, 64);
     916:	40 e4       	ldi	r20, 0x40	; 64
     918:	b8 01       	movw	r22, r16
     91a:	88 ec       	ldi	r24, 0xC8	; 200
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			//Directory:
			if((userClusNum & 0x10000000) != 0)
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	74 fe       	sbrs	r7, 4
     92e:	08 c0       	rjmp	.+16     	; 0x940 <__stack+0x41>
			{
				userClusNum &= 0x0FFFFFFF; //mask upper 4 off
     930:	c3 01       	movw	r24, r6
     932:	b2 01       	movw	r22, r4
     934:	9f 70       	andi	r25, 0x0F	; 15
				userDirNum = first_sector(userClusNum);
     936:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <first_sector>
     93a:	6b 01       	movw	r12, r22
     93c:	7c 01       	movw	r14, r24
     93e:	a4 cf       	rjmp	.-184    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
			else
			{
				
				//print_directory(userClusNum, mem_block);
				//read_sector(userClusNum, 512, mem_block);
				print_file(userClusNum, mem_block);
     940:	ae 01       	movw	r20, r28
     942:	4f 5f       	subi	r20, 0xFF	; 255
     944:	5f 4f       	sbci	r21, 0xFF	; 255
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <print_file>
				
			}	
		}
     94e:	9c cf       	rjmp	.-200    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
		
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
		
		if(typederror != 0)
		{
			display_error(UART1, typederror);
     950:	68 2f       	mov	r22, r24
     952:	88 ec       	ldi	r24, 0xC8	; 200
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 19 0c 	call	0x1832	; 0x1832 <display_error>
				
			}	
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
     95a:	45 e0       	ldi	r20, 0x05	; 5
     95c:	be 01       	movw	r22, r28
     95e:	68 5f       	subi	r22, 0xF8	; 248
     960:	7d 4f       	sbci	r23, 0xFD	; 253
     962:	88 ec       	ldi	r24, 0xC8	; 200
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
	UART_transmit(UART1, '\n');
     96a:	6a e0       	ldi	r22, 0x0A	; 10
     96c:	88 ec       	ldi	r24, 0xC8	; 200
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
	return 0;
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	cd 59       	subi	r28, 0x9D	; 157
     97a:	dd 4f       	sbci	r29, 0xFD	; 253
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	9f 90       	pop	r9
     99c:	8f 90       	pop	r8
     99e:	7f 90       	pop	r7
     9a0:	6f 90       	pop	r6
     9a2:	5f 90       	pop	r5
     9a4:	4f 90       	pop	r4
     9a6:	08 95       	ret

000009a8 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t * array_in, uint16_t offset)
{
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	8c 01       	movw	r16, r24
     9b8:	6b 01       	movw	r12, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     9ba:	0e 94 a6 0c 	call	0x194c	; 0x194c <export_print_buffer>
     9be:	f8 2e       	mov	r15, r24
     9c0:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
     9c2:	0c 0d       	add	r16, r12
     9c4:	1d 1d       	adc	r17, r13
   sprintf(prnt_bffr, "%p ",input);
     9c6:	1f 93       	push	r17
     9c8:	0f 93       	push	r16
     9ca:	8f e6       	ldi	r24, 0x6F	; 111
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	df 93       	push	r29
     9d4:	ff 92       	push	r15
     9d6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	6f 2d       	mov	r22, r15
     9de:	7d 2f       	mov	r23, r29
     9e0:	88 ec       	ldi	r24, 0xC8	; 200
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
     9e8:	df 92       	push	r13
     9ea:	cf 92       	push	r12
     9ec:	83 e7       	ldi	r24, 0x73	; 115
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	df 93       	push	r29
     9f6:	ff 92       	push	r15
     9f8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	6f 2d       	mov	r22, r15
     a00:	7d 2f       	mov	r23, r29
     a02:	88 ec       	ldi	r24, 0xC8	; 200
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
   for (index=0;index<16;index++)
     a0a:	8d b7       	in	r24, 0x3d	; 61
     a0c:	9e b7       	in	r25, 0x3e	; 62
     a0e:	0c 96       	adiw	r24, 0x0c	; 12
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	9e bf       	out	0x3e, r25	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	8d bf       	out	0x3d, r24	; 61
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
     a1c:	1c c0       	rjmp	.+56     	; 0xa56 <print_16bytes+0xae>
   {
      dat=*(input+index);
     a1e:	f8 01       	movw	r30, r16
     a20:	ec 0f       	add	r30, r28
     a22:	f1 1d       	adc	r31, r1
     a24:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     a26:	1f 92       	push	r1
     a28:	8f 93       	push	r24
     a2a:	2d e7       	ldi	r18, 0x7D	; 125
     a2c:	31 e0       	ldi	r19, 0x01	; 1
     a2e:	3f 93       	push	r19
     a30:	2f 93       	push	r18
     a32:	df 93       	push	r29
     a34:	ff 92       	push	r15
     a36:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <sprintf>
	  UART_transmit_string(print_port,prnt_bffr,0);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	6f 2d       	mov	r22, r15
     a3e:	7d 2f       	mov	r23, r29
     a40:	88 ec       	ldi	r24, 0xC8	; 200
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_transmit_string(print_port,prnt_bffr,0);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_transmit_string(print_port,prnt_bffr,0);
   for (index=0;index<16;index++)
     a48:	cf 5f       	subi	r28, 0xFF	; 255
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	c0 31       	cpi	r28, 0x10	; 16
     a58:	10 f3       	brcs	.-60     	; 0xa1e <print_16bytes+0x76>
     a5a:	c0 e0       	ldi	r28, 0x00	; 0
     a5c:	0e c0       	rjmp	.+28     	; 0xa7a <print_16bytes+0xd2>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
     a5e:	f8 01       	movw	r30, r16
     a60:	ec 0f       	add	r30, r28
     a62:	f1 1d       	adc	r31, r1
     a64:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
     a66:	80 ee       	ldi	r24, 0xE0	; 224
     a68:	86 0f       	add	r24, r22
     a6a:	80 36       	cpi	r24, 0x60	; 96
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <print_16bytes+0xc8>
     a6e:	6e e2       	ldi	r22, 0x2E	; 46
      UART_transmit(print_port,dat);
     a70:	88 ec       	ldi	r24, 0xC8	; 200
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
     a78:	cf 5f       	subi	r28, 0xFF	; 255
     a7a:	c0 31       	cpi	r28, 0x10	; 16
     a7c:	80 f3       	brcs	.-32     	; 0xa5e <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_transmit(print_port,dat);
   }
   UART_transmit(print_port,CR);
     a7e:	6d e0       	ldi	r22, 0x0D	; 13
     a80:	88 ec       	ldi	r24, 0xC8	; 200
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
   UART_transmit(print_port,LF);
     a88:	6a e0       	ldi	r22, 0x0A	; 10
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	08 95       	ret

00000aa2 <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t * array_in, uint16_t number_of_bytes)
{
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	7c 01       	movw	r14, r24
     ab0:	8b 01       	movw	r16, r22
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     ab2:	0e 94 a6 0c 	call	0x194c	; 0x194c <export_print_buffer>
     ab6:	ec 01       	movw	r28, r24
   
   input = 0;
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	bc 01       	movw	r22, r24
     abc:	84 ee       	ldi	r24, 0xE4	; 228
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <copy_string_to_buffer>
   UART_transmit_string(print_port,prnt_bffr,0);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	be 01       	movw	r22, r28
     ac8:	88 ec       	ldi	r24, 0xC8	; 200
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
   
   input = 0;
     ad0:	c0 e0       	ldi	r28, 0x00	; 0
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
   UART_transmit_string(print_port,prnt_bffr,0);
   do
   {
      print_16bytes(array_in,input);
     ad4:	be 01       	movw	r22, r28
     ad6:	c7 01       	movw	r24, r14
     ad8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <print_16bytes>
      input+=16;
     adc:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
     ade:	c0 17       	cp	r28, r16
     ae0:	d1 07       	cpc	r29, r17
     ae2:	c0 f3       	brcs	.-16     	; 0xad4 <print_memory+0x32>
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
     af2:	0e 94 1e 03 	call	0x63c	; 0x63c <GPIO_Output_Clear>
     af6:	08 95       	ret

00000af8 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
     af8:	0e 94 19 03 	call	0x632	; 0x632 <GPIO_Output_Set>
     afc:	08 95       	ret

00000afe <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
     afe:	8f 92       	push	r8
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	1f 92       	push	r1
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
     b18:	60 34       	cpi	r22, 0x40	; 64
     b1a:	e0 f5       	brcc	.+120    	; 0xb94 <send_command+0x96>
     b1c:	49 01       	movw	r8, r18
     b1e:	5a 01       	movw	r10, r20
     b20:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
     b22:	16 2f       	mov	r17, r22
     b24:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
     b26:	ae 01       	movw	r20, r28
     b28:	4f 5f       	subi	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	61 2f       	mov	r22, r17
     b2e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
     b32:	81 11       	cpse	r24, r1
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <send_command+0x98>
     b36:	04 e0       	ldi	r16, 0x04	; 4
     b38:	1c c0       	rjmp	.+56     	; 0xb72 <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
     b3a:	40 2f       	mov	r20, r16
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	41 50       	subi	r20, 0x01	; 1
     b40:	51 09       	sbc	r21, r1
     b42:	44 0f       	add	r20, r20
     b44:	55 1f       	adc	r21, r21
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	44 0f       	add	r20, r20
     b4c:	55 1f       	adc	r21, r21
     b4e:	c5 01       	movw	r24, r10
     b50:	b4 01       	movw	r22, r8
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <send_command+0x5e>
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	77 95       	ror	r23
     b5a:	67 95       	ror	r22
     b5c:	4a 95       	dec	r20
     b5e:	d2 f7       	brpl	.-12     	; 0xb54 <send_command+0x56>
     b60:	ae 01       	movw	r20, r28
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	c7 01       	movw	r24, r14
     b68:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
     b6c:	81 11       	cpse	r24, r1
     b6e:	13 c0       	rjmp	.+38     	; 0xb96 <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
     b70:	01 50       	subi	r16, 0x01	; 1
     b72:	01 11       	cpse	r16, r1
     b74:	e2 cf       	rjmp	.-60     	; 0xb3a <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
     b76:	10 34       	cpi	r17, 0x40	; 64
     b78:	11 f0       	breq	.+4      	; 0xb7e <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
     b7e:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
     b80:	18 34       	cpi	r17, 0x48	; 72
     b82:	09 f4       	brne	.+2      	; 0xb86 <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
     b84:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
     b86:	ae 01       	movw	r20, r28
     b88:	4f 5f       	subi	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	c7 01       	movw	r24, r14
     b8e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
     b94:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
     bac:	08 95       	ret

00000bae <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	1f 92       	push	r1
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	7c 01       	movw	r14, r24
     bc6:	06 2f       	mov	r16, r22
     bc8:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     bca:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     bcc:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     bce:	ae 01       	movw	r20, r28
     bd0:	4f 5f       	subi	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	6f ef       	ldi	r22, 0xFF	; 255
     bd6:	c7 01       	movw	r24, r14
     bd8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
		timeout++;
     bdc:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 3f       	cpi	r24, 0xFF	; 255
     be2:	11 f4       	brne	.+4      	; 0xbe8 <receive_response+0x3a>
     be4:	11 11       	cpse	r17, r1
     be6:	f3 cf       	rjmp	.-26     	; 0xbce <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
     be8:	11 23       	and	r17, r17
     bea:	29 f1       	breq	.+74     	; 0xc36 <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
     bec:	98 2f       	mov	r25, r24
     bee:	9e 7f       	andi	r25, 0xFE	; 254
     bf0:	21 f0       	breq	.+8      	; 0xbfa <receive_response+0x4c>
	{
		*array = data; //return value to see error
     bf2:	f6 01       	movw	r30, r12
     bf4:	80 83       	st	Z, r24
		return ERROR_SD;
     bf6:	8d ef       	ldi	r24, 0xFD	; 253
     bf8:	1f c0       	rjmp	.+62     	; 0xc38 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
     bfa:	f6 01       	movw	r30, r12
     bfc:	80 83       	st	Z, r24
		if(number_of_bytes>1)
     bfe:	02 30       	cpi	r16, 0x02	; 2
     c00:	78 f4       	brcc	.+30     	; 0xc20 <receive_response+0x72>
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     c04:	ae 01       	movw	r20, r28
     c06:	4f 5f       	subi	r20, 0xFF	; 255
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	6f ef       	ldi	r22, 0xFF	; 255
     c0c:	c7 01       	movw	r24, r14
     c0e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
				array[i] = data;
     c12:	f6 01       	movw	r30, r12
     c14:	e1 0f       	add	r30, r17
     c16:	f1 1d       	adc	r31, r1
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
     c1c:	1f 5f       	subi	r17, 0xFF	; 255
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <receive_response+0x74>
     c20:	11 e0       	ldi	r17, 0x01	; 1
     c22:	01 17       	cp	r16, r17
     c24:	78 f7       	brcc	.-34     	; 0xc04 <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     c26:	ae 01       	movw	r20, r28
     c28:	4f 5f       	subi	r20, 0xFF	; 255
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	6f ef       	ldi	r22, 0xFF	; 255
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
	// 4. return error value
	return errorStatus;
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	29 97       	sbiw	r28, 0x09	; 9
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
     c72:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[8] = {0,0,0,0,0,0,0,0};
     c74:	fe 01       	movw	r30, r28
     c76:	32 96       	adiw	r30, 0x02	; 2
     c78:	88 e0       	ldi	r24, 0x08	; 8
     c7a:	df 01       	movw	r26, r30
     c7c:	1d 92       	st	X+, r1
     c7e:	8a 95       	dec	r24
     c80:	e9 f7       	brne	.-6      	; 0xc7c <SD_init+0x30>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint32_t CMD16_arg = 0x00000200;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
     c82:	60 e1       	ldi	r22, 0x10	; 16
     c84:	83 e2       	ldi	r24, 0x23	; 35
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	08 c0       	rjmp	.+16     	; 0xca0 <SD_init+0x54>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     c90:	ae 01       	movw	r20, r28
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	6f ef       	ldi	r22, 0xFF	; 255
     c98:	c7 01       	movw	r24, r14
     c9a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     c9e:	1f 5f       	subi	r17, 0xFF	; 255
     ca0:	18 30       	cpi	r17, 0x08	; 8
     ca2:	b0 f3       	brcs	.-20     	; 0xc90 <SD_init+0x44>
     *
     *  CMD0
     *
     *************/
	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	83 e2       	ldi	r24, 0x23	; 35
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>

	 errorStatus = send_command(SPI_addr, CMD0, arg);
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	c7 01       	movw	r24, r14
     cb8:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
	 if (errorStatus == 0)
     cbc:	81 11       	cpse	r24, r1
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <SD_init+0x8c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     cc0:	ae 01       	movw	r20, r28
     cc2:	4e 5f       	subi	r20, 0xFE	; 254
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	c7 01       	movw	r24, r14
     cca:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
     cce:	60 e1       	ldi	r22, 0x10	; 16
     cd0:	83 e2       	ldi	r24, 0x23	; 35
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <SD_init+0x94>
     cde:	dc c0       	rjmp	.+440    	; 0xe98 <SD_init+0x24c>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
     ce0:	60 e1       	ldi	r22, 0x10	; 16
     ce2:	83 e2       	ldi	r24, 0x23	; 35
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
     cea:	2a ea       	ldi	r18, 0xAA	; 170
     cec:	31 e0       	ldi	r19, 0x01	; 1
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	c7 01       	movw	r24, r14
     cf6:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
     cfa:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
     cfc:	81 11       	cpse	r24, r1
     cfe:	0d c0       	rjmp	.+26     	; 0xd1a <SD_init+0xce>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     d00:	ae 01       	movw	r20, r28
     d02:	4e 5f       	subi	r20, 0xFE	; 254
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	65 e0       	ldi	r22, 0x05	; 5
     d08:	c7 01       	movw	r24, r14
     d0a:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
     d0e:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
     d10:	60 e1       	ldi	r22, 0x10	; 16
     d12:	83 e2       	ldi	r24, 0x23	; 35
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	59 f4       	brne	.+22     	; 0xd36 <SD_init+0xea>
     d20:	11 11       	cpse	r17, r1
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <SD_init+0xea>
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f0       	breq	.+2      	; 0xd2c <SD_init+0xe0>
     d2a:	b8 c0       	rjmp	.+368    	; 0xe9c <SD_init+0x250>
     d2c:	8e 81       	ldd	r24, Y+6	; 0x06
     d2e:	8a 3a       	cpi	r24, 0xAA	; 170
     d30:	49 f0       	breq	.+18     	; 0xd44 <SD_init+0xf8>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     d32:	8c ef       	ldi	r24, 0xFC	; 252
     d34:	d4 c0       	rjmp	.+424    	; 0xede <SD_init+0x292>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
     d36:	85 30       	cpi	r24, 0x05	; 5
     d38:	09 f0       	breq	.+2      	; 0xd3c <SD_init+0xf0>
     d3a:	b2 c0       	rjmp	.+356    	; 0xea0 <SD_init+0x254>
	 {
		ACMD41_arg = 0x00000000; //v1.x
     d3c:	81 2c       	mov	r8, r1
     d3e:	91 2c       	mov	r9, r1
     d40:	54 01       	movw	r10, r8
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <SD_init+0x102>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
     d44:	81 2c       	mov	r8, r1
     d46:	91 2c       	mov	r9, r1
     d48:	54 01       	movw	r10, r8
     d4a:	68 94       	set
     d4c:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     d4e:	60 e1       	ldi	r22, 0x10	; 16
     d50:	83 e2       	ldi	r24, 0x23	; 35
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	a9 01       	movw	r20, r18
     d5e:	6a e3       	ldi	r22, 0x3A	; 58
     d60:	c7 01       	movw	r24, r14
     d62:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
	
	//check error
	if (errorStatus != 0x00)
     d66:	81 11       	cpse	r24, r1
     d68:	9d c0       	rjmp	.+314    	; 0xea4 <SD_init+0x258>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 plus 32bit OCR. bit 30 of OCR should be a 1 for high-capacity. SPI clock freq can be increased if that passes.
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     d6a:	ae 01       	movw	r20, r28
     d6c:	4e 5f       	subi	r20, 0xFE	; 254
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	65 e0       	ldi	r22, 0x05	; 5
     d72:	c7 01       	movw	r24, r14
     d74:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
     d78:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     d7a:	60 e1       	ldi	r22, 0x10	; 16
     d7c:	83 e2       	ldi	r24, 0x23	; 35
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     d84:	11 11       	cpse	r17, r1
     d86:	90 c0       	rjmp	.+288    	; 0xea8 <SD_init+0x25c>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	09 f0       	breq	.+2      	; 0xd90 <SD_init+0x144>
     d8e:	8e c0       	rjmp	.+284    	; 0xeac <SD_init+0x260>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	8c 7f       	andi	r24, 0xFC	; 252
     d94:	8c 3f       	cpi	r24, 0xFC	; 252
     d96:	09 f0       	breq	.+2      	; 0xd9a <SD_init+0x14e>
     d98:	8b c0       	rjmp	.+278    	; 0xeb0 <SD_init+0x264>
     d9a:	00 e0       	ldi	r16, 0x00	; 0
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	33 c0       	rjmp	.+102    	; 0xe06 <SD_init+0x1ba>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
     da0:	60 e1       	ldi	r22, 0x10	; 16
     da2:	83 e2       	ldi	r24, 0x23	; 35
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	a9 01       	movw	r20, r18
     db0:	67 e3       	ldi	r22, 0x37	; 55
     db2:	c7 01       	movw	r24, r14
     db4:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
		if(errorStatus != 0x00)
     db8:	81 11       	cpse	r24, r1
     dba:	7c c0       	rjmp	.+248    	; 0xeb4 <SD_init+0x268>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     dbc:	ae 01       	movw	r20, r28
     dbe:	4e 5f       	subi	r20, 0xFE	; 254
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	c7 01       	movw	r24, r14
     dc6:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
		
		if(receive_array[0] != 0x01)
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	09 f0       	breq	.+2      	; 0xdd2 <SD_init+0x186>
     dd0:	73 c0       	rjmp	.+230    	; 0xeb8 <SD_init+0x26c>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
     dd2:	a5 01       	movw	r20, r10
     dd4:	94 01       	movw	r18, r8
     dd6:	69 e2       	ldi	r22, 0x29	; 41
     dd8:	c7 01       	movw	r24, r14
     dda:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
		if(errorStatus != 0x00)
     dde:	81 11       	cpse	r24, r1
     de0:	6d c0       	rjmp	.+218    	; 0xebc <SD_init+0x270>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
     de2:	ae 01       	movw	r20, r28
     de4:	4e 5f       	subi	r20, 0xFE	; 254
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	c7 01       	movw	r24, r14
     dec:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
		if(errorStatus != 0x00)
     df0:	81 11       	cpse	r24, r1
     df2:	66 c0       	rjmp	.+204    	; 0xec0 <SD_init+0x274>
		{
			return ERROR_CMD41;
		}
		timeout++;
     df4:	0f 5f       	subi	r16, 0xFF	; 255
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
		if (timeout == 0)
     df8:	09 f4       	brne	.+2      	; 0xdfc <SD_init+0x1b0>
     dfa:	64 c0       	rjmp	.+200    	; 0xec4 <SD_init+0x278>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
     dfc:	60 e1       	ldi	r22, 0x10	; 16
     dfe:	83 e2       	ldi	r24, 0x23	; 35
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	*
	* 	ACMD41  -- try a new sampling rate, not 10
	*
	**************************/
	
	while(receive_array[0] != 0x00)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	81 11       	cpse	r24, r1
     e0a:	ca cf       	rjmp	.-108    	; 0xda0 <SD_init+0x154>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     e0c:	60 e1       	ldi	r22, 0x10	; 16
     e0e:	83 e2       	ldi	r24, 0x23	; 35
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	6a e3       	ldi	r22, 0x3A	; 58
     e1e:	c7 01       	movw	r24, r14
     e20:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
	
	//check error
	if (errorStatus != 0x00)
     e24:	81 11       	cpse	r24, r1
     e26:	50 c0       	rjmp	.+160    	; 0xec8 <SD_init+0x27c>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 + 32bit OCR
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     e28:	ae 01       	movw	r20, r28
     e2a:	4e 5f       	subi	r20, 0xFE	; 254
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	c7 01       	movw	r24, r14
     e32:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
     e36:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	83 e2       	ldi	r24, 0x23	; 35
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     e42:	11 11       	cpse	r17, r1
     e44:	43 c0       	rjmp	.+134    	; 0xecc <SD_init+0x280>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <SD_init+0x202>
     e4c:	41 c0       	rjmp	.+130    	; 0xed0 <SD_init+0x284>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
     e4e:	80 7c       	andi	r24, 0xC0	; 192
     e50:	80 3c       	cpi	r24, 0xC0	; 192
     e52:	09 f0       	breq	.+2      	; 0xe56 <SD_init+0x20a>
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <SD_init+0x288>
	*
	* 	CMD16 
	*
	**************************/
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
     e56:	60 e1       	ldi	r22, 0x10	; 16
     e58:	83 e2       	ldi	r24, 0x23	; 35
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	60 e1       	ldi	r22, 0x10	; 16
     e6a:	c7 01       	movw	r24, r14
     e6c:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
	if (errorStatus != 0)
     e70:	81 11       	cpse	r24, r1
     e72:	32 c0       	rjmp	.+100    	; 0xed8 <SD_init+0x28c>
	{
		return ERROR_CMD16;
	}
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     e74:	ae 01       	movw	r20, r28
     e76:	4e 5f       	subi	r20, 0xFE	; 254
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	c7 01       	movw	r24, r14
     e7e:	0e 94 d7 05 	call	0xbae	; 0xbae <receive_response>
     e82:	18 2f       	mov	r17, r24
	
	if(receive_array[0] != 0x00)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	81 11       	cpse	r24, r1
     e88:	29 c0       	rjmp	.+82     	; 0xedc <SD_init+0x290>
	{
		return ERROR_CMD16;
	}
	SD_CS_inactive(PB, (1<<4));
     e8a:	60 e1       	ldi	r22, 0x10	; 16
     e8c:	83 e2       	ldi	r24, 0x23	; 35
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	return errorStatus;
     e94:	81 2f       	mov	r24, r17
     e96:	23 c0       	rjmp	.+70     	; 0xede <SD_init+0x292>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
     e98:	8b ef       	ldi	r24, 0xFB	; 251
     e9a:	21 c0       	rjmp	.+66     	; 0xede <SD_init+0x292>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     e9c:	8c ef       	ldi	r24, 0xFC	; 252
     e9e:	1f c0       	rjmp	.+62     	; 0xede <SD_init+0x292>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
     ea0:	8a ef       	ldi	r24, 0xFA	; 250
     ea2:	1d c0       	rjmp	.+58     	; 0xede <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     ea4:	89 ef       	ldi	r24, 0xF9	; 249
     ea6:	1b c0       	rjmp	.+54     	; 0xede <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     ea8:	89 ef       	ldi	r24, 0xF9	; 249
     eaa:	19 c0       	rjmp	.+50     	; 0xede <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
     eac:	89 ef       	ldi	r24, 0xF9	; 249
     eae:	17 c0       	rjmp	.+46     	; 0xede <SD_init+0x292>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
     eb0:	89 ef       	ldi	r24, 0xF9	; 249
     eb2:	15 c0       	rjmp	.+42     	; 0xede <SD_init+0x292>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
     eb4:	88 ef       	ldi	r24, 0xF8	; 248
     eb6:	13 c0       	rjmp	.+38     	; 0xede <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
     eb8:	88 ef       	ldi	r24, 0xF8	; 248
     eba:	11 c0       	rjmp	.+34     	; 0xede <SD_init+0x292>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     ebc:	87 ef       	ldi	r24, 0xF7	; 247
     ebe:	0f c0       	rjmp	.+30     	; 0xede <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     ec0:	87 ef       	ldi	r24, 0xF7	; 247
     ec2:	0d c0       	rjmp	.+26     	; 0xede <SD_init+0x292>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
     ec4:	86 ef       	ldi	r24, 0xF6	; 246
     ec6:	0b c0       	rjmp	.+22     	; 0xede <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     ec8:	89 ef       	ldi	r24, 0xF9	; 249
     eca:	09 c0       	rjmp	.+18     	; 0xede <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     ecc:	89 ef       	ldi	r24, 0xF9	; 249
     ece:	07 c0       	rjmp	.+14     	; 0xede <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
     ed0:	89 ef       	ldi	r24, 0xF9	; 249
     ed2:	05 c0       	rjmp	.+10     	; 0xede <SD_init+0x292>
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
	{
		return ERROR_CMD58;
     ed4:	89 ef       	ldi	r24, 0xF9	; 249
     ed6:	03 c0       	rjmp	.+6      	; 0xede <SD_init+0x292>
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
	if (errorStatus != 0)
	{
		return ERROR_CMD16;
     ed8:	85 ef       	ldi	r24, 0xF5	; 245
     eda:	01 c0       	rjmp	.+2      	; 0xede <SD_init+0x292>
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
	
	if(receive_array[0] != 0x00)
	{
		return ERROR_CMD16;
     edc:	85 ef       	ldi	r24, 0xF5	; 245
	}
	SD_CS_inactive(PB, (1<<4));
	return errorStatus;
 }
     ede:	29 96       	adiw	r28, 0x09	; 9
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	08 95       	ret

00000f00 <read_block>:
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
     f00:	8f 92       	push	r8
     f02:	9f 92       	push	r9
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	7c 01       	movw	r14, r24
     f20:	5b 01       	movw	r10, r22
     f22:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     f24:	19 82       	std	Y+1, r1	; 0x01
 }
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     f26:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data=0;
	// step a
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     f28:	ae 01       	movw	r20, r28
     f2a:	4f 5f       	subi	r20, 0xFF	; 255
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	6f ef       	ldi	r22, 0xFF	; 255
     f30:	c7 01       	movw	r24, r14
     f32:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
		timeout++;
     f36:	1f 5f       	subi	r17, 0xFF	; 255
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	99 23       	and	r25, r25
     f3c:	24 f4       	brge	.+8      	; 0xf46 <read_block+0x46>
     f3e:	81 11       	cpse	r24, r1
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <read_block+0x46>
     f42:	11 11       	cpse	r17, r1
     f44:	f1 cf       	rjmp	.-30     	; 0xf28 <read_block+0x28>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
     f46:	81 11       	cpse	r24, r1
     f48:	43 c0       	rjmp	.+134    	; 0xfd0 <read_block+0xd0>
	{
		return ERROR_CMD0;
	}
	if(data != 0)
     f4a:	91 11       	cpse	r25, r1
     f4c:	43 c0       	rjmp	.+134    	; 0xfd4 <read_block+0xd4>
		return ERROR_CMD8;
	}

	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     f4e:	ae 01       	movw	r20, r28
     f50:	4f 5f       	subi	r20, 0xFF	; 255
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	6f ef       	ldi	r22, 0xFF	; 255
     f56:	c7 01       	movw	r24, r14
     f58:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
     f5c:	08 2f       	mov	r16, r24
		timeout++;
     f5e:	1f 5f       	subi	r17, 0xFF	; 255
	} while((data == 0xFF) && (errorStatus == 0) && (timeout != 0));
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	21 f4       	brne	.+8      	; 0xf6e <read_block+0x6e>
     f66:	01 11       	cpse	r16, r1
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <read_block+0x6e>
     f6a:	11 11       	cpse	r17, r1
     f6c:	f0 cf       	rjmp	.-32     	; 0xf4e <read_block+0x4e>
	//while ( (data == 0xFF) && (timeout != 0) );


	// check for 0xFE (success) or 0b0000XXXX (error)
	if (data == 0xFE)
     f6e:	8e 3f       	cpi	r24, 0xFE	; 254
     f70:	99 f5       	brne	.+102    	; 0xfd8 <read_block+0xd8>
	{
		// take first byte of data
		SPI_receive(SPI_addr, &data);
     f72:	be 01       	movw	r22, r28
     f74:	6f 5f       	subi	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	c7 01       	movw	r24, r14
     f7a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SPI_receive>
		array[0] = data;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	f6 01       	movw	r30, r12
     f82:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     f84:	88 24       	eor	r8, r8
     f86:	83 94       	inc	r8
     f88:	91 2c       	mov	r9, r1
     f8a:	10 c0       	rjmp	.+32     	; 0xfac <read_block+0xac>
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     f8c:	ae 01       	movw	r20, r28
     f8e:	4f 5f       	subi	r20, 0xFF	; 255
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	6f ef       	ldi	r22, 0xFF	; 255
     f94:	c7 01       	movw	r24, r14
     f96:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <SPI_transfer>
     f9a:	08 2f       	mov	r16, r24
		array[i] = data;
     f9c:	f6 01       	movw	r30, r12
     f9e:	e8 0d       	add	r30, r8
     fa0:	f9 1d       	adc	r31, r9
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     fa6:	ff ef       	ldi	r31, 0xFF	; 255
     fa8:	8f 1a       	sub	r8, r31
     faa:	9f 0a       	sbc	r9, r31
     fac:	8a 14       	cp	r8, r10
     fae:	9b 04       	cpc	r9, r11
     fb0:	68 f3       	brcs	.-38     	; 0xf8c <read_block+0x8c>
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <read_block+0xc8>

	// step d

	for(uint8_t i = 0; i < 3; i++)
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     fb6:	ae 01       	movw	r20, r28
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	6f ef       	ldi	r22, 0xFF	; 255
     fbe:	c7 01       	movw	r24, r14
     fc0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <SPI_transmit>
     fc4:	08 2f       	mov	r16, r24
		array[i] = data;
	}

	// step d

	for(uint8_t i = 0; i < 3; i++)
     fc6:	1f 5f       	subi	r17, 0xFF	; 255
     fc8:	13 30       	cpi	r17, 0x03	; 3
     fca:	a8 f3       	brcs	.-22     	; 0xfb6 <read_block+0xb6>
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     fcc:	80 2f       	mov	r24, r16
     fce:	05 c0       	rjmp	.+10     	; 0xfda <read_block+0xda>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
	{
		return ERROR_CMD0;
     fd0:	8b ef       	ldi	r24, 0xFB	; 251
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <read_block+0xda>
	}
	if(data != 0)
	{
		return ERROR_CMD8;
     fd4:	8a ef       	ldi	r24, 0xFA	; 250
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <read_block+0xda>
		array[0] = data;
	}
	else
	{
		//error
		return ERROR_TIMEOUT;
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
}
     fda:	0f 90       	pop	r0
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	bf 90       	pop	r11
     fee:	af 90       	pop	r10
     ff0:	9f 90       	pop	r9
     ff2:	8f 90       	pop	r8
     ff4:	08 95       	ret

00000ff6 <mount_drive>:

//global vars:
uint32_t g_fat_start_sector, g_first_data_sector, g_root_dir_sectors, g_secPerClus, g_resvdSecCnt, g_bytsPerSec;

uint8_t mount_drive(FS_values_t* fs)
{
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	c6 50       	subi	r28, 0x06	; 6
    1020:	d2 40       	sbci	r29, 0x02	; 2
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	1c 01       	movw	r2, r24
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
    102e:	9e 01       	movw	r18, r28
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	52 e0       	ldi	r21, 0x02	; 2
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	cb 01       	movw	r24, r22
    103e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
    1042:	18 2f       	mov	r17, r24
    1044:	81 11       	cpse	r24, r1
    1046:	94 c1       	rjmp	.+808    	; 0x1370 <mount_drive+0x37a>
	{
		return 1; //error
	}
	
	// determine if 0 is MBR or BPB
	if (array[0] != 0xEB && array[0] != 0xE9)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8b 3e       	cpi	r24, 0xEB	; 235
    104c:	a9 f0       	breq	.+42     	; 0x1078 <mount_drive+0x82>
    104e:	89 3e       	cpi	r24, 0xE9	; 233
    1050:	b9 f0       	breq	.+46     	; 0x1080 <mount_drive+0x8a>
	{
		//likely the MBR, read relative sectors value at 0x01C6
		mbr_relative_sectors = read_value_32(0x01C6, array);
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	86 ec       	ldi	r24, 0xC6	; 198
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 04 0b 	call	0x1608	; 0x1608 <read_value_32>
    1060:	6b 01       	movw	r12, r22
    1062:	7c 01       	movw	r14, r24
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
    1064:	9e 01       	movw	r18, r28
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	52 e0       	ldi	r21, 0x02	; 2
    106e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
    1072:	81 11       	cpse	r24, r1
    1074:	7f c1       	rjmp	.+766    	; 0x1374 <mount_drive+0x37e>
    1076:	07 c0       	rjmp	.+14     	; 0x1086 <mount_drive+0x90>
uint32_t g_fat_start_sector, g_first_data_sector, g_root_dir_sectors, g_secPerClus, g_resvdSecCnt, g_bytsPerSec;

uint8_t mount_drive(FS_values_t* fs)
{
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
    1078:	c1 2c       	mov	r12, r1
    107a:	d1 2c       	mov	r13, r1
    107c:	76 01       	movw	r14, r12
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <mount_drive+0x90>
    1080:	c1 2c       	mov	r12, r1
    1082:	d1 2c       	mov	r13, r1
    1084:	76 01       	movw	r14, r12
		{
			return 2; //error
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8b 3e       	cpi	r24, 0xEB	; 235
    108a:	19 f0       	breq	.+6      	; 0x1092 <mount_drive+0x9c>
    108c:	89 3e       	cpi	r24, 0xE9	; 233
    108e:	09 f0       	breq	.+2      	; 0x1092 <mount_drive+0x9c>
    1090:	73 c1       	rjmp	.+742    	; 0x1378 <mount_drive+0x382>
	{
		return 3; //error, BPB not found
	}
	
	// b - read values and determine FAT type
	fs->BytesPerSec = read_value_16(11, array);
    1092:	be 01       	movw	r22, r28
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8b e0       	ldi	r24, 0x0B	; 11
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    10a0:	d1 01       	movw	r26, r2
    10a2:	15 96       	adiw	r26, 0x05	; 5
    10a4:	9c 93       	st	X, r25
    10a6:	8e 93       	st	-X, r24
    10a8:	14 97       	sbiw	r26, 0x04	; 4
	fs->SecPerClus = read_value_8(13, array);
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8d e0       	ldi	r24, 0x0D	; 13
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
    10b8:	f1 01       	movw	r30, r2
    10ba:	80 83       	st	Z, r24
	uint16_t reservedSectorCount = read_value_16(14, array);
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8e e0       	ldi	r24, 0x0E	; 14
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    10ca:	5c 01       	movw	r10, r24
	uint8_t numFATs = read_value_8(16, array);
    10cc:	be 01       	movw	r22, r28
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	80 e1       	ldi	r24, 0x10	; 16
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <read_value_8>
    10da:	08 2f       	mov	r16, r24
	uint16_t rootEntCnt = read_value_16(17, array);
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	81 e1       	ldi	r24, 0x11	; 17
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    10ea:	cb 5f       	subi	r28, 0xFB	; 251
    10ec:	dd 4f       	sbci	r29, 0xFD	; 253
    10ee:	99 83       	std	Y+1, r25	; 0x01
    10f0:	88 83       	st	Y, r24
    10f2:	c5 50       	subi	r28, 0x05	; 5
    10f4:	d2 40       	sbci	r29, 0x02	; 2
	uint32_t totalSectors = read_value_16(19, array);
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	83 e1       	ldi	r24, 0x13	; 19
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    1104:	2c 01       	movw	r4, r24
    1106:	61 2c       	mov	r6, r1
    1108:	71 2c       	mov	r7, r1
	
	if (totalSectors == 0)
    110a:	41 14       	cp	r4, r1
    110c:	51 04       	cpc	r5, r1
    110e:	61 04       	cpc	r6, r1
    1110:	71 04       	cpc	r7, r1
    1112:	49 f4       	brne	.+18     	; 0x1126 <mount_drive+0x130>
	{
		totalSectors = read_value_32(32, array);
    1114:	be 01       	movw	r22, r28
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 04 0b 	call	0x1608	; 0x1608 <read_value_32>
    1122:	2b 01       	movw	r4, r22
    1124:	3c 01       	movw	r6, r24
	}
	uint32_t fatSize = read_value_16(22, array);
    1126:	be 01       	movw	r22, r28
    1128:	6f 5f       	subi	r22, 0xFF	; 255
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	86 e1       	ldi	r24, 0x16	; 22
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    1134:	9c 01       	movw	r18, r24
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	dd 4f       	sbci	r29, 0xFD	; 253
    113e:	28 83       	st	Y, r18
    1140:	39 83       	std	Y+1, r19	; 0x01
    1142:	4a 83       	std	Y+2, r20	; 0x02
    1144:	5b 83       	std	Y+3, r21	; 0x03
    1146:	c1 50       	subi	r28, 0x01	; 1
    1148:	d2 40       	sbci	r29, 0x02	; 2
	if (fatSize == 0)
    114a:	23 2b       	or	r18, r19
    114c:	24 2b       	or	r18, r20
    114e:	25 2b       	or	r18, r21
    1150:	79 f4       	brne	.+30     	; 0x1170 <mount_drive+0x17a>
	{
		fatSize = read_value_32(36, array);
    1152:	be 01       	movw	r22, r28
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	84 e2       	ldi	r24, 0x24	; 36
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 04 0b 	call	0x1608	; 0x1608 <read_value_32>
    1160:	cf 5f       	subi	r28, 0xFF	; 255
    1162:	dd 4f       	sbci	r29, 0xFD	; 253
    1164:	68 83       	st	Y, r22
    1166:	79 83       	std	Y+1, r23	; 0x01
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	9b 83       	std	Y+3, r25	; 0x03
    116c:	c1 50       	subi	r28, 0x01	; 1
    116e:	d2 40       	sbci	r29, 0x02	; 2
	}
	
	uint32_t totalClusters = totalSectors / fs->SecPerClus;
    1170:	d1 01       	movw	r26, r2
    1172:	2c 91       	ld	r18, X
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	c3 01       	movw	r24, r6
    117c:	b2 01       	movw	r22, r4
    117e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__udivmodsi4>
	if (totalClusters < 65525)
    1182:	25 3f       	cpi	r18, 0xF5	; 245
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	41 05       	cpc	r20, r1
    1188:	51 05       	cpc	r21, r1
    118a:	20 f4       	brcc	.+8      	; 0x1194 <mount_drive+0x19e>
	{
		fs->FATtype = 16;
    118c:	80 e1       	ldi	r24, 0x10	; 16
    118e:	f1 01       	movw	r30, r2
    1190:	81 83       	std	Z+1, r24	; 0x01
    1192:	04 c0       	rjmp	.+8      	; 0x119c <mount_drive+0x1a6>
	}
	else
	{
		fs->FATtype = 32;
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	d1 01       	movw	r26, r2
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	8c 93       	st	X, r24
	}
	
	// c - calulate starting sector numbers for FAT, 1st data sector, 1st root dir. Global vars.
	fs->StartofFAT = reservedSectorCount;
    119c:	45 01       	movw	r8, r10
    119e:	a1 2c       	mov	r10, r1
    11a0:	b1 2c       	mov	r11, r1
    11a2:	f1 01       	movw	r30, r2
    11a4:	86 86       	std	Z+14, r8	; 0x0e
    11a6:	97 86       	std	Z+15, r9	; 0x0f
    11a8:	a0 8a       	std	Z+16, r10	; 0x10
    11aa:	b1 8a       	std	Z+17, r11	; 0x11
	if (fs->FATtype == 32)
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	80 32       	cpi	r24, 0x20	; 32
    11b0:	29 f5       	brne	.+74     	; 0x11fc <mount_drive+0x206>
	{
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize) + read_value_32(44, array);
    11b2:	a0 2f       	mov	r26, r16
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	cf 5f       	subi	r28, 0xFF	; 255
    11b8:	dd 4f       	sbci	r29, 0xFD	; 253
    11ba:	28 81       	ld	r18, Y
    11bc:	39 81       	ldd	r19, Y+1	; 0x01
    11be:	4a 81       	ldd	r20, Y+2	; 0x02
    11c0:	5b 81       	ldd	r21, Y+3	; 0x03
    11c2:	c1 50       	subi	r28, 0x01	; 1
    11c4:	d2 40       	sbci	r29, 0x02	; 2
    11c6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    11ca:	24 01       	movw	r4, r8
    11cc:	35 01       	movw	r6, r10
    11ce:	46 0e       	add	r4, r22
    11d0:	57 1e       	adc	r5, r23
    11d2:	68 1e       	adc	r6, r24
    11d4:	79 1e       	adc	r7, r25
    11d6:	be 01       	movw	r22, r28
    11d8:	6f 5f       	subi	r22, 0xFF	; 255
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	8c e2       	ldi	r24, 0x2C	; 44
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 04 0b 	call	0x1608	; 0x1608 <read_value_32>
    11e4:	46 0e       	add	r4, r22
    11e6:	57 1e       	adc	r5, r23
    11e8:	68 1e       	adc	r6, r24
    11ea:	79 1e       	adc	r7, r25
    11ec:	d1 01       	movw	r26, r2
    11ee:	16 96       	adiw	r26, 0x06	; 6
    11f0:	4d 92       	st	X+, r4
    11f2:	5d 92       	st	X+, r5
    11f4:	6d 92       	st	X+, r6
    11f6:	7c 92       	st	X, r7
    11f8:	19 97       	sbiw	r26, 0x09	; 9
    11fa:	36 c0       	rjmp	.+108    	; 0x1268 <mount_drive+0x272>
	}
	else
	{
		fs->RootDirSecs = ((read_value_16(17,array) * 32) + (fs->BytesPerSec - 1)) / fs->BytesPerSec;
    11fc:	be 01       	movw	r22, r28
    11fe:	6f 5f       	subi	r22, 0xFF	; 255
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	81 e1       	ldi	r24, 0x11	; 17
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <read_value_16>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	82 95       	swap	r24
    1210:	92 95       	swap	r25
    1212:	90 7f       	andi	r25, 0xF0	; 240
    1214:	98 27       	eor	r25, r24
    1216:	80 7f       	andi	r24, 0xF0	; 240
    1218:	98 27       	eor	r25, r24
    121a:	f1 01       	movw	r30, r2
    121c:	64 81       	ldd	r22, Z+4	; 0x04
    121e:	75 81       	ldd	r23, Z+5	; 0x05
    1220:	86 0f       	add	r24, r22
    1222:	97 1f       	adc	r25, r23
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__udivmodhi4>
    122a:	cb 01       	movw	r24, r22
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	82 8b       	std	Z+18, r24	; 0x12
    1232:	93 8b       	std	Z+19, r25	; 0x13
    1234:	a4 8b       	std	Z+20, r26	; 0x14
    1236:	b5 8b       	std	Z+21, r27	; 0x15
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize);
    1238:	46 84       	ldd	r4, Z+14	; 0x0e
    123a:	57 84       	ldd	r5, Z+15	; 0x0f
    123c:	60 88       	ldd	r6, Z+16	; 0x10
    123e:	71 88       	ldd	r7, Z+17	; 0x11
    1240:	a0 2f       	mov	r26, r16
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	cf 5f       	subi	r28, 0xFF	; 255
    1246:	dd 4f       	sbci	r29, 0xFD	; 253
    1248:	28 81       	ld	r18, Y
    124a:	39 81       	ldd	r19, Y+1	; 0x01
    124c:	4a 81       	ldd	r20, Y+2	; 0x02
    124e:	5b 81       	ldd	r21, Y+3	; 0x03
    1250:	c1 50       	subi	r28, 0x01	; 1
    1252:	d2 40       	sbci	r29, 0x02	; 2
    1254:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    1258:	46 0e       	add	r4, r22
    125a:	57 1e       	adc	r5, r23
    125c:	68 1e       	adc	r6, r24
    125e:	79 1e       	adc	r7, r25
    1260:	46 82       	std	Z+6, r4	; 0x06
    1262:	57 82       	std	Z+7, r5	; 0x07
    1264:	60 86       	std	Z+8, r6	; 0x08
    1266:	71 86       	std	Z+9, r7	; 0x09
	}
	fs->FirstDataSec = fs->FirstRootDirSec + fs->RootDirSecs;
    1268:	f1 01       	movw	r30, r2
    126a:	46 81       	ldd	r20, Z+6	; 0x06
    126c:	57 81       	ldd	r21, Z+7	; 0x07
    126e:	60 85       	ldd	r22, Z+8	; 0x08
    1270:	71 85       	ldd	r23, Z+9	; 0x09
    1272:	82 89       	ldd	r24, Z+18	; 0x12
    1274:	93 89       	ldd	r25, Z+19	; 0x13
    1276:	a4 89       	ldd	r26, Z+20	; 0x14
    1278:	b5 89       	ldd	r27, Z+21	; 0x15
    127a:	84 0f       	add	r24, r20
    127c:	95 1f       	adc	r25, r21
    127e:	a6 1f       	adc	r26, r22
    1280:	b7 1f       	adc	r27, r23
    1282:	82 87       	std	Z+10, r24	; 0x0a
    1284:	93 87       	std	Z+11, r25	; 0x0b
    1286:	a4 87       	std	Z+12, r26	; 0x0c
    1288:	b5 87       	std	Z+13, r27	; 0x0d
	
	//assign globals
	g_fat_start_sector = reservedSectorCount + mbr_relative_sectors;
    128a:	d7 01       	movw	r26, r14
    128c:	c6 01       	movw	r24, r12
    128e:	88 0d       	add	r24, r8
    1290:	99 1d       	adc	r25, r9
    1292:	aa 1d       	adc	r26, r10
    1294:	bb 1d       	adc	r27, r11
    1296:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <g_fat_start_sector>
    129a:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <g_fat_start_sector+0x1>
    129e:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <g_fat_start_sector+0x2>
    12a2:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <g_fat_start_sector+0x3>
	g_root_dir_sectors = ((rootEntCnt * 32) + (fs->BytesPerSec-1)) / (fs->BytesPerSec);
    12a6:	cb 5f       	subi	r28, 0xFB	; 251
    12a8:	dd 4f       	sbci	r29, 0xFD	; 253
    12aa:	88 81       	ld	r24, Y
    12ac:	99 81       	ldd	r25, Y+1	; 0x01
    12ae:	c5 50       	subi	r28, 0x05	; 5
    12b0:	d2 40       	sbci	r29, 0x02	; 2
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	82 95       	swap	r24
    12b8:	92 95       	swap	r25
    12ba:	90 7f       	andi	r25, 0xF0	; 240
    12bc:	98 27       	eor	r25, r24
    12be:	80 7f       	andi	r24, 0xF0	; 240
    12c0:	98 27       	eor	r25, r24
    12c2:	04 80       	ldd	r0, Z+4	; 0x04
    12c4:	f5 81       	ldd	r31, Z+5	; 0x05
    12c6:	e0 2d       	mov	r30, r0
    12c8:	8e 0f       	add	r24, r30
    12ca:	9f 1f       	adc	r25, r31
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	bf 01       	movw	r22, r30
    12d0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__udivmodhi4>
    12d4:	2b 01       	movw	r4, r22
    12d6:	61 2c       	mov	r6, r1
    12d8:	71 2c       	mov	r7, r1
    12da:	40 92 78 02 	sts	0x0278, r4	; 0x800278 <g_root_dir_sectors>
    12de:	50 92 79 02 	sts	0x0279, r5	; 0x800279 <g_root_dir_sectors+0x1>
    12e2:	60 92 7a 02 	sts	0x027A, r6	; 0x80027a <g_root_dir_sectors+0x2>
    12e6:	70 92 7b 02 	sts	0x027B, r7	; 0x80027b <g_root_dir_sectors+0x3>
	g_first_data_sector = reservedSectorCount + (numFATs * fatSize) + g_root_dir_sectors + mbr_relative_sectors;
    12ea:	a0 2f       	mov	r26, r16
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	cf 5f       	subi	r28, 0xFF	; 255
    12f0:	dd 4f       	sbci	r29, 0xFD	; 253
    12f2:	28 81       	ld	r18, Y
    12f4:	39 81       	ldd	r19, Y+1	; 0x01
    12f6:	4a 81       	ldd	r20, Y+2	; 0x02
    12f8:	5b 81       	ldd	r21, Y+3	; 0x03
    12fa:	c1 50       	subi	r28, 0x01	; 1
    12fc:	d2 40       	sbci	r29, 0x02	; 2
    12fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	88 0d       	add	r24, r8
    1308:	99 1d       	adc	r25, r9
    130a:	aa 1d       	adc	r26, r10
    130c:	bb 1d       	adc	r27, r11
    130e:	48 0e       	add	r4, r24
    1310:	59 1e       	adc	r5, r25
    1312:	6a 1e       	adc	r6, r26
    1314:	7b 1e       	adc	r7, r27
    1316:	c4 0c       	add	r12, r4
    1318:	d5 1c       	adc	r13, r5
    131a:	e6 1c       	adc	r14, r6
    131c:	f7 1c       	adc	r15, r7
    131e:	c0 92 70 02 	sts	0x0270, r12	; 0x800270 <g_first_data_sector>
    1322:	d0 92 71 02 	sts	0x0271, r13	; 0x800271 <g_first_data_sector+0x1>
    1326:	e0 92 72 02 	sts	0x0272, r14	; 0x800272 <g_first_data_sector+0x2>
    132a:	f0 92 73 02 	sts	0x0273, r15	; 0x800273 <g_first_data_sector+0x3>
	g_secPerClus = fs->SecPerClus;
    132e:	d1 01       	movw	r26, r2
    1330:	8c 91       	ld	r24, X
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <g_secPerClus>
    133c:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <g_secPerClus+0x1>
    1340:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <g_secPerClus+0x2>
    1344:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <g_secPerClus+0x3>
	g_resvdSecCnt = reservedSectorCount;
    1348:	80 92 74 02 	sts	0x0274, r8	; 0x800274 <g_resvdSecCnt>
    134c:	90 92 75 02 	sts	0x0275, r9	; 0x800275 <g_resvdSecCnt+0x1>
    1350:	a0 92 76 02 	sts	0x0276, r10	; 0x800276 <g_resvdSecCnt+0x2>
    1354:	b0 92 77 02 	sts	0x0277, r11	; 0x800277 <g_resvdSecCnt+0x3>
	g_bytsPerSec = fs->BytesPerSec;
    1358:	cf 01       	movw	r24, r30
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <g_bytsPerSec>
    1362:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <g_bytsPerSec+0x1>
    1366:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <g_bytsPerSec+0x2>
    136a:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <g_bytsPerSec+0x3>
	
	
	return 0; //success
    136e:	05 c0       	rjmp	.+10     	; 0x137a <mount_drive+0x384>
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
	{
		return 1; //error
    1370:	11 e0       	ldi	r17, 0x01	; 1
    1372:	03 c0       	rjmp	.+6      	; 0x137a <mount_drive+0x384>
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
		{
			return 2; //error
    1374:	12 e0       	ldi	r17, 0x02	; 2
    1376:	01 c0       	rjmp	.+2      	; 0x137a <mount_drive+0x384>
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
	{
		return 3; //error, BPB not found
    1378:	13 e0       	ldi	r17, 0x03	; 3
	g_resvdSecCnt = reservedSectorCount;
	g_bytsPerSec = fs->BytesPerSec;
	
	
	return 0; //success
}
    137a:	81 2f       	mov	r24, r17
    137c:	ca 5f       	subi	r28, 0xFA	; 250
    137e:	dd 4f       	sbci	r29, 0xFD	; 253
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	9f 90       	pop	r9
    13a0:	8f 90       	pop	r8
    13a2:	7f 90       	pop	r7
    13a4:	6f 90       	pop	r6
    13a6:	5f 90       	pop	r5
    13a8:	4f 90       	pop	r4
    13aa:	3f 90       	pop	r3
    13ac:	2f 90       	pop	r2
    13ae:	08 95       	ret

000013b0 <first_sector>:

uint32_t first_sector(uint32_t cluster_num)
{
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
	if(cluster_num == 0)
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	81 05       	cpc	r24, r1
    13ba:	91 05       	cpc	r25, r1
    13bc:	49 f4       	brne	.+18     	; 0x13d0 <first_sector+0x20>
	{
		return g_first_data_sector;
    13be:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <g_first_data_sector>
    13c2:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <g_first_data_sector+0x1>
    13c6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <g_first_data_sector+0x2>
    13ca:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <g_first_data_sector+0x3>
    13ce:	2e c0       	rjmp	.+92     	; 0x142c <first_sector+0x7c>
	}
	else if(cluster_num <= 2)
    13d0:	63 30       	cpi	r22, 0x03	; 3
    13d2:	71 05       	cpc	r23, r1
    13d4:	81 05       	cpc	r24, r1
    13d6:	91 05       	cpc	r25, r1
    13d8:	68 f4       	brcc	.+26     	; 0x13f4 <first_sector+0x44>
	{
		return g_first_data_sector + cluster_num;
    13da:	00 91 70 02 	lds	r16, 0x0270	; 0x800270 <g_first_data_sector>
    13de:	10 91 71 02 	lds	r17, 0x0271	; 0x800271 <g_first_data_sector+0x1>
    13e2:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <g_first_data_sector+0x2>
    13e6:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <g_first_data_sector+0x3>
    13ea:	60 0f       	add	r22, r16
    13ec:	71 1f       	adc	r23, r17
    13ee:	82 1f       	adc	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	1c c0       	rjmp	.+56     	; 0x142c <first_sector+0x7c>
	}
	return ((cluster_num-2) * g_secPerClus) + g_first_data_sector;
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	22 50       	subi	r18, 0x02	; 2
    13fa:	31 09       	sbc	r19, r1
    13fc:	41 09       	sbc	r20, r1
    13fe:	51 09       	sbc	r21, r1
    1400:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <g_secPerClus>
    1404:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <g_secPerClus+0x1>
    1408:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_secPerClus+0x2>
    140c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_secPerClus+0x3>
    1410:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
    1414:	00 91 70 02 	lds	r16, 0x0270	; 0x800270 <g_first_data_sector>
    1418:	10 91 71 02 	lds	r17, 0x0271	; 0x800271 <g_first_data_sector+0x1>
    141c:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <g_first_data_sector+0x2>
    1420:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <g_first_data_sector+0x3>
    1424:	60 0f       	add	r22, r16
    1426:	71 1f       	adc	r23, r17
    1428:	82 1f       	adc	r24, r18
    142a:	93 1f       	adc	r25, r19
}
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <find_next_clus>:

uint32_t find_next_clus(uint32_t cluster_num, uint8_t array[])
{
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ea 01       	movw	r28, r20
	uint32_t FATOffset = (cluster_num * 4);
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	cc 0c       	add	r12, r12
    1446:	dd 1c       	adc	r13, r13
    1448:	ee 1c       	adc	r14, r14
    144a:	ff 1c       	adc	r15, r15
    144c:	cc 0c       	add	r12, r12
    144e:	dd 1c       	adc	r13, r13
    1450:	ee 1c       	adc	r14, r14
    1452:	ff 1c       	adc	r15, r15
	// a
	uint32_t ThisFATSecNum = g_resvdSecCnt + (FATOffset / g_bytsPerSec);
    1454:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <g_bytsPerSec>
    1458:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <g_bytsPerSec+0x1>
    145c:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <g_bytsPerSec+0x2>
    1460:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <g_bytsPerSec+0x3>
    1464:	c7 01       	movw	r24, r14
    1466:	b6 01       	movw	r22, r12
    1468:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__udivmodsi4>
    146c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <g_resvdSecCnt>
    1470:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <g_resvdSecCnt+0x1>
    1474:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <g_resvdSecCnt+0x2>
    1478:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <g_resvdSecCnt+0x3>
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	62 0f       	add	r22, r18
    1482:	73 1f       	adc	r23, r19
    1484:	84 1f       	adc	r24, r20
    1486:	95 1f       	adc	r25, r21
	// b
	read_sector(ThisFATSecNum, 512, array);
    1488:	9e 01       	movw	r18, r28
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	52 e0       	ldi	r21, 0x02	; 2
    148e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
	// c
	uint32_t ThisFATEntOffset = FATOffset % g_bytsPerSec;
    1492:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <g_bytsPerSec>
    1496:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <g_bytsPerSec+0x1>
    149a:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <g_bytsPerSec+0x2>
    149e:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <g_bytsPerSec+0x3>
    14a2:	c7 01       	movw	r24, r14
    14a4:	b6 01       	movw	r22, r12
    14a6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__udivmodsi4>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
	// d
	uint32_t temp32 = read_value_32(ThisFATEntOffset, array);
    14ae:	be 01       	movw	r22, r28
    14b0:	0e 94 04 0b 	call	0x1608	; 0x1608 <read_value_32>
	// e
	temp32 &= 0x0FFFFFFF;
    14b4:	9f 70       	andi	r25, 0x0F	; 15
	// f
	// blank
	
	return temp32;
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	08 95       	ret

000014c4 <print_file>:

void print_file(uint32_t first_cluster, uint8_t *buffer) {
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	4b 01       	movw	r8, r22
    14da:	5c 01       	movw	r10, r24
    14dc:	ea 01       	movw	r28, r20
    14de:	c1 2c       	mov	r12, r1
    14e0:	d1 2c       	mov	r13, r1
    14e2:	76 01       	movw	r14, r12
	uint32_t current_sector;
	uint32_t sector_in_cluster = 0;

	while (1) {
		// Calculate first sector of the current cluster
		current_sector = first_sector(current_cluster);
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <first_sector>

		// Read and print the sector
		read_sector(current_sector + sector_in_cluster, 512, buffer);
    14ec:	6c 0d       	add	r22, r12
    14ee:	7d 1d       	adc	r23, r13
    14f0:	8e 1d       	adc	r24, r14
    14f2:	9f 1d       	adc	r25, r15
    14f4:	9e 01       	movw	r18, r28
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	52 e0       	ldi	r21, 0x02	; 2
    14fa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <read_sector>
		print_memory(buffer, 512); 
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	72 e0       	ldi	r23, 0x02	; 2
    1502:	ce 01       	movw	r24, r28
    1504:	0e 94 51 05 	call	0xaa2	; 0xaa2 <print_memory>

		// Print sector and cluster information for debugging
		//printf("Cluster: %lu, Sector: %lu\n", current_cluster, current_sector + sector_in_cluster);

		// User interaction
		UART_transmit_string(UART1, "Enter 0 to stop, 1 to continue:\n", 32);
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	64 e8       	ldi	r22, 0x84	; 132
    150e:	71 e0       	ldi	r23, 0x01	; 1
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
		uint8_t user_input = long_serial_input(UART1);
    1518:	88 ec       	ldi	r24, 0xC8	; 200
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 24 03 	call	0x648	; 0x648 <long_serial_input>
		if (user_input == 0) {
    1520:	88 23       	and	r24, r24
    1522:	39 f1       	breq	.+78     	; 0x1572 <print_file+0xae>
			return; // Exit the loop if the user chooses to exit
		}

		// Move to the next sector
		sector_in_cluster++;
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	c8 1a       	sub	r12, r24
    1528:	d8 0a       	sbc	r13, r24
    152a:	e8 0a       	sbc	r14, r24
    152c:	f8 0a       	sbc	r15, r24
		if (sector_in_cluster >= g_secPerClus) {
    152e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <g_secPerClus>
    1532:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <g_secPerClus+0x1>
    1536:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <g_secPerClus+0x2>
    153a:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <g_secPerClus+0x3>
    153e:	c8 16       	cp	r12, r24
    1540:	d9 06       	cpc	r13, r25
    1542:	ea 06       	cpc	r14, r26
    1544:	fb 06       	cpc	r15, r27
    1546:	70 f2       	brcs	.-100    	; 0x14e4 <print_file+0x20>
			// Find the next cluster if all sectors in the current cluster are printed
			current_cluster = find_next_clus(current_cluster, buffer);
    1548:	ae 01       	movw	r20, r28
    154a:	c5 01       	movw	r24, r10
    154c:	b4 01       	movw	r22, r8
    154e:	0e 94 19 0a 	call	0x1432	; 0x1432 <find_next_clus>
    1552:	4b 01       	movw	r8, r22
    1554:	5c 01       	movw	r10, r24
			if ((current_cluster == 0x00000007) || (current_cluster == 0x0FFFFFFF)) {
    1556:	87 e0       	ldi	r24, 0x07	; 7
    1558:	88 16       	cp	r8, r24
    155a:	91 04       	cpc	r9, r1
    155c:	a1 04       	cpc	r10, r1
    155e:	b1 04       	cpc	r11, r1
    1560:	41 f0       	breq	.+16     	; 0x1572 <print_file+0xae>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	88 16       	cp	r8, r24
    1566:	98 06       	cpc	r9, r24
    1568:	a8 06       	cpc	r10, r24
    156a:	8f e0       	ldi	r24, 0x0F	; 15
    156c:	b8 06       	cpc	r11, r24
    156e:	09 f0       	breq	.+2      	; 0x1572 <print_file+0xae>
    1570:	b6 cf       	rjmp	.-148    	; 0x14de <print_file+0x1a>
			}
			sector_in_cluster = 0; // Reset the sector counter for the new cluster
		}
	}
	return;
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
    157e:	bf 90       	pop	r11
    1580:	af 90       	pop	r10
    1582:	9f 90       	pop	r9
    1584:	8f 90       	pop	r8
    1586:	08 95       	ret

00001588 <read_sector>:
 */ 

#include "SD.h"

uint8_t read_sector( uint32_t sector_number, uint16_t sector_size, uint8_t* data_array)
{
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	6b 01       	movw	r12, r22
    159a:	7c 01       	movw	r14, r24
    159c:	ea 01       	movw	r28, r20
    159e:	89 01       	movw	r16, r18
	// Initialize SPI before using this function!
	
	// set CS active (low)
	SD_CS_active(PB, (1<<4));
    15a0:	60 e1       	ldi	r22, 0x10	; 16
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	83 e2       	ldi	r24, 0x23	; 35
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SD_CS_active>
	
	// send CMD 17 and sector number
	send_command(SPI0, CMD17, sector_number);
    15ac:	a7 01       	movw	r20, r14
    15ae:	96 01       	movw	r18, r12
    15b0:	61 e1       	ldi	r22, 0x11	; 17
    15b2:	8c e4       	ldi	r24, 0x4C	; 76
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 7f 05 	call	0xafe	; 0xafe <send_command>
	
	// write data into array
	uint8_t error = read_block(SPI0, sector_size, data_array);
    15ba:	a8 01       	movw	r20, r16
    15bc:	be 01       	movw	r22, r28
    15be:	8c e4       	ldi	r24, 0x4C	; 76
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 80 07 	call	0xf00	; 0xf00 <read_block>
	if(error != 0)
    15c6:	81 11       	cpse	r24, r1
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <read_sector+0x50>
	{
		return error; //error
	}
	
	// set CS inactive (high)
	SD_CS_inactive(PB, (1<<4));
    15ca:	60 e1       	ldi	r22, 0x10	; 16
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	83 e2       	ldi	r24, 0x23	; 35
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <SD_CS_inactive>
	
	return 0; //success
    15d6:	80 e0       	ldi	r24, 0x00	; 0
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	08 95       	ret

000015ea <read_value_8>:
{
	//array holds the sector data that this function reads
	// a - add offset value to array ptr
	// b - read each byte into correct location of return value. Left shifts
	// c - print for debug
	return array[offset];
    15ea:	86 0f       	add	r24, r22
    15ec:	97 1f       	adc	r25, r23
}
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	08 95       	ret

000015f4 <read_value_16>:
uint16_t read_value_16 (uint16_t offset, uint8_t array[])
{
	uint16_t value = 0;
	value |= array[offset];
    15f4:	fb 01       	movw	r30, r22
    15f6:	e8 0f       	add	r30, r24
    15f8:	f9 1f       	adc	r31, r25
    15fa:	20 81       	ld	r18, Z
	value |= (uint16_t)array[offset+1]<<8;
    15fc:	81 81       	ldd	r24, Z+1	; 0x01
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	98 2f       	mov	r25, r24
    1602:	88 27       	eor	r24, r24
	return value;
}
    1604:	82 2b       	or	r24, r18
    1606:	08 95       	ret

00001608 <read_value_32>:
uint32_t read_value_32 (uint16_t offset, uint8_t array[])
{
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
	uint32_t value = 0;
	value |= array[offset];
    160c:	fb 01       	movw	r30, r22
    160e:	e8 0f       	add	r30, r24
    1610:	f9 1f       	adc	r31, r25
    1612:	20 81       	ld	r18, Z
	value |= (uint32_t)array[offset+1]<<8;
    1614:	61 81       	ldd	r22, Z+1	; 0x01
    1616:	86 2f       	mov	r24, r22
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ba 2f       	mov	r27, r26
    1620:	a9 2f       	mov	r26, r25
    1622:	98 2f       	mov	r25, r24
    1624:	88 27       	eor	r24, r24
    1626:	82 2b       	or	r24, r18
	value |= (uint32_t)array[offset+2]<<16;
    1628:	02 81       	ldd	r16, Z+2	; 0x02
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	98 01       	movw	r18, r16
    1632:	11 27       	eor	r17, r17
    1634:	00 27       	eor	r16, r16
    1636:	ac 01       	movw	r20, r24
    1638:	bd 01       	movw	r22, r26
    163a:	40 2b       	or	r20, r16
    163c:	51 2b       	or	r21, r17
    163e:	62 2b       	or	r22, r18
    1640:	73 2b       	or	r23, r19
	value |= (uint32_t)array[offset+3]<<24;
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	b8 2f       	mov	r27, r24
    164c:	aa 27       	eor	r26, r26
    164e:	99 27       	eor	r25, r25
    1650:	88 27       	eor	r24, r24
    1652:	8a 01       	movw	r16, r20
    1654:	9b 01       	movw	r18, r22
    1656:	08 2b       	or	r16, r24
    1658:	19 2b       	or	r17, r25
    165a:	2a 2b       	or	r18, r26
    165c:	3b 2b       	or	r19, r27
    165e:	c9 01       	movw	r24, r18
    1660:	b8 01       	movw	r22, r16
	return value;
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <round_up_pwr2>:
#include "gpio_output.h"
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	a8 f0       	brcs	.+42     	; 0x1696 <round_up_pwr2+0x2e>
        return 1;
    }
    if (n > 128) {
    166c:	81 38       	cpi	r24, 0x81	; 129
    166e:	a8 f4       	brcc	.+42     	; 0x169a <round_up_pwr2+0x32>
        return 128;
    }
    n--; // the -- ensures that you don't round up when it's already a power of 2.
    1670:	81 50       	subi	r24, 0x01	; 1
    n |= n >> 1; // ORs with 1 shift right
    1672:	98 2f       	mov	r25, r24
    1674:	96 95       	lsr	r25
    1676:	89 2b       	or	r24, r25
    n |= n >> 2; // ORs with 2-bit shift right
    1678:	98 2f       	mov	r25, r24
    167a:	96 95       	lsr	r25
    167c:	96 95       	lsr	r25
    167e:	89 2b       	or	r24, r25
    n |= n >> 4; // ORs with 4-bit shift right
    1680:	98 2f       	mov	r25, r24
    1682:	92 95       	swap	r25
    1684:	9f 70       	andi	r25, 0x0F	; 15
    1686:	89 2b       	or	r24, r25
    n |= n >> 7; // ORs with 7-bit shit right
    1688:	98 2f       	mov	r25, r24
    168a:	99 1f       	adc	r25, r25
    168c:	99 27       	eor	r25, r25
    168e:	99 1f       	adc	r25, r25
    1690:	89 2b       	or	r24, r25
    return n + 1; // inc to power of 2 
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	08 95       	ret
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
        return 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	08 95       	ret
    }
    if (n > 128) {
        return 128;
    169a:	80 e8       	ldi	r24, 0x80	; 128
    n |= n >> 1; // ORs with 1 shift right
    n |= n >> 2; // ORs with 2-bit shift right
    n |= n >> 4; // ORs with 4-bit shift right
    n |= n >> 7; // ORs with 7-bit shit right
    return n + 1; // inc to power of 2 
}
    169c:	08 95       	ret

0000169e <get_spi_prescaler_mask>:

uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    169e:	0e 94 34 0b 	call	0x1668	; 0x1668 <round_up_pwr2>
    
    switch (rounded_value) {
    16a2:	80 31       	cpi	r24, 0x10	; 16
    16a4:	c1 f0       	breq	.+48     	; 0x16d6 <get_spi_prescaler_mask+0x38>
    16a6:	28 f4       	brcc	.+10     	; 0x16b2 <get_spi_prescaler_mask+0x14>
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	79 f0       	breq	.+30     	; 0x16ca <get_spi_prescaler_mask+0x2c>
    16ac:	88 30       	cpi	r24, 0x08	; 8
    16ae:	79 f0       	breq	.+30     	; 0x16ce <get_spi_prescaler_mask+0x30>
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <get_spi_prescaler_mask+0x20>
    16b2:	80 34       	cpi	r24, 0x40	; 64
    16b4:	31 f0       	breq	.+12     	; 0x16c2 <get_spi_prescaler_mask+0x24>
    16b6:	80 38       	cpi	r24, 0x80	; 128
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <get_spi_prescaler_mask+0x28>
    16ba:	80 32       	cpi	r24, 0x20	; 32
    16bc:	51 f0       	breq	.+20     	; 0x16d2 <get_spi_prescaler_mask+0x34>
        case 4:   return 0b000;
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	08 95       	ret
        case 16:  return 0b001;
        case 64:  return 0b010;
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	08 95       	ret
        case 128: return 0b011;
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	08 95       	ret
        case 2:   return 0b100;
    16ca:	84 e0       	ldi	r24, 0x04	; 4
    16cc:	08 95       	ret
        case 8:   return 0b101;
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	08 95       	ret
        case 32:  return 0b110;
    16d2:	86 e0       	ldi	r24, 0x06	; 6
    16d4:	08 95       	ret
uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    
    switch (rounded_value) {
        case 4:   return 0b000;
        case 16:  return 0b001;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
        case 2:   return 0b100;
        case 8:   return 0b101;
        case 32:  return 0b110;
        default:  return 0b000; // Default case
    }
}
    16d8:	08 95       	ret

000016da <SPI_master_init>:

void SPI_master_init(volatile SPI_t * SPI_addr, uint32_t clock_rate)
{
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
    16e0:	9a 01       	movw	r18, r20
    16e2:	ab 01       	movw	r20, r22
    // CPOL CPHA - Clear CPOL and CPHA (0)
	// These are preference-based but must be unanimous with other code
    SPI_addr->control_reg &= (~(3<<2));
    16e4:	88 81       	ld	r24, Y
    16e6:	83 7f       	andi	r24, 0xF3	; 243
    16e8:	88 83       	st	Y, r24
    // SPE - Enable SPI (1)
    SPI_addr->control_reg |= (1<<6);
    16ea:	88 81       	ld	r24, Y
    16ec:	80 64       	ori	r24, 0x40	; 64
    16ee:	88 83       	st	Y, r24
    // MSTR - Set to master mode (1)
    SPI_addr->control_reg |= (1<<4);
    16f0:	88 81       	ld	r24, Y
    16f2:	80 61       	ori	r24, 0x10	; 16
    16f4:	88 83       	st	Y, r24
    // DORD - Clear to make MSB first (0)
    SPI_addr->control_reg &= (~(1<<5));
    16f6:	88 81       	ld	r24, Y
    16f8:	8f 7d       	andi	r24, 0xDF	; 223
    16fa:	88 83       	st	Y, r24
    
    // Set clock rate based on the given `clock_rate`. You can use a series of if-else conditions to check which prescaler value to use.
    uint8_t divider = (F_CPU / OSC_DIV ) / (clock_rate);
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	74 e2       	ldi	r23, 0x24	; 36
    1700:	84 ef       	ldi	r24, 0xF4	; 244
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__udivmodsi4>
    1708:	82 2f       	mov	r24, r18
    uint8_t mask = get_spi_prescaler_mask(divider);
    170a:	0e 94 4f 0b 	call	0x169e	; 0x169e <get_spi_prescaler_mask>
    SPI_addr->control_reg |= (mask%4); // takes bottom 2 bits or mask & 0x3
    170e:	98 81       	ld	r25, Y
    1710:	28 2f       	mov	r18, r24
    1712:	23 70       	andi	r18, 0x03	; 3
    1714:	92 2b       	or	r25, r18
    1716:	98 83       	st	Y, r25
    SPI_addr->status_reg |= (mask/4); // takes bit 2
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	89 2b       	or	r24, r25
    1720:	89 83       	std	Y+1, r24	; 0x01

    //add MOSI & SCK pins based on whether it's SPI0 or SPI1
    if(SPI_addr == SPI0)
    1722:	cc 34       	cpi	r28, 0x4C	; 76
    1724:	d1 05       	cpc	r29, r1
    1726:	a9 f4       	brne	.+42     	; 0x1752 <SPI_master_init+0x78>
    {
		GPIO_Output_Init(PB, (1<<5));
    1728:	60 e2       	ldi	r22, 0x20	; 32
    172a:	83 e2       	ldi	r24, 0x23	; 35
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
		GPIO_Output_Set(PB, (1<<5));
    1732:	60 e2       	ldi	r22, 0x20	; 32
    1734:	83 e2       	ldi	r24, 0x23	; 35
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 19 03 	call	0x632	; 0x632 <GPIO_Output_Set>
		
		GPIO_Output_Init(PB, (1<<7));
    173c:	60 e8       	ldi	r22, 0x80	; 128
    173e:	83 e2       	ldi	r24, 0x23	; 35
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_Output_Init>
		GPIO_Output_Clear(PB, (1<<7));
    1746:	60 e8       	ldi	r22, 0x80	; 128
    1748:	83 e2       	ldi	r24, 0x23	; 35
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 1e 03 	call	0x63c	; 0x63c <GPIO_Output_Clear>
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <SPI_master_init+0x96>
		
        //PB->DDR_REG |= (1<<5) | (1<<7); //MOSI & SCK Output
        //PB->PORT_REG |= (1<<5);  //MOSI 1
        //PB->PORT_REG &= ~(1<<7); //SCK 0
    }
    else if (SPI_addr == SPI1)
    1752:	cc 3a       	cpi	r28, 0xAC	; 172
    1754:	d1 05       	cpc	r29, r1
    1756:	61 f4       	brne	.+24     	; 0x1770 <SPI_master_init+0x96>
    {
        PE->DDR_REG |= (1<<3);          // MOSI output
    1758:	8d b1       	in	r24, 0x0d	; 13
    175a:	88 60       	ori	r24, 0x08	; 8
    175c:	8d b9       	out	0x0d, r24	; 13
        PD->DDR_REG |= (1<<7);          // SCK output
    175e:	8a b1       	in	r24, 0x0a	; 10
    1760:	80 68       	ori	r24, 0x80	; 128
    1762:	8a b9       	out	0x0a, r24	; 10
        PE->PORT_REG |= (1<<3);         // MOSI 1
    1764:	8e b1       	in	r24, 0x0e	; 14
    1766:	88 60       	ori	r24, 0x08	; 8
    1768:	8e b9       	out	0x0e, r24	; 14
        PD->PORT_REG &= ~(1<<7);        // SCK 0
    176a:	8b b1       	in	r24, 0x0b	; 11
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	8b b9       	out	0x0b, r24	; 11
    }

}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <SPI_transmit>:

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    1776:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
    1778:	62 83       	std	Z+2, r22	; 0x02

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    177e:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    1780:	2f 5f       	subi	r18, 0xFF	; 255
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    1784:	99 23       	and	r25, r25
    1786:	1c f0       	brlt	.+6      	; 0x178e <SPI_transmit+0x18>
    1788:	21 15       	cp	r18, r1
    178a:	31 05       	cpc	r19, r1
    178c:	c1 f7       	brne	.-16     	; 0x177e <SPI_transmit+0x8>

    if(timeout == 0)
    178e:	23 2b       	or	r18, r19
    1790:	21 f4       	brne	.+8      	; 0x179a <SPI_transmit+0x24>
    {
        *data = 0xFF;
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	fa 01       	movw	r30, r20
    1796:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    1798:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    179a:	89 2f       	mov	r24, r25
    179c:	80 74       	andi	r24, 0x40	; 64
    179e:	96 ff       	sbrs	r25, 6
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <SPI_transmit+0x36>
    {
        *data = (SPI_addr->data_reg);
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	fa 01       	movw	r30, r20
    17a6:	80 83       	st	Z, r24
        return ERROR_SPI;
    17a8:	8e ef       	ldi	r24, 0xFE	; 254
    17aa:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    17ac:	92 81       	ldd	r25, Z+2	; 0x02
    17ae:	fa 01       	movw	r30, r20
    17b0:	90 83       	st	Z, r25
        return 0;
    }
}
    17b2:	08 95       	ret

000017b4 <SPI_receive>:
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    17b4:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	82 83       	std	Z+2, r24	; 0x02
}
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    17be:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    17c0:	2f 5f       	subi	r18, 0xFF	; 255
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    17c4:	99 23       	and	r25, r25
    17c6:	1c f0       	brlt	.+6      	; 0x17ce <SPI_receive+0x1a>
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	c1 f7       	brne	.-16     	; 0x17be <SPI_receive+0xa>

    if(timeout == 0)
    17ce:	23 2b       	or	r18, r19
    17d0:	21 f4       	brne	.+8      	; 0x17da <SPI_receive+0x26>
    {
        *data = 0xFF;
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	fb 01       	movw	r30, r22
    17d6:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    17d8:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    17da:	89 2f       	mov	r24, r25
    17dc:	80 74       	andi	r24, 0x40	; 64
    17de:	96 ff       	sbrs	r25, 6
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <SPI_receive+0x38>
    {
        *data = (SPI_addr->data_reg);
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	fb 01       	movw	r30, r22
    17e6:	80 83       	st	Z, r24
        return ERROR_SPI;
    17e8:	8e ef       	ldi	r24, 0xFE	; 254
    17ea:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    17ec:	92 81       	ldd	r25, Z+2	; 0x02
    17ee:	fb 01       	movw	r30, r22
    17f0:	90 83       	st	Z, r25
        return 0;
    }
}
    17f2:	08 95       	ret

000017f4 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
    17f4:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
    17f6:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    1802:	99 23       	and	r25, r25
    1804:	1c f0       	brlt	.+6      	; 0x180c <SPI_transfer+0x18>
    1806:	21 15       	cp	r18, r1
    1808:	31 05       	cpc	r19, r1
    180a:	c1 f7       	brne	.-16     	; 0x17fc <SPI_transfer+0x8>

    if(timeout == 0)
    180c:	23 2b       	or	r18, r19
    180e:	21 f4       	brne	.+8      	; 0x1818 <SPI_transfer+0x24>
    {
        *data = 0xFF;
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	fa 01       	movw	r30, r20
    1814:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    1816:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    1818:	89 2f       	mov	r24, r25
    181a:	80 74       	andi	r24, 0x40	; 64
    181c:	96 ff       	sbrs	r25, 6
    181e:	05 c0       	rjmp	.+10     	; 0x182a <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	fa 01       	movw	r30, r20
    1824:	80 83       	st	Z, r24
        return ERROR_SPI;
    1826:	8e ef       	ldi	r24, 0xFE	; 254
    1828:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    182a:	92 81       	ldd	r25, Z+2	; 0x02
    182c:	fa 01       	movw	r30, r20
    182e:	90 83       	st	Z, r25
        return 0;
    }
}
    1830:	08 95       	ret

00001832 <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
    1832:	86 2f       	mov	r24, r22
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	fc 01       	movw	r30, r24
    1838:	e4 5f       	subi	r30, 0xF4	; 244
    183a:	f1 09       	sbc	r31, r1
    183c:	ec 30       	cpi	r30, 0x0C	; 12
    183e:	f1 05       	cpc	r31, r1
    1840:	08 f0       	brcs	.+2      	; 0x1844 <display_error+0x12>
    1842:	64 c0       	rjmp	.+200    	; 0x190c <display_error+0xda>
    1844:	ea 59       	subi	r30, 0x9A	; 154
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__tablejump2__>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
    184c:	48 e0       	ldi	r20, 0x08	; 8
    184e:	65 ea       	ldi	r22, 0xA5	; 165
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	88 ec       	ldi	r24, 0xC8	; 200
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    185a:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
    185c:	44 e0       	ldi	r20, 0x04	; 4
    185e:	6e ea       	ldi	r22, 0xAE	; 174
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    186a:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
    186c:	43 e0       	ldi	r20, 0x03	; 3
    186e:	63 eb       	ldi	r22, 0xB3	; 179
    1870:	71 e0       	ldi	r23, 0x01	; 1
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    187a:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
    187c:	4c e0       	ldi	r20, 0x0C	; 12
    187e:	67 eb       	ldi	r22, 0xB7	; 183
    1880:	71 e0       	ldi	r23, 0x01	; 1
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    188a:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
    188c:	45 e0       	ldi	r20, 0x05	; 5
    188e:	64 ec       	ldi	r22, 0xC4	; 196
    1890:	71 e0       	ldi	r23, 0x01	; 1
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    189a:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
    189c:	45 e0       	ldi	r20, 0x05	; 5
    189e:	6a ec       	ldi	r22, 0xCA	; 202
    18a0:	71 e0       	ldi	r23, 0x01	; 1
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18aa:	08 95       	ret
        case ERROR_CMD58:
			UART_transmit_string(1, "CMD58\n", 6);
    18ac:	46 e0       	ldi	r20, 0x06	; 6
    18ae:	60 ed       	ldi	r22, 0xD0	; 208
    18b0:	71 e0       	ldi	r23, 0x01	; 1
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18ba:	08 95       	ret
        case ERROR_CMD55:
			UART_transmit_string(UART1, "CMD55\n", 6);
    18bc:	46 e0       	ldi	r20, 0x06	; 6
    18be:	67 ed       	ldi	r22, 0xD7	; 215
    18c0:	71 e0       	ldi	r23, 0x01	; 1
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18ca:	08 95       	ret
        case ERROR_CMD41:
			UART_transmit_string(UART1, "CMD41\n", 6);
    18cc:	46 e0       	ldi	r20, 0x06	; 6
    18ce:	6e ed       	ldi	r22, 0xDE	; 222
    18d0:	71 e0       	ldi	r23, 0x01	; 1
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18da:	08 95       	ret
        case ERROR_CMD41_TIMEOUT:
			UART_transmit_string(UART1, "CMD41TIME\n", 10);
    18dc:	4a e0       	ldi	r20, 0x0A	; 10
    18de:	65 ee       	ldi	r22, 0xE5	; 229
    18e0:	71 e0       	ldi	r23, 0x01	; 1
    18e2:	88 ec       	ldi	r24, 0xC8	; 200
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18ea:	08 95       	ret
		case ERROR_TOKEN:
			UART_transmit_string(UART1, "TOKEN\n", 6);
    18ec:	46 e0       	ldi	r20, 0x06	; 6
    18ee:	60 ef       	ldi	r22, 0xF0	; 240
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	88 ec       	ldi	r24, 0xC8	; 200
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    18fa:	08 95       	ret
		case ERROR_CMD16:
			UART_transmit_string(UART1, "CMD16\n", 6);
    18fc:	46 e0       	ldi	r20, 0x06	; 6
    18fe:	67 ef       	ldi	r22, 0xF7	; 247
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	88 ec       	ldi	r24, 0xC8	; 200
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
			break;
    190a:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
    190c:	4b e0       	ldi	r20, 0x0B	; 11
    190e:	6e ef       	ldi	r22, 0xFE	; 254
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 cf 0c 	call	0x199e	; 0x199e <UART_transmit_string>
    191a:	08 95       	ret

0000191c <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
    191c:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
    191e:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
    1920:	87 e6       	ldi	r24, 0x67	; 103
    1922:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
    1924:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
    1926:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
    1928:	86 e0       	ldi	r24, 0x06	; 6
    192a:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
    192c:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
    192e:	88 e1       	ldi	r24, 0x18	; 24
    1930:	81 83       	std	Z+1, r24	; 0x01
    1932:	08 95       	ret

00001934 <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
    1934:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
    1936:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
    1938:	95 ff       	sbrs	r25, 5
    193a:	fd cf       	rjmp	.-6      	; 0x1936 <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
    193c:	66 83       	std	Z+6, r22	; 0x06
    193e:	08 95       	ret

00001940 <UART_receive>:
    return;
}


char UART_receive(volatile UART_t * UART_addr)
{
    1940:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UART_UCSRA);
    1942:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
    1944:	99 23       	and	r25, r25
    1946:	ec f7       	brge	.-6      	; 0x1942 <UART_receive+0x2>
	return (UART_addr->UART_UDR);  // return the value in the receive buffer
    1948:	86 81       	ldd	r24, Z+6	; 0x06
    194a:	08 95       	ret

0000194c <export_print_buffer>:

char * export_print_buffer(void)
{
	
	return print_buffer;
}
    194c:	8a e0       	ldi	r24, 0x0A	; 10
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	08 95       	ret

00001952 <copy_string_to_buffer>:

uint8_t copy_string_to_buffer(const char flash_string[], char buffer_p[], uint8_t num_bytes)
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
    1958:	41 11       	cpse	r20, r1
    195a:	1a c0       	rjmp	.+52     	; 0x1990 <copy_string_to_buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
    195c:	24 2f       	mov	r18, r20
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	fd 01       	movw	r30, r26
    1962:	e2 0f       	add	r30, r18
    1964:	f3 1f       	adc	r31, r19
    1966:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
    1968:	eb 01       	movw	r28, r22
    196a:	c2 0f       	add	r28, r18
    196c:	d3 1f       	adc	r29, r19
    196e:	e8 83       	st	Y, r30
			index++;
    1970:	4f 5f       	subi	r20, 0xFF	; 255
		} while (value!=0);
    1972:	e1 11       	cpse	r30, r1
    1974:	f3 cf       	rjmp	.-26     	; 0x195c <copy_string_to_buffer+0xa>
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <copy_string_to_buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
    1978:	29 2f       	mov	r18, r25
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	fd 01       	movw	r30, r26
    197e:	e2 0f       	add	r30, r18
    1980:	f3 1f       	adc	r31, r19
    1982:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
    1984:	eb 01       	movw	r28, r22
    1986:	c2 0f       	add	r28, r18
    1988:	d3 1f       	adc	r29, r19
    198a:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    198c:	9f 5f       	subi	r25, 0xFF	; 255
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <copy_string_to_buffer+0x40>
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	94 17       	cp	r25, r20
    1994:	88 f3       	brcs	.-30     	; 0x1978 <copy_string_to_buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
    1996:	84 2f       	mov	r24, r20
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <UART_transmit_string>:

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	7c 01       	movw	r14, r24
    19ac:	8b 01       	movw	r16, r22
    19ae:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
    19b0:	41 11       	cpse	r20, r1
    19b2:	18 c0       	rjmp	.+48     	; 0x19e4 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
    19b4:	fb 01       	movw	r30, r22
    19b6:	60 81       	ld	r22, Z
                index=0;
    19b8:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
    19bc:	c7 01       	movw	r24, r14
    19be:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			index++;
    19c2:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
    19c4:	f8 01       	movw	r30, r16
    19c6:	ec 0f       	add	r30, r28
    19c8:	f1 1d       	adc	r31, r1
    19ca:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
    19cc:	61 11       	cpse	r22, r1
    19ce:	f6 cf       	rjmp	.-20     	; 0x19bc <UART_transmit_string+0x1e>
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
    19d2:	f8 01       	movw	r30, r16
    19d4:	ec 0f       	add	r30, r28
    19d6:	f1 1d       	adc	r31, r1
    19d8:	60 81       	ld	r22, Z
    19da:	c7 01       	movw	r24, r14
    19dc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    19e0:	cf 5f       	subi	r28, 0xFF	; 255
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <UART_transmit_string+0x48>
    19e4:	c0 e0       	ldi	r28, 0x00	; 0
    19e6:	cd 17       	cp	r28, r29
    19e8:	a0 f3       	brcs	.-24     	; 0x19d2 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	08 95       	ret

000019f8 <__mulsi3>:
    19f8:	db 01       	movw	r26, r22
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	a2 9f       	mul	r26, r18
    1a08:	80 0d       	add	r24, r0
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	a3 9f       	mul	r26, r19
    1a0e:	90 0d       	add	r25, r0
    1a10:	b2 9f       	mul	r27, r18
    1a12:	90 0d       	add	r25, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	08 95       	ret

00001a18 <__udivmodhi4>:
    1a18:	aa 1b       	sub	r26, r26
    1a1a:	bb 1b       	sub	r27, r27
    1a1c:	51 e1       	ldi	r21, 0x11	; 17
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <__udivmodhi4_ep>

00001a20 <__udivmodhi4_loop>:
    1a20:	aa 1f       	adc	r26, r26
    1a22:	bb 1f       	adc	r27, r27
    1a24:	a6 17       	cp	r26, r22
    1a26:	b7 07       	cpc	r27, r23
    1a28:	10 f0       	brcs	.+4      	; 0x1a2e <__udivmodhi4_ep>
    1a2a:	a6 1b       	sub	r26, r22
    1a2c:	b7 0b       	sbc	r27, r23

00001a2e <__udivmodhi4_ep>:
    1a2e:	88 1f       	adc	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	5a 95       	dec	r21
    1a34:	a9 f7       	brne	.-22     	; 0x1a20 <__udivmodhi4_loop>
    1a36:	80 95       	com	r24
    1a38:	90 95       	com	r25
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	08 95       	ret

00001a40 <__udivmodsi4>:
    1a40:	a1 e2       	ldi	r26, 0x21	; 33
    1a42:	1a 2e       	mov	r1, r26
    1a44:	aa 1b       	sub	r26, r26
    1a46:	bb 1b       	sub	r27, r27
    1a48:	fd 01       	movw	r30, r26
    1a4a:	0d c0       	rjmp	.+26     	; 0x1a66 <__udivmodsi4_ep>

00001a4c <__udivmodsi4_loop>:
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	ee 1f       	adc	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	a2 17       	cp	r26, r18
    1a56:	b3 07       	cpc	r27, r19
    1a58:	e4 07       	cpc	r30, r20
    1a5a:	f5 07       	cpc	r31, r21
    1a5c:	20 f0       	brcs	.+8      	; 0x1a66 <__udivmodsi4_ep>
    1a5e:	a2 1b       	sub	r26, r18
    1a60:	b3 0b       	sbc	r27, r19
    1a62:	e4 0b       	sbc	r30, r20
    1a64:	f5 0b       	sbc	r31, r21

00001a66 <__udivmodsi4_ep>:
    1a66:	66 1f       	adc	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	1a 94       	dec	r1
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <__udivmodsi4_loop>
    1a72:	60 95       	com	r22
    1a74:	70 95       	com	r23
    1a76:	80 95       	com	r24
    1a78:	90 95       	com	r25
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	bd 01       	movw	r22, r26
    1a80:	cf 01       	movw	r24, r30
    1a82:	08 95       	ret

00001a84 <__tablejump2__>:
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	05 90       	lpm	r0, Z+
    1a8a:	f4 91       	lpm	r31, Z
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	09 94       	ijmp

00001a90 <__muluhisi3>:
    1a90:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__umulhisi3>
    1a94:	a5 9f       	mul	r26, r21
    1a96:	90 0d       	add	r25, r0
    1a98:	b4 9f       	mul	r27, r20
    1a9a:	90 0d       	add	r25, r0
    1a9c:	a4 9f       	mul	r26, r20
    1a9e:	80 0d       	add	r24, r0
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	11 24       	eor	r1, r1
    1aa4:	08 95       	ret

00001aa6 <__umulhisi3>:
    1aa6:	a2 9f       	mul	r26, r18
    1aa8:	b0 01       	movw	r22, r0
    1aaa:	b3 9f       	mul	r27, r19
    1aac:	c0 01       	movw	r24, r0
    1aae:	a3 9f       	mul	r26, r19
    1ab0:	70 0d       	add	r23, r0
    1ab2:	81 1d       	adc	r24, r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	91 1d       	adc	r25, r1
    1ab8:	b2 9f       	mul	r27, r18
    1aba:	70 0d       	add	r23, r0
    1abc:	81 1d       	adc	r24, r1
    1abe:	11 24       	eor	r1, r1
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	08 95       	ret

00001ac4 <atol>:
    1ac4:	1f 93       	push	r17
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	99 27       	eor	r25, r25
    1aca:	88 27       	eor	r24, r24
    1acc:	bc 01       	movw	r22, r24
    1ace:	e8 94       	clt
    1ad0:	11 91       	ld	r17, Z+
    1ad2:	10 32       	cpi	r17, 0x20	; 32
    1ad4:	e9 f3       	breq	.-6      	; 0x1ad0 <atol+0xc>
    1ad6:	19 30       	cpi	r17, 0x09	; 9
    1ad8:	10 f0       	brcs	.+4      	; 0x1ade <atol+0x1a>
    1ada:	1e 30       	cpi	r17, 0x0E	; 14
    1adc:	c8 f3       	brcs	.-14     	; 0x1ad0 <atol+0xc>
    1ade:	1b 32       	cpi	r17, 0x2B	; 43
    1ae0:	51 f0       	breq	.+20     	; 0x1af6 <atol+0x32>
    1ae2:	1d 32       	cpi	r17, 0x2D	; 45
    1ae4:	49 f4       	brne	.+18     	; 0x1af8 <atol+0x34>
    1ae6:	68 94       	set
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <atol+0x32>
    1aea:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__mulsi_const_10>
    1aee:	61 0f       	add	r22, r17
    1af0:	71 1d       	adc	r23, r1
    1af2:	81 1d       	adc	r24, r1
    1af4:	91 1d       	adc	r25, r1
    1af6:	11 91       	ld	r17, Z+
    1af8:	10 53       	subi	r17, 0x30	; 48
    1afa:	1a 30       	cpi	r17, 0x0A	; 10
    1afc:	b0 f3       	brcs	.-20     	; 0x1aea <atol+0x26>
    1afe:	3e f4       	brtc	.+14     	; 0x1b0e <atol+0x4a>
    1b00:	90 95       	com	r25
    1b02:	80 95       	com	r24
    1b04:	70 95       	com	r23
    1b06:	61 95       	neg	r22
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	1f 91       	pop	r17
    1b10:	08 95       	ret

00001b12 <__mulsi_const_10>:
    1b12:	59 2f       	mov	r21, r25
    1b14:	48 2f       	mov	r20, r24
    1b16:	37 2f       	mov	r19, r23
    1b18:	26 2f       	mov	r18, r22
    1b1a:	66 0f       	add	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	66 0f       	add	r22, r22
    1b24:	77 1f       	adc	r23, r23
    1b26:	88 1f       	adc	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	62 0f       	add	r22, r18
    1b2c:	73 1f       	adc	r23, r19
    1b2e:	84 1f       	adc	r24, r20
    1b30:	95 1f       	adc	r25, r21
    1b32:	66 0f       	add	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	08 95       	ret

00001b3c <sprintf>:
    1b3c:	ae e0       	ldi	r26, 0x0E	; 14
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 ea       	ldi	r30, 0xA4	; 164
    1b42:	fd e0       	ldi	r31, 0x0D	; 13
    1b44:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__+0x1c>
    1b48:	0d 89       	ldd	r16, Y+21	; 0x15
    1b4a:	1e 89       	ldd	r17, Y+22	; 0x16
    1b4c:	86 e0       	ldi	r24, 0x06	; 6
    1b4e:	8c 83       	std	Y+4, r24	; 0x04
    1b50:	1a 83       	std	Y+2, r17	; 0x02
    1b52:	09 83       	std	Y+1, r16	; 0x01
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	9f e7       	ldi	r25, 0x7F	; 127
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	ae 01       	movw	r20, r28
    1b5e:	47 5e       	subi	r20, 0xE7	; 231
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	6f 89       	ldd	r22, Y+23	; 0x17
    1b64:	78 8d       	ldd	r23, Y+24	; 0x18
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vfprintf>
    1b6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1b70:	f8 85       	ldd	r31, Y+8	; 0x08
    1b72:	e0 0f       	add	r30, r16
    1b74:	f1 1f       	adc	r31, r17
    1b76:	10 82       	st	Z, r1
    1b78:	2e 96       	adiw	r28, 0x0e	; 14
    1b7a:	e4 e0       	ldi	r30, 0x04	; 4
    1b7c:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__+0x1c>

00001b80 <vfprintf>:
    1b80:	ab e0       	ldi	r26, 0x0B	; 11
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e6 ec       	ldi	r30, 0xC6	; 198
    1b86:	fd e0       	ldi	r31, 0x0D	; 13
    1b88:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__prologue_saves__>
    1b8c:	6c 01       	movw	r12, r24
    1b8e:	7b 01       	movw	r14, r22
    1b90:	8a 01       	movw	r16, r20
    1b92:	fc 01       	movw	r30, r24
    1b94:	17 82       	std	Z+7, r1	; 0x07
    1b96:	16 82       	std	Z+6, r1	; 0x06
    1b98:	83 81       	ldd	r24, Z+3	; 0x03
    1b9a:	81 ff       	sbrs	r24, 1
    1b9c:	cc c1       	rjmp	.+920    	; 0x1f36 <vfprintf+0x3b6>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	3c 01       	movw	r6, r24
    1ba4:	f6 01       	movw	r30, r12
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	f7 01       	movw	r30, r14
    1baa:	93 fd       	sbrc	r25, 3
    1bac:	85 91       	lpm	r24, Z+
    1bae:	93 ff       	sbrs	r25, 3
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	7f 01       	movw	r14, r30
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <vfprintf+0x3a>
    1bb8:	ba c1       	rjmp	.+884    	; 0x1f2e <vfprintf+0x3ae>
    1bba:	85 32       	cpi	r24, 0x25	; 37
    1bbc:	39 f4       	brne	.+14     	; 0x1bcc <vfprintf+0x4c>
    1bbe:	93 fd       	sbrc	r25, 3
    1bc0:	85 91       	lpm	r24, Z+
    1bc2:	93 ff       	sbrs	r25, 3
    1bc4:	81 91       	ld	r24, Z+
    1bc6:	7f 01       	movw	r14, r30
    1bc8:	85 32       	cpi	r24, 0x25	; 37
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <vfprintf+0x56>
    1bcc:	b6 01       	movw	r22, r12
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1bd4:	e7 cf       	rjmp	.-50     	; 0x1ba4 <vfprintf+0x24>
    1bd6:	91 2c       	mov	r9, r1
    1bd8:	21 2c       	mov	r2, r1
    1bda:	31 2c       	mov	r3, r1
    1bdc:	ff e1       	ldi	r31, 0x1F	; 31
    1bde:	f3 15       	cp	r31, r3
    1be0:	d8 f0       	brcs	.+54     	; 0x1c18 <vfprintf+0x98>
    1be2:	8b 32       	cpi	r24, 0x2B	; 43
    1be4:	79 f0       	breq	.+30     	; 0x1c04 <vfprintf+0x84>
    1be6:	38 f4       	brcc	.+14     	; 0x1bf6 <vfprintf+0x76>
    1be8:	80 32       	cpi	r24, 0x20	; 32
    1bea:	79 f0       	breq	.+30     	; 0x1c0a <vfprintf+0x8a>
    1bec:	83 32       	cpi	r24, 0x23	; 35
    1bee:	a1 f4       	brne	.+40     	; 0x1c18 <vfprintf+0x98>
    1bf0:	23 2d       	mov	r18, r3
    1bf2:	20 61       	ori	r18, 0x10	; 16
    1bf4:	1d c0       	rjmp	.+58     	; 0x1c30 <vfprintf+0xb0>
    1bf6:	8d 32       	cpi	r24, 0x2D	; 45
    1bf8:	61 f0       	breq	.+24     	; 0x1c12 <vfprintf+0x92>
    1bfa:	80 33       	cpi	r24, 0x30	; 48
    1bfc:	69 f4       	brne	.+26     	; 0x1c18 <vfprintf+0x98>
    1bfe:	23 2d       	mov	r18, r3
    1c00:	21 60       	ori	r18, 0x01	; 1
    1c02:	16 c0       	rjmp	.+44     	; 0x1c30 <vfprintf+0xb0>
    1c04:	83 2d       	mov	r24, r3
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	38 2e       	mov	r3, r24
    1c0a:	e3 2d       	mov	r30, r3
    1c0c:	e4 60       	ori	r30, 0x04	; 4
    1c0e:	3e 2e       	mov	r3, r30
    1c10:	2a c0       	rjmp	.+84     	; 0x1c66 <vfprintf+0xe6>
    1c12:	f3 2d       	mov	r31, r3
    1c14:	f8 60       	ori	r31, 0x08	; 8
    1c16:	1d c0       	rjmp	.+58     	; 0x1c52 <vfprintf+0xd2>
    1c18:	37 fc       	sbrc	r3, 7
    1c1a:	2d c0       	rjmp	.+90     	; 0x1c76 <vfprintf+0xf6>
    1c1c:	20 ed       	ldi	r18, 0xD0	; 208
    1c1e:	28 0f       	add	r18, r24
    1c20:	2a 30       	cpi	r18, 0x0A	; 10
    1c22:	40 f0       	brcs	.+16     	; 0x1c34 <vfprintf+0xb4>
    1c24:	8e 32       	cpi	r24, 0x2E	; 46
    1c26:	b9 f4       	brne	.+46     	; 0x1c56 <vfprintf+0xd6>
    1c28:	36 fc       	sbrc	r3, 6
    1c2a:	81 c1       	rjmp	.+770    	; 0x1f2e <vfprintf+0x3ae>
    1c2c:	23 2d       	mov	r18, r3
    1c2e:	20 64       	ori	r18, 0x40	; 64
    1c30:	32 2e       	mov	r3, r18
    1c32:	19 c0       	rjmp	.+50     	; 0x1c66 <vfprintf+0xe6>
    1c34:	36 fe       	sbrs	r3, 6
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0xc4>
    1c38:	8a e0       	ldi	r24, 0x0A	; 10
    1c3a:	98 9e       	mul	r9, r24
    1c3c:	20 0d       	add	r18, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	92 2e       	mov	r9, r18
    1c42:	11 c0       	rjmp	.+34     	; 0x1c66 <vfprintf+0xe6>
    1c44:	ea e0       	ldi	r30, 0x0A	; 10
    1c46:	2e 9e       	mul	r2, r30
    1c48:	20 0d       	add	r18, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	22 2e       	mov	r2, r18
    1c4e:	f3 2d       	mov	r31, r3
    1c50:	f0 62       	ori	r31, 0x20	; 32
    1c52:	3f 2e       	mov	r3, r31
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <vfprintf+0xe6>
    1c56:	8c 36       	cpi	r24, 0x6C	; 108
    1c58:	21 f4       	brne	.+8      	; 0x1c62 <vfprintf+0xe2>
    1c5a:	83 2d       	mov	r24, r3
    1c5c:	80 68       	ori	r24, 0x80	; 128
    1c5e:	38 2e       	mov	r3, r24
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <vfprintf+0xe6>
    1c62:	88 36       	cpi	r24, 0x68	; 104
    1c64:	41 f4       	brne	.+16     	; 0x1c76 <vfprintf+0xf6>
    1c66:	f7 01       	movw	r30, r14
    1c68:	93 fd       	sbrc	r25, 3
    1c6a:	85 91       	lpm	r24, Z+
    1c6c:	93 ff       	sbrs	r25, 3
    1c6e:	81 91       	ld	r24, Z+
    1c70:	7f 01       	movw	r14, r30
    1c72:	81 11       	cpse	r24, r1
    1c74:	b3 cf       	rjmp	.-154    	; 0x1bdc <vfprintf+0x5c>
    1c76:	98 2f       	mov	r25, r24
    1c78:	9f 7d       	andi	r25, 0xDF	; 223
    1c7a:	95 54       	subi	r25, 0x45	; 69
    1c7c:	93 30       	cpi	r25, 0x03	; 3
    1c7e:	28 f4       	brcc	.+10     	; 0x1c8a <vfprintf+0x10a>
    1c80:	0c 5f       	subi	r16, 0xFC	; 252
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	9f e3       	ldi	r25, 0x3F	; 63
    1c86:	99 83       	std	Y+1, r25	; 0x01
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <vfprintf+0x124>
    1c8a:	83 36       	cpi	r24, 0x63	; 99
    1c8c:	31 f0       	breq	.+12     	; 0x1c9a <vfprintf+0x11a>
    1c8e:	83 37       	cpi	r24, 0x73	; 115
    1c90:	71 f0       	breq	.+28     	; 0x1cae <vfprintf+0x12e>
    1c92:	83 35       	cpi	r24, 0x53	; 83
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <vfprintf+0x118>
    1c96:	59 c0       	rjmp	.+178    	; 0x1d4a <vfprintf+0x1ca>
    1c98:	21 c0       	rjmp	.+66     	; 0x1cdc <vfprintf+0x15c>
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	80 81       	ld	r24, Z
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	0e 5f       	subi	r16, 0xFE	; 254
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	88 24       	eor	r8, r8
    1ca6:	83 94       	inc	r8
    1ca8:	91 2c       	mov	r9, r1
    1caa:	53 01       	movw	r10, r6
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <vfprintf+0x154>
    1cae:	28 01       	movw	r4, r16
    1cb0:	f2 e0       	ldi	r31, 0x02	; 2
    1cb2:	4f 0e       	add	r4, r31
    1cb4:	51 1c       	adc	r5, r1
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	a0 80       	ld	r10, Z
    1cba:	b1 80       	ldd	r11, Z+1	; 0x01
    1cbc:	36 fe       	sbrs	r3, 6
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <vfprintf+0x146>
    1cc0:	69 2d       	mov	r22, r9
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <vfprintf+0x14a>
    1cc6:	6f ef       	ldi	r22, 0xFF	; 255
    1cc8:	7f ef       	ldi	r23, 0xFF	; 255
    1cca:	c5 01       	movw	r24, r10
    1ccc:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <strnlen>
    1cd0:	4c 01       	movw	r8, r24
    1cd2:	82 01       	movw	r16, r4
    1cd4:	f3 2d       	mov	r31, r3
    1cd6:	ff 77       	andi	r31, 0x7F	; 127
    1cd8:	3f 2e       	mov	r3, r31
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <vfprintf+0x188>
    1cdc:	28 01       	movw	r4, r16
    1cde:	22 e0       	ldi	r18, 0x02	; 2
    1ce0:	42 0e       	add	r4, r18
    1ce2:	51 1c       	adc	r5, r1
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	a0 80       	ld	r10, Z
    1ce8:	b1 80       	ldd	r11, Z+1	; 0x01
    1cea:	36 fe       	sbrs	r3, 6
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <vfprintf+0x174>
    1cee:	69 2d       	mov	r22, r9
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <vfprintf+0x178>
    1cf4:	6f ef       	ldi	r22, 0xFF	; 255
    1cf6:	7f ef       	ldi	r23, 0xFF	; 255
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <strnlen_P>
    1cfe:	4c 01       	movw	r8, r24
    1d00:	f3 2d       	mov	r31, r3
    1d02:	f0 68       	ori	r31, 0x80	; 128
    1d04:	3f 2e       	mov	r3, r31
    1d06:	82 01       	movw	r16, r4
    1d08:	33 fc       	sbrc	r3, 3
    1d0a:	1b c0       	rjmp	.+54     	; 0x1d42 <vfprintf+0x1c2>
    1d0c:	82 2d       	mov	r24, r2
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 16       	cp	r8, r24
    1d12:	99 06       	cpc	r9, r25
    1d14:	b0 f4       	brcc	.+44     	; 0x1d42 <vfprintf+0x1c2>
    1d16:	b6 01       	movw	r22, r12
    1d18:	80 e2       	ldi	r24, 0x20	; 32
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1d20:	2a 94       	dec	r2
    1d22:	f4 cf       	rjmp	.-24     	; 0x1d0c <vfprintf+0x18c>
    1d24:	f5 01       	movw	r30, r10
    1d26:	37 fc       	sbrc	r3, 7
    1d28:	85 91       	lpm	r24, Z+
    1d2a:	37 fe       	sbrs	r3, 7
    1d2c:	81 91       	ld	r24, Z+
    1d2e:	5f 01       	movw	r10, r30
    1d30:	b6 01       	movw	r22, r12
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1d38:	21 10       	cpse	r2, r1
    1d3a:	2a 94       	dec	r2
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	82 1a       	sub	r8, r18
    1d40:	91 08       	sbc	r9, r1
    1d42:	81 14       	cp	r8, r1
    1d44:	91 04       	cpc	r9, r1
    1d46:	71 f7       	brne	.-36     	; 0x1d24 <vfprintf+0x1a4>
    1d48:	e8 c0       	rjmp	.+464    	; 0x1f1a <vfprintf+0x39a>
    1d4a:	84 36       	cpi	r24, 0x64	; 100
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <vfprintf+0x1d2>
    1d4e:	89 36       	cpi	r24, 0x69	; 105
    1d50:	41 f5       	brne	.+80     	; 0x1da2 <vfprintf+0x222>
    1d52:	f8 01       	movw	r30, r16
    1d54:	37 fe       	sbrs	r3, 7
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <vfprintf+0x1e6>
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	0c 5f       	subi	r16, 0xFC	; 252
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	08 c0       	rjmp	.+16     	; 0x1d76 <vfprintf+0x1f6>
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	07 2e       	mov	r0, r23
    1d6c:	00 0c       	add	r0, r0
    1d6e:	88 0b       	sbc	r24, r24
    1d70:	99 0b       	sbc	r25, r25
    1d72:	0e 5f       	subi	r16, 0xFE	; 254
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	f3 2d       	mov	r31, r3
    1d78:	ff 76       	andi	r31, 0x6F	; 111
    1d7a:	3f 2e       	mov	r3, r31
    1d7c:	97 ff       	sbrs	r25, 7
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <vfprintf+0x212>
    1d80:	90 95       	com	r25
    1d82:	80 95       	com	r24
    1d84:	70 95       	com	r23
    1d86:	61 95       	neg	r22
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	f0 68       	ori	r31, 0x80	; 128
    1d90:	3f 2e       	mov	r3, r31
    1d92:	2a e0       	ldi	r18, 0x0A	; 10
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	a3 01       	movw	r20, r6
    1d98:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__ultoa_invert>
    1d9c:	88 2e       	mov	r8, r24
    1d9e:	86 18       	sub	r8, r6
    1da0:	45 c0       	rjmp	.+138    	; 0x1e2c <vfprintf+0x2ac>
    1da2:	85 37       	cpi	r24, 0x75	; 117
    1da4:	31 f4       	brne	.+12     	; 0x1db2 <vfprintf+0x232>
    1da6:	23 2d       	mov	r18, r3
    1da8:	2f 7e       	andi	r18, 0xEF	; 239
    1daa:	b2 2e       	mov	r11, r18
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	25 c0       	rjmp	.+74     	; 0x1dfc <vfprintf+0x27c>
    1db2:	93 2d       	mov	r25, r3
    1db4:	99 7f       	andi	r25, 0xF9	; 249
    1db6:	b9 2e       	mov	r11, r25
    1db8:	8f 36       	cpi	r24, 0x6F	; 111
    1dba:	c1 f0       	breq	.+48     	; 0x1dec <vfprintf+0x26c>
    1dbc:	18 f4       	brcc	.+6      	; 0x1dc4 <vfprintf+0x244>
    1dbe:	88 35       	cpi	r24, 0x58	; 88
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <vfprintf+0x260>
    1dc2:	b5 c0       	rjmp	.+362    	; 0x1f2e <vfprintf+0x3ae>
    1dc4:	80 37       	cpi	r24, 0x70	; 112
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <vfprintf+0x24e>
    1dc8:	88 37       	cpi	r24, 0x78	; 120
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <vfprintf+0x254>
    1dcc:	b0 c0       	rjmp	.+352    	; 0x1f2e <vfprintf+0x3ae>
    1dce:	e9 2f       	mov	r30, r25
    1dd0:	e0 61       	ori	r30, 0x10	; 16
    1dd2:	be 2e       	mov	r11, r30
    1dd4:	b4 fe       	sbrs	r11, 4
    1dd6:	0d c0       	rjmp	.+26     	; 0x1df2 <vfprintf+0x272>
    1dd8:	fb 2d       	mov	r31, r11
    1dda:	f4 60       	ori	r31, 0x04	; 4
    1ddc:	bf 2e       	mov	r11, r31
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <vfprintf+0x272>
    1de0:	34 fe       	sbrs	r3, 4
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <vfprintf+0x278>
    1de4:	29 2f       	mov	r18, r25
    1de6:	26 60       	ori	r18, 0x06	; 6
    1de8:	b2 2e       	mov	r11, r18
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <vfprintf+0x278>
    1dec:	28 e0       	ldi	r18, 0x08	; 8
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <vfprintf+0x27c>
    1df2:	20 e1       	ldi	r18, 0x10	; 16
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <vfprintf+0x27c>
    1df8:	20 e1       	ldi	r18, 0x10	; 16
    1dfa:	32 e0       	ldi	r19, 0x02	; 2
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	b7 fe       	sbrs	r11, 7
    1e00:	07 c0       	rjmp	.+14     	; 0x1e10 <vfprintf+0x290>
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	0c 5f       	subi	r16, 0xFC	; 252
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <vfprintf+0x29c>
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 5f       	subi	r16, 0xFE	; 254
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	a3 01       	movw	r20, r6
    1e1e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__ultoa_invert>
    1e22:	88 2e       	mov	r8, r24
    1e24:	86 18       	sub	r8, r6
    1e26:	fb 2d       	mov	r31, r11
    1e28:	ff 77       	andi	r31, 0x7F	; 127
    1e2a:	3f 2e       	mov	r3, r31
    1e2c:	36 fe       	sbrs	r3, 6
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <vfprintf+0x2ca>
    1e30:	23 2d       	mov	r18, r3
    1e32:	2e 7f       	andi	r18, 0xFE	; 254
    1e34:	a2 2e       	mov	r10, r18
    1e36:	89 14       	cp	r8, r9
    1e38:	58 f4       	brcc	.+22     	; 0x1e50 <vfprintf+0x2d0>
    1e3a:	34 fe       	sbrs	r3, 4
    1e3c:	0b c0       	rjmp	.+22     	; 0x1e54 <vfprintf+0x2d4>
    1e3e:	32 fc       	sbrc	r3, 2
    1e40:	09 c0       	rjmp	.+18     	; 0x1e54 <vfprintf+0x2d4>
    1e42:	83 2d       	mov	r24, r3
    1e44:	8e 7e       	andi	r24, 0xEE	; 238
    1e46:	a8 2e       	mov	r10, r24
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <vfprintf+0x2d4>
    1e4a:	b8 2c       	mov	r11, r8
    1e4c:	a3 2c       	mov	r10, r3
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <vfprintf+0x2d6>
    1e50:	b8 2c       	mov	r11, r8
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <vfprintf+0x2d6>
    1e54:	b9 2c       	mov	r11, r9
    1e56:	a4 fe       	sbrs	r10, 4
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <vfprintf+0x2f8>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e8 0d       	add	r30, r8
    1e5e:	f1 1d       	adc	r31, r1
    1e60:	80 81       	ld	r24, Z
    1e62:	80 33       	cpi	r24, 0x30	; 48
    1e64:	21 f4       	brne	.+8      	; 0x1e6e <vfprintf+0x2ee>
    1e66:	9a 2d       	mov	r25, r10
    1e68:	99 7e       	andi	r25, 0xE9	; 233
    1e6a:	a9 2e       	mov	r10, r25
    1e6c:	09 c0       	rjmp	.+18     	; 0x1e80 <vfprintf+0x300>
    1e6e:	a2 fe       	sbrs	r10, 2
    1e70:	06 c0       	rjmp	.+12     	; 0x1e7e <vfprintf+0x2fe>
    1e72:	b3 94       	inc	r11
    1e74:	b3 94       	inc	r11
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <vfprintf+0x300>
    1e78:	8a 2d       	mov	r24, r10
    1e7a:	86 78       	andi	r24, 0x86	; 134
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <vfprintf+0x300>
    1e7e:	b3 94       	inc	r11
    1e80:	a3 fc       	sbrc	r10, 3
    1e82:	11 c0       	rjmp	.+34     	; 0x1ea6 <vfprintf+0x326>
    1e84:	a0 fe       	sbrs	r10, 0
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <vfprintf+0x314>
    1e88:	b2 14       	cp	r11, r2
    1e8a:	88 f4       	brcc	.+34     	; 0x1eae <vfprintf+0x32e>
    1e8c:	28 0c       	add	r2, r8
    1e8e:	92 2c       	mov	r9, r2
    1e90:	9b 18       	sub	r9, r11
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <vfprintf+0x330>
    1e94:	b2 14       	cp	r11, r2
    1e96:	60 f4       	brcc	.+24     	; 0x1eb0 <vfprintf+0x330>
    1e98:	b6 01       	movw	r22, r12
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1ea2:	b3 94       	inc	r11
    1ea4:	f7 cf       	rjmp	.-18     	; 0x1e94 <vfprintf+0x314>
    1ea6:	b2 14       	cp	r11, r2
    1ea8:	18 f4       	brcc	.+6      	; 0x1eb0 <vfprintf+0x330>
    1eaa:	2b 18       	sub	r2, r11
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <vfprintf+0x332>
    1eae:	98 2c       	mov	r9, r8
    1eb0:	21 2c       	mov	r2, r1
    1eb2:	a4 fe       	sbrs	r10, 4
    1eb4:	10 c0       	rjmp	.+32     	; 0x1ed6 <vfprintf+0x356>
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	80 e3       	ldi	r24, 0x30	; 48
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1ec0:	a2 fe       	sbrs	r10, 2
    1ec2:	17 c0       	rjmp	.+46     	; 0x1ef2 <vfprintf+0x372>
    1ec4:	a1 fc       	sbrc	r10, 1
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <vfprintf+0x34e>
    1ec8:	88 e7       	ldi	r24, 0x78	; 120
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <vfprintf+0x352>
    1ece:	88 e5       	ldi	r24, 0x58	; 88
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	b6 01       	movw	r22, r12
    1ed4:	0c c0       	rjmp	.+24     	; 0x1eee <vfprintf+0x36e>
    1ed6:	8a 2d       	mov	r24, r10
    1ed8:	86 78       	andi	r24, 0x86	; 134
    1eda:	59 f0       	breq	.+22     	; 0x1ef2 <vfprintf+0x372>
    1edc:	a1 fe       	sbrs	r10, 1
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x364>
    1ee0:	8b e2       	ldi	r24, 0x2B	; 43
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <vfprintf+0x366>
    1ee4:	80 e2       	ldi	r24, 0x20	; 32
    1ee6:	a7 fc       	sbrc	r10, 7
    1ee8:	8d e2       	ldi	r24, 0x2D	; 45
    1eea:	b6 01       	movw	r22, r12
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1ef2:	89 14       	cp	r8, r9
    1ef4:	38 f4       	brcc	.+14     	; 0x1f04 <vfprintf+0x384>
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	80 e3       	ldi	r24, 0x30	; 48
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1f00:	9a 94       	dec	r9
    1f02:	f7 cf       	rjmp	.-18     	; 0x1ef2 <vfprintf+0x372>
    1f04:	8a 94       	dec	r8
    1f06:	f3 01       	movw	r30, r6
    1f08:	e8 0d       	add	r30, r8
    1f0a:	f1 1d       	adc	r31, r1
    1f0c:	80 81       	ld	r24, Z
    1f0e:	b6 01       	movw	r22, r12
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1f16:	81 10       	cpse	r8, r1
    1f18:	f5 cf       	rjmp	.-22     	; 0x1f04 <vfprintf+0x384>
    1f1a:	22 20       	and	r2, r2
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <vfprintf+0x3a0>
    1f1e:	42 ce       	rjmp	.-892    	; 0x1ba4 <vfprintf+0x24>
    1f20:	b6 01       	movw	r22, r12
    1f22:	80 e2       	ldi	r24, 0x20	; 32
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <fputc>
    1f2a:	2a 94       	dec	r2
    1f2c:	f6 cf       	rjmp	.-20     	; 0x1f1a <vfprintf+0x39a>
    1f2e:	f6 01       	movw	r30, r12
    1f30:	86 81       	ldd	r24, Z+6	; 0x06
    1f32:	97 81       	ldd	r25, Z+7	; 0x07
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <vfprintf+0x3ba>
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	2b 96       	adiw	r28, 0x0b	; 11
    1f3c:	e2 e1       	ldi	r30, 0x12	; 18
    1f3e:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__epilogue_restores__>

00001f42 <strnlen_P>:
    1f42:	fc 01       	movw	r30, r24
    1f44:	05 90       	lpm	r0, Z+
    1f46:	61 50       	subi	r22, 0x01	; 1
    1f48:	70 40       	sbci	r23, 0x00	; 0
    1f4a:	01 10       	cpse	r0, r1
    1f4c:	d8 f7       	brcc	.-10     	; 0x1f44 <strnlen_P+0x2>
    1f4e:	80 95       	com	r24
    1f50:	90 95       	com	r25
    1f52:	8e 0f       	add	r24, r30
    1f54:	9f 1f       	adc	r25, r31
    1f56:	08 95       	ret

00001f58 <strnlen>:
    1f58:	fc 01       	movw	r30, r24
    1f5a:	61 50       	subi	r22, 0x01	; 1
    1f5c:	70 40       	sbci	r23, 0x00	; 0
    1f5e:	01 90       	ld	r0, Z+
    1f60:	01 10       	cpse	r0, r1
    1f62:	d8 f7       	brcc	.-10     	; 0x1f5a <strnlen+0x2>
    1f64:	80 95       	com	r24
    1f66:	90 95       	com	r25
    1f68:	8e 0f       	add	r24, r30
    1f6a:	9f 1f       	adc	r25, r31
    1f6c:	08 95       	ret

00001f6e <fputc>:
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	fb 01       	movw	r30, r22
    1f78:	23 81       	ldd	r18, Z+3	; 0x03
    1f7a:	21 fd       	sbrc	r18, 1
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <fputc+0x16>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	9f ef       	ldi	r25, 0xFF	; 255
    1f82:	2c c0       	rjmp	.+88     	; 0x1fdc <fputc+0x6e>
    1f84:	22 ff       	sbrs	r18, 2
    1f86:	16 c0       	rjmp	.+44     	; 0x1fb4 <fputc+0x46>
    1f88:	46 81       	ldd	r20, Z+6	; 0x06
    1f8a:	57 81       	ldd	r21, Z+7	; 0x07
    1f8c:	24 81       	ldd	r18, Z+4	; 0x04
    1f8e:	35 81       	ldd	r19, Z+5	; 0x05
    1f90:	42 17       	cp	r20, r18
    1f92:	53 07       	cpc	r21, r19
    1f94:	44 f4       	brge	.+16     	; 0x1fa6 <fputc+0x38>
    1f96:	a0 81       	ld	r26, Z
    1f98:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9a:	9d 01       	movw	r18, r26
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	31 83       	std	Z+1, r19	; 0x01
    1fa2:	20 83       	st	Z, r18
    1fa4:	8c 93       	st	X, r24
    1fa6:	26 81       	ldd	r18, Z+6	; 0x06
    1fa8:	37 81       	ldd	r19, Z+7	; 0x07
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	37 83       	std	Z+7, r19	; 0x07
    1fb0:	26 83       	std	Z+6, r18	; 0x06
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <fputc+0x6e>
    1fb4:	8b 01       	movw	r16, r22
    1fb6:	ec 01       	movw	r28, r24
    1fb8:	fb 01       	movw	r30, r22
    1fba:	00 84       	ldd	r0, Z+8	; 0x08
    1fbc:	f1 85       	ldd	r31, Z+9	; 0x09
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	09 95       	icall
    1fc2:	89 2b       	or	r24, r25
    1fc4:	e1 f6       	brne	.-72     	; 0x1f7e <fputc+0x10>
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	17 96       	adiw	r26, 0x07	; 7
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
    1fd8:	16 97       	sbiw	r26, 0x06	; 6
    1fda:	ce 01       	movw	r24, r28
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <__ultoa_invert>:
    1fe6:	fa 01       	movw	r30, r20
    1fe8:	aa 27       	eor	r26, r26
    1fea:	28 30       	cpi	r18, 0x08	; 8
    1fec:	51 f1       	breq	.+84     	; 0x2042 <__ultoa_invert+0x5c>
    1fee:	20 31       	cpi	r18, 0x10	; 16
    1ff0:	81 f1       	breq	.+96     	; 0x2052 <__ultoa_invert+0x6c>
    1ff2:	e8 94       	clt
    1ff4:	6f 93       	push	r22
    1ff6:	6e 7f       	andi	r22, 0xFE	; 254
    1ff8:	6e 5f       	subi	r22, 0xFE	; 254
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	af 4f       	sbci	r26, 0xFF	; 255
    2002:	b1 e0       	ldi	r27, 0x01	; 1
    2004:	3e d0       	rcall	.+124    	; 0x2082 <__ultoa_invert+0x9c>
    2006:	b4 e0       	ldi	r27, 0x04	; 4
    2008:	3c d0       	rcall	.+120    	; 0x2082 <__ultoa_invert+0x9c>
    200a:	67 0f       	add	r22, r23
    200c:	78 1f       	adc	r23, r24
    200e:	89 1f       	adc	r24, r25
    2010:	9a 1f       	adc	r25, r26
    2012:	a1 1d       	adc	r26, r1
    2014:	68 0f       	add	r22, r24
    2016:	79 1f       	adc	r23, r25
    2018:	8a 1f       	adc	r24, r26
    201a:	91 1d       	adc	r25, r1
    201c:	a1 1d       	adc	r26, r1
    201e:	6a 0f       	add	r22, r26
    2020:	71 1d       	adc	r23, r1
    2022:	81 1d       	adc	r24, r1
    2024:	91 1d       	adc	r25, r1
    2026:	a1 1d       	adc	r26, r1
    2028:	20 d0       	rcall	.+64     	; 0x206a <__ultoa_invert+0x84>
    202a:	09 f4       	brne	.+2      	; 0x202e <__ultoa_invert+0x48>
    202c:	68 94       	set
    202e:	3f 91       	pop	r19
    2030:	2a e0       	ldi	r18, 0x0A	; 10
    2032:	26 9f       	mul	r18, r22
    2034:	11 24       	eor	r1, r1
    2036:	30 19       	sub	r19, r0
    2038:	30 5d       	subi	r19, 0xD0	; 208
    203a:	31 93       	st	Z+, r19
    203c:	de f6       	brtc	.-74     	; 0x1ff4 <__ultoa_invert+0xe>
    203e:	cf 01       	movw	r24, r30
    2040:	08 95       	ret
    2042:	46 2f       	mov	r20, r22
    2044:	47 70       	andi	r20, 0x07	; 7
    2046:	40 5d       	subi	r20, 0xD0	; 208
    2048:	41 93       	st	Z+, r20
    204a:	b3 e0       	ldi	r27, 0x03	; 3
    204c:	0f d0       	rcall	.+30     	; 0x206c <__ultoa_invert+0x86>
    204e:	c9 f7       	brne	.-14     	; 0x2042 <__ultoa_invert+0x5c>
    2050:	f6 cf       	rjmp	.-20     	; 0x203e <__ultoa_invert+0x58>
    2052:	46 2f       	mov	r20, r22
    2054:	4f 70       	andi	r20, 0x0F	; 15
    2056:	40 5d       	subi	r20, 0xD0	; 208
    2058:	4a 33       	cpi	r20, 0x3A	; 58
    205a:	18 f0       	brcs	.+6      	; 0x2062 <__ultoa_invert+0x7c>
    205c:	49 5d       	subi	r20, 0xD9	; 217
    205e:	31 fd       	sbrc	r19, 1
    2060:	40 52       	subi	r20, 0x20	; 32
    2062:	41 93       	st	Z+, r20
    2064:	02 d0       	rcall	.+4      	; 0x206a <__ultoa_invert+0x84>
    2066:	a9 f7       	brne	.-22     	; 0x2052 <__ultoa_invert+0x6c>
    2068:	ea cf       	rjmp	.-44     	; 0x203e <__ultoa_invert+0x58>
    206a:	b4 e0       	ldi	r27, 0x04	; 4
    206c:	a6 95       	lsr	r26
    206e:	97 95       	ror	r25
    2070:	87 95       	ror	r24
    2072:	77 95       	ror	r23
    2074:	67 95       	ror	r22
    2076:	ba 95       	dec	r27
    2078:	c9 f7       	brne	.-14     	; 0x206c <__ultoa_invert+0x86>
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 05       	cpc	r22, r1
    207e:	71 05       	cpc	r23, r1
    2080:	08 95       	ret
    2082:	9b 01       	movw	r18, r22
    2084:	ac 01       	movw	r20, r24
    2086:	0a 2e       	mov	r0, r26
    2088:	06 94       	lsr	r0
    208a:	57 95       	ror	r21
    208c:	47 95       	ror	r20
    208e:	37 95       	ror	r19
    2090:	27 95       	ror	r18
    2092:	ba 95       	dec	r27
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__ultoa_invert+0xa2>
    2096:	62 0f       	add	r22, r18
    2098:	73 1f       	adc	r23, r19
    209a:	84 1f       	adc	r24, r20
    209c:	95 1f       	adc	r25, r21
    209e:	a0 1d       	adc	r26, r0
    20a0:	08 95       	ret

000020a2 <__prologue_saves__>:
    20a2:	2f 92       	push	r2
    20a4:	3f 92       	push	r3
    20a6:	4f 92       	push	r4
    20a8:	5f 92       	push	r5
    20aa:	6f 92       	push	r6
    20ac:	7f 92       	push	r7
    20ae:	8f 92       	push	r8
    20b0:	9f 92       	push	r9
    20b2:	af 92       	push	r10
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	ca 1b       	sub	r28, r26
    20cc:	db 0b       	sbc	r29, r27
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	09 94       	ijmp

000020da <__epilogue_restores__>:
    20da:	2a 88       	ldd	r2, Y+18	; 0x12
    20dc:	39 88       	ldd	r3, Y+17	; 0x11
    20de:	48 88       	ldd	r4, Y+16	; 0x10
    20e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    20e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    20e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    20e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    20e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    20ec:	b9 84       	ldd	r11, Y+9	; 0x09
    20ee:	c8 84       	ldd	r12, Y+8	; 0x08
    20f0:	df 80       	ldd	r13, Y+7	; 0x07
    20f2:	ee 80       	ldd	r14, Y+6	; 0x06
    20f4:	fd 80       	ldd	r15, Y+5	; 0x05
    20f6:	0c 81       	ldd	r16, Y+4	; 0x04
    20f8:	1b 81       	ldd	r17, Y+3	; 0x03
    20fa:	aa 81       	ldd	r26, Y+2	; 0x02
    20fc:	b9 81       	ldd	r27, Y+1	; 0x01
    20fe:	ce 0f       	add	r28, r30
    2100:	d1 1d       	adc	r29, r1
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	ed 01       	movw	r28, r26
    210e:	08 95       	ret

00002110 <_exit>:
    2110:	f8 94       	cli

00002112 <__stop_program>:
    2112:	ff cf       	rjmp	.-2      	; 0x2112 <__stop_program>
